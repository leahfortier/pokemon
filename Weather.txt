# The name of each effect and its contents.
# Blocks are separated by '*'
# Any function must be terminated by ### on a line by itself
# Fields can be specified in any order

Constructor:
	Namesies Enum Namesies Effect
	WeatherElement Enum Type
*
Failure:
	Header boolean applies(Battle b, ActivePokemon caster, ActivePokemon victim, CastSource source)
	CanHave Not Default True Boolean b.getWeather().namesies() == this.namesies
*

***

ClearSkies:
	WeatherElement: Normal
	CanHave: True
	Int: Hidden-EndTurnEffect
	ApplyEndTurn:
	###
*
Raining:
	WeatherElement: Water
	Int: Hidden-EndTurnEffect
	ApplyEndTurn:
	b.addMessage("The rain continues to pour.");
	###
	CastMessage: "It started to rain!"
	SubsideMessage: "The rain stopped."
	WeatherStatChange: Water Fire
*
Sunny:
	WeatherElement: Fire
	Int: Hidden-EndTurnEffect
	ApplyEndTurn:
	b.addMessage("The sunlight is strong.");
	###
	CastMessage: "The sunlight turned harsh!"
	SubsideMessage: "The sunlight faded."
	WeatherStatChange: Fire Water
*
Sandstorm:
	WeatherElement: Rock
	BuffetImmune: Type.ROCK, Type.GROUND, Type.STEEL
	BuffetMessage: p.getName() + " is buffeted by the sandstorm!"
	PreBuffetMessage: "The sandstorm rages"
	CastMessage: "A sandstorm kicked up!"
	SubsideMessage: "The sandstorm subsided."
	ToModify: Sp_Defense
	ModifyMultiplier: 1.5 p.isType(b, Type.ROCK)
*
Hailing:
	WeatherElement: Ice
	CastMessage: "It started to hail!"
	SubsideMessage: "The hail stopped."
	BuffetImmune: Type.ICE
	BuffetMessage: p.getName() + " is buffeted by the hail!"
	PreBuffetMessage: "The hail continues to fall."
*