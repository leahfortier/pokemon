# The name of each pokemon effect and its contents.
# Blocks are separated by '*'
# Any function must be terminated by ### on a line by itself
# Fields can be specified in any order

Constructor:
	Namesies Enum Namesies Effect
	MinTurns Default -1 Int
	MaxTurns Default -1 Int
	NextTurnSubside Default False Boolean
*
Failure:
	Header boolean applies(Battle b, ActivePokemon caster, ActivePokemon victim, CastSource source)
	FailType List Enum Type victim.isType(b, {0})
	FailAbility List Enum Namesies Ability (victim.hasAbility({0}) && !caster.breaksTheMold())
	FailCondition Int {0}
	CanHave Not Default True Boolean victim.hasEffect(this.namesies)
*

***

LeechSeed:
	Int: EndTurnEffect, RapidSpinRelease, PassableEffect
	FailType: Grass
	FailMessage: 
	if (victim.isType(b, Type.GRASS)) return "It doesn't affect " + victim.getName() + "!";
	if (victim.hasEffect(this.namesies)) return victim.getName() + " is already seeded!";
	###
	CastMessage: victim.getName() + " was seeded!"
	ApplyEndTurn: 
	if (victim.hasAbility(Namesies.MAGIC_GUARD_ABILITY))
	{
		return;
	}
	
	b.addMessage(victim.getName() + "'s health was sapped!");
	b.getOtherPokemon(victim.user()).sapHealth(victim, victim.reduceHealthFraction(b, 1/8.0), b, false, false);
	###
	RapidSpin: user.getName() + " was released from leech seed!"
*
BadPoison:
	Field: 
	private int turns;
	###
	GetTurns: 
	return turns;
	###
	FailCondition: !Status.applies(StatusCondition.POISONED, b, caster, victim)
	CanHave: True
	Cast: 
	super.cast(b, caster, victim, source, printCast);
	Status.giveStatus(b, caster, victim, StatusCondition.POISONED);
	###
	Int: EndTurnEffect
	ApplyEndTurn: 
	turns++;
	###
*
Flinch:
	Int: BeforeTurnEffect
	FailAbility: Inner Focus
	FailCondition: !b.isFirstAttack()
	CastMessage: victim.getName() + " flinched!"
	CanAttack:
	return false;
	###
	NumTurns: 1
	Cast: 
	super.cast(b, caster, victim, source, printCast);
	if (victim.hasAbility(Namesies.STEADFAST_ABILITY))
	{
		victim.getAttributes().modifyStage(victim, victim, 1, Stat.SPEED, b, CastSource.ABILITY);
	}
	###
*
FireSpin:
	PartialTrap: fire_spin victim.getName() + " was trapped in the fiery vortex!"
*
Infestation:
	PartialTrap: infestation victim.getName() + " has been afflicted with an infestation!"
*
MagmaStorm:
	PartialTrap: magma_storm victim.getName() + " was trapped by swirling magma!"
*
Clamped:
	PartialTrap: clamp user.getName() + " clamped " + victim.getName() + "!"
*
Whirlpooled:
	PartialTrap: whirlpool victim.getName() + " was trapped in the vortex!"
*
Wrapped:
	PartialTrap: wrap victim.getName() + " was wrapped by " + user.getName() + "!"
*
Binded:
	PartialTrap: bind victim.getName() + " was binded by " + user.getName() + "!"
*
SandTomb:
	PartialTrap: sand_tomb victim.getName() + " was trapped by sand tomb!"
*
KingsShield:
	ProtectingEffect: True
	OnProtectingSuccess:
	// Pokemon that make contact with the king's shield have their attack reduced
	if (p.getAttack().isMoveType(MoveType.PHYSICAL_CONTACT))
	{
		p.getAttributes().modifyStage(opp, p, -2, Stat.ATTACK, b, CastSource.EFFECT, "The King's Shield {change} " + p.getName() + "'s attack!");
	}
	###
*
SpikyShield:
	ProtectingEffect: True
	OnProtectingSuccess:
	// Pokemon that make contact with the spiky shield have their health reduced
	if (p.getAttack().isMoveType(MoveType.PHYSICAL_CONTACT))
	{
		b.addMessage(p.getName() + " was hurt by " + opp.getName() + "'s Spiky Shield!");
		p.reduceHealthFraction(b, 1/8.0);
	}
	###
*
Protecting:
	ProtectingEffect: True
*
QuickGuard:
	ProtectingEffect: True
	ProtectingCondition: attacking.getAttack().getPriority(b, attacking) > 0
*
CraftyShield:
	ProtectingEffect: True
	ProtectingCondition: attacking.getAttack().getCategory() == Category.STATUS
*
MatBlock:
	ProtectingEffect: True
	ProtectingCondition: attacking.getAttack().getCategory() != Category.STATUS
	Cast:
	// No successive decay for this move
	super.cast(b, caster, victim, source, printCast);
	###
*
Bracing:
	NumTurns: 1
	SuccessiveDecay: True
	CastMessage: user.getName() + " braced itself!"
	Int: BracingEffect
	Bracing: 
	return true;
	###
	BraceMessage: bracer.getName() + " endured the hit!"
*
Confusion:
	Int: PassableEffect, BeforeTurnEffect
	FailAbility: Own Tempo
	FailMessage: 
	if (victim.hasEffect(this.namesies)) 
	{
		return victim.getName() + " is already confused!";
	}
	if (victim.hasAbility(Namesies.OWN_TEMPO_ABILITY)) 
	{
		return victim.getName() + "'s " + victim.getAbility().getName() + " prevents confusion!";
	}
	###
	Field: 
	private int turns;
	###
	CanAttack: 
	// Snap it out!
	if (turns == 0)
	{
		b.addMessage(p.getName() + " snapped out of its confusion!");
		super.active = false;
		return true;
	}
	
	turns--;
	b.addMessage(p.getName() + " is confused!");
	
	// 50% chance to hurt yourself in confusion while confused
	if (Math.random() < .5)
	{
		b.addMessage("It hurt itself in confusion!");
		
		// Perform confusion damage
		Move temp = p.getMove();
		p.setMove(new Move(Attack.getAttack(Namesies.CONFUSION_DAMAGE_ATTACK)));
		p.reduceHealth(b, b.damageCalc(p, p));
		p.setMove(temp);
		
		return false;
	}
	
	return true;
	###
	Activate: 
	x.turns = (int)(Math.random()*4) + 1; // Between 1 and 4 turns
	###
	CastMessage: victim.getName() + " became confused!"
	Cast: 
	super.cast(b, caster, victim, source, printCast);
	if (victim.isHoldingItem(b, Namesies.PERSIM_BERRY_ITEM))
	{
		b.addMessage(victim.getName() + "'s " + Namesies.PERSIM_BERRY_ITEM.getName() + " snapped it out of confusion!");
		victim.getAttributes().removeEffect(this.namesies);
		victim.consumeItem(b);
	}
	###
*
SelfConfusion:
	Int: ForceMoveEffect
	Field: 
	private Move move;
	###
	MinTurns: 2
	MaxTurns: 3
	Subside: 
	Confusion c = new Confusion();
	if (c.applies(b, p, p, CastSource.EFFECT))
	{
		b.addMessage(p.getName() + " became confused due to fatigue!");
		p.addEffect(c);
	}
	###
	GetForceMove: 
	return move;
	###
	Cast: 
	move = caster.getMove();
	super.cast(b, caster, victim, source, printCast);
	###
	Activate: 
	x.move = move;
	###
*
Safeguard:
	Defog: "The effects of " + victim.getName() + "'s Safeguard faded."
	Int: DefogRelease
	SafeguardEffect: Safeguard
*
GuardSpecial:
	SafeguardEffect: Guard Special
*
Encore:
	FailAbility: Aroma Veil
	FailMessage: 
	if (victim.hasAbility(Namesies.AROMA_VEIL_ABILITY))
	{
		return victim.getName() + "'s " + victim.getAbility().getName() + " prevents it from being encored!";
	}
	###
	Int: AttackSelectionEffect, ForceMoveEffect, BeforeTurnEffect, EndTurnEffect
	Field: 
	private Move move;
	###
	NumTurns: 3
	SubsideMessage: "The effects of " + victim.getName() + "'s encore faded."
	GetForceMove: 
	return move;
	###
	Usable: 
	return move.getAttack().namesies() == m.getAttack().namesies();
	###
	UnusableMessage: "Only " + move.getAttack().getName() + " can be used right now!"
	FailCondition: victim.getAttributes().getLastMoveUsed() == null || victim.getAttributes().getLastMoveUsed().getPP() == 0 || victim.getAttributes().getLastMoveUsed().getAttack().isMoveType(MoveType.ENCORELESS)
	CastMessage: victim.getName() + " got an encore!"
	Cast: 
	move = victim.getAttributes().getLastMoveUsed();
	super.cast(b, caster, victim, source, printCast);
	###
	Activate: 
	x.move = move;
	###
	CanAttack: 
	if (p.getAttack().namesies() != move.getAttack().namesies())
	{
		b.printAttacking(p);
		b.addMessage(this.getFailMessage(b, p, opp));
		return false;
	}
	return true;
	###
	ApplyEndTurn: 
	if (move.getPP() == 0) active = false; // If the move runs out of PP, Encore immediately ends
	###
*
Disable:
	FailAbility: Aroma Veil
	Int: AttackSelectionEffect, MoveCondition, BeforeTurnEffect
	Field: 
	private Move disabled;
	private int turns;
	###
	Activate: 
	x.disabled = disabled;
	x.turns = (int)(Math.random()*4) + 4; // Between 4 and 7 turns
	###
	Usable: 
	return disabled.getAttack().namesies() != m.getAttack().namesies();
	###
	UnusableMessage: disabled.getAttack().getName() + " is disabled!"
	FailCondition: victim.getAttributes().getLastMoveUsed() == null || victim.getAttributes().getLastMoveUsed().getPP() == 0
	CanAttack: 
	turns--;
	if (p.getAttack().namesies() == disabled.getAttack().namesies())
	{
		b.printAttacking(p);
		b.addMessage(p.getAttack().getName() + " is disabled!");
		return false;
	}
	return true;
	###
	ShouldSubside: 
	return turns == 0;
	###
	SubsideMessage: victim.getName() + "'s " + disabled.getAttack().getName() + " is no longer disabled!"
	CastMessage: victim.getName() + "'s " + disabled.getAttack().getName() + " was disabled!"
	Cast: 
	disabled = victim.getAttributes().getLastMoveUsed();
	super.cast(b, caster, victim, source, printCast);
	###
	GetMove: 
	return disabled;
	###
	FailMessage: 
	if (victim.hasEffect(this.namesies)) 
	{
		return victim.getName() + " is already disabled!";
	}
	if (victim.hasAbility(Namesies.AROMA_VEIL_ABILITY))
	{
		return victim.getName() + "'s " + victim.getAbility().getName() + " prevents it from being disabled!";
	}
	###
*
RaiseCrits:
	Field: 
	private boolean focusEnergy;
	private boolean direHit;
	private boolean berrylicious;
	###
	Activate: 
	x.focusEnergy = false;
	x.direHit = false;
	x.berrylicious = false;
	###
	Int: CritStageEffect, PassableEffect
	IncreaseCritStage: 
	int critStage = 0;
	
	if (focusEnergy)
	{
		critStage++;
	}
	
	if (direHit)
	{
		critStage++;
	}
	
	if (berrylicious)
	{
		critStage++;
	}
	
	if (critStage == 0) 
	{
		Global.error("RaiseCrits effect is not actually raising crits.");
	}
	
	return critStage + stage;
	###
	FailCondition: source == CastSource.USE_ITEM && victim.hasEffect(this.namesies) && ((RaiseCrits)victim.getEffect(this.namesies)).direHit
	CastMessage: victim.getName() + " is getting pumped!"
	CanHave: True
	Cast: 
	if (!victim.hasEffect(this.namesies)) super.cast(b, caster, victim, source, printCast);
	else if (printCast) b.addMessage(getCastMessage(b, caster, victim));
	
	RaiseCrits critsies = (RaiseCrits)victim.getEffect(this.namesies);
	switch (source)
	{
		case ATTACK:
			critsies.focusEnergy = true;
			break;
		case USE_ITEM:
			critsies.direHit = true;
			break;
		case HELD_ITEM:
			critsies.berrylicious = true;
			break;
		default:
			Global.error("Unknown source for RaiseCrits effect.");
	}
	###
*
ChangeItem:
	Int: ItemCondition
	Activate: 
	x.item = item;
	###
	Cast: 
	item = ((ItemCondition)source.getSource(b, caster)).getItem();
	while (victim.getAttributes().removeEffect(this.namesies));
	super.cast(b, caster, victim, source, printCast);
	###
	Field:
	private Item item;
	###
	GetItem: 
	return item;
	###
	CanHave: True
*
ChangeType:
	Int: TypeCondition
	Field: 
	private Type[] type;
	private ChangeTypeMove typeSource;
	private CastSource castSource;
	
	private String castMessage(ActivePokemon victim)
	{
		String changeType = type[0].getName() + (type[1] == Type.NONE ? "" : "/" + type[1].getName());
		
		switch (castSource)
		{
			case ATTACK:
				return victim.getName() + " was changed to " + changeType + " type!!";
			case ABILITY:
				return victim.getName() + "'s " + ((Ability)typeSource).getName() + " changed it to the " + changeType + " type!!";
			case HELD_ITEM:
				return victim.getName() + "'s " + ((Item)typeSource).getName() + " changed it to the " + changeType + " type!!";
				
			default:
				Global.error("Invalid cast source for ChangeType " + castSource);
				return null;
		}
	}
	###
	Activate: 
	x.type = type;
	x.castSource = castSource;
	x.typeSource = typeSource;
	###
	Cast: 
	castSource = source;
	typeSource = (ChangeTypeMove)source.getSource(b, caster);
	type = typeSource.getType(b, caster, victim);
	
	// Remove any other ChangeType effects that the victim may have
	while (victim.getAttributes().removeEffect(this.namesies));
	
	super.cast(b, caster, victim, source, printCast);
	###
	GetTypeCondition:
	return type;
	###
	CastMessage: castMessage(victim)
	CanHave: True
	Subside: 
	b.addMessage("", p);
	###
*
ChangeAbility:
	Int: AbilityCondition
	Field: 
	private Ability ability;
	private String message;
	###
	Activate: 
	x.ability = ability;
	x.message = message;
	###
	Cast: 
	Ability oldAbility = victim.getAbility();
	oldAbility.deactivate(b, victim);
	
	ChangeAbilityMove changey = (ChangeAbilityMove)source.getSource(b, caster);
	ability = changey.getAbility(b, caster, victim);
	message = changey.getMessage(b, caster, victim);
	
	while (victim.getAttributes().removeEffect(this.namesies));
	super.cast(b, caster, victim, source, printCast);
	###
	GetAbility: 
	return ability;
	###
	CanHave: True
	CastMessage: message
*
Stockpile:
	Field: 
	private int turns;
	###
	Activate: 
	x.turns = 0;
	###
	GetTurns: 
	return turns;
	###
	Int: StageChangingEffect
	CanHave: True
	Cast: 
	if (!victim.hasEffect(this.namesies)) 
	{
		super.cast(b, caster, victim, source, printCast);
	}
	
	Stockpile stockpile = (Stockpile)victim.getEffect(this.namesies);
	if (stockpile.turns < 3)
	{
		b.addMessage(victim.getName() + " Defense and Special Defense were raised!");
		stockpile.turns++;
		return;
	}
	
	b.addMessage(this.getFailMessage(b, caster, victim));
	###
	StageChange: 
	return s == Stat.DEFENSE || s == Stat.SP_DEFENSE ? stage + turns : stage;
	###
	Subside: 
	b.addMessage("The effects of " + p.getName() + "'s Stockpile ended!");
	b.addMessage(p.getName() + "'s Defense and Special Defense decreased!");
	###
*
UsedDefenseCurl:
	UsedProof: True
*
UsedMinimize:
	UsedProof: True
*
Mimic:
	Field: 
	private Move mimicMove;
	###
	Int: MoveListCondition
	GetMoveList: 
	Move[] list = new Move[moves.length];
	for (int i = 0; i < list.length; i++)
	{
		if (moves[i].getAttack().namesies() == Namesies.MIMIC_ATTACK)
		{
			list[i] = mimicMove;
		}
		else
		{
			list[i] = moves[i];
		}
	}
	
	return list;
	###
	Cast: 
	ActivePokemon other = b.getOtherPokemon(victim.user());
	Attack m = other.getAttributes().getLastMoveUsed() == null ? null : other.getAttributes().getLastMoveUsed().getAttack();
	
	if (m == null || victim.hasMove(b, m.namesies()) || m.isMoveType(MoveType.MIMICLESS))
	{
		b.addMessage(this.getFailMessage(b, caster, victim));
		return;
	}
	
	mimicMove = new Move(m);
	super.cast(b, caster, victim, source, printCast);
	###
	CastMessage: victim.getName() + " learned " + mimicMove.getAttack().getName() + "!"
	Activate: 
	x.mimicMove = mimicMove;
	###
*
Imprison:
	Int: AttackSelectionEffect, BeforeTurnEffect
	Field: 
	private List<Namesies> unableMoves;
	###
	Activate: 
	x.unableMoves = unableMoves;
	###
	Cast:
	unableMoves = new ArrayList<>();
	for (Move m : caster.getMoves(b))
	{
		unableMoves.add(m.getAttack().namesies());
	}
	
	super.cast(b, caster, victim, source, printCast);
	###
	CastMessage: user.getName() + " sealed " + victim.getName() + "'s moves!"
	Usable: 
	return !unableMoves.contains(m.getAttack().namesies());
	###
	UnusableMessage: "No!! You are imprisoned!!!"
	CanAttack: 
	if (unableMoves.contains(p.getAttack().namesies()))
	{
		b.printAttacking(p);
		b.addMessage(this.getFailMessage(b, p, opp));
		return false;
	}
	
	return true;
	###
*
Trapped:
	Int: TrappingEffect
	CastMessage: user.getName() + " can't escape!"
	TrappingMessage: trapped.getName() + " cannot be recalled at this time!"
*	
Foresight:
	ForesightEffect: Normal Fighting Ghost
*
MiracleEye:
	ForesightEffect: Psychic Psychic Dark
*
Torment:
	FailAbility: Aroma Veil
	FailMessage: 
	if (victim.hasAbility(Namesies.AROMA_VEIL_ABILITY))
	{
		return victim.getName() + "'s " + victim.getAbility().getName() + " prevents torment!";
	}
	###
	Int: AttackSelectionEffect, BeforeTurnEffect
	Usable: 
	return (p.getAttributes().getLastMoveUsed() == null || p.getAttributes().getLastMoveUsed().getAttack().namesies() != m.getAttack().namesies());
	###
	UnusableMessage: p.getName() + " cannot use the same move twice in a row!"
	CanAttack: 
	if (!usable(p, p.getMove()))
	{
		b.printAttacking(p);
		b.addMessage(this.getFailMessage(b, p, opp));
		return false;
	}
	return true;
	###
	CastMessage: user.getName() + " tormented " + victim.getName() + "!"
*	
Taunt:
	NumTurns: 3
	FailAbility: Aroma Veil, Oblivious
	Int: AttackSelectionEffect, BeforeTurnEffect
	FailMessage: 
	if (victim.hasAbility(Namesies.OBLIVIOUS_ABILITY) || victim.hasAbility(Namesies.AROMA_VEIL_ABILITY))
	{
		return victim.getName() + "'s " + victim.getAbility().getName() + " prevents it from being taunted!";
	}
	###
	Usable: 
	return m.getAttack().getCategory() != Category.STATUS;
	###
	UnusableMessage: "No!! Not while you're under the effects of taunt!!"
	CanAttack:
	if (!usable(p, p.getMove()))
	{
		b.printAttacking(p);
		b.addMessage(this.getFailMessage(b, p, opp));
		return false;
	}
	return true;
	###
	CastMessage: victim.getName() + " fell for the taunt!"
	SubsideMessage: "The effects of the taunt wore off."
*	
LockOn:
	NumTurns: 2
	CastMessage: user.getName() + " took aim!"
	Int: PassableEffect, AccuracyBypassEffect
	BypassAccuracy:
	return true;
	###
*
Telekinesis:
	NumTurns: 4
	CastMessage: victim.getName() + " was levitated due to " + user.getName() + "'s telekinesis!"
	FailCondition: victim.hasEffect(Namesies.INGRAIN_EFFECT)
	SubsideMessage: victim.getName() + " is no longer under the effects of telekinesis."
	Int: LevitationEffect, OpponentAccuracyBypassEffect
	OpponentBypassAccuracy:
	// Opponent can always strike you unless they are using a OHKO move or you are semi-invulnerable
	return !attacking.getAttack().isMoveType(MoveType.ONE_HIT_KO) && !defending.isSemiInvulnerable();
	###
*
Ingrain:
	Int: TrappingEffect, EndTurnEffect, GroundedEffect, PassableEffect
	Trapped:
	return true;
	###
	TrappingMessage: trapped.getName() + " cannot be recalled due to ingrain!"
	ApplyEndTurn: 
	if (victim.fullHealth() || victim.hasEffect(Namesies.HEAL_BLOCK_EFFECT))
	{
		return;
	}
	
	int healAmount = victim.healHealthFraction(1/16.0);
	if (victim.isHoldingItem(b, Namesies.BIG_ROOT_ITEM)) 
	{
		victim.heal((int)(healAmount*.3));
	}
	
	b.addMessage(victim.getName() + " restored some HP due to ingrain!", victim);
	###
	CastMessage: victim.getName() + " planted its roots!"
	Cast: 
	super.cast(b, caster, victim, source, printCast);
			
	// TODO: Look into to see if this can be somehow combined with Gravity
	if (victim.hasEffect(Namesies.MAGNET_RISE_EFFECT))
	{
		Effect.removeEffect(victim.getEffects(), Namesies.MAGNET_RISE_EFFECT);
		b.addMessage("The effects of " + victim.getName() + "'s magnet rise were cancelled due to ingrain!");
	}
	
	if (victim.hasEffect(Namesies.TELEKINESIS_EFFECT))
	{
		Effect.removeEffect(victim.getEffects(), Namesies.TELEKINESIS_EFFECT);
		b.addMessage("The effects of telekinesis were cancelled due to ingrain!");
	}
	###
*
Grounded:
	Int: GroundedEffect
	Cast: 
	// TODO: Find a way to combine this with gravity or something like that
	super.cast(b, caster, victim, source, printCast);
	
	if (victim.isSemiInvulnerableFlying())
	{
		victim.getMove().switchReady(b);
		b.addMessage(victim.getName() + " fell to the ground!");
	}
	
	// TODO: Also Magnet rise needs to fail when used when the Pokemon is Grounded
	if (victim.hasEffect(Namesies.MAGNET_RISE_EFFECT))
	{
		Effect.removeEffect(victim.getEffects(), Namesies.MAGNET_RISE_EFFECT);
		b.addMessage("The effects of " + victim.getName() + "'s magnet rise was cancelled!");
	}
	
	if (victim.hasEffect(Namesies.TELEKINESIS_EFFECT))
	{
		Effect.removeEffect(victim.getEffects(), Namesies.TELEKINESIS_EFFECT);
		b.addMessage("The effects of telekinesis were cancelled!");
	}
	###
*
Curse:
	Int: EndTurnEffect, PassableEffect
	ApplyEndTurn: 
	if (victim.hasAbility(Namesies.MAGIC_GUARD_ABILITY))
	{
		return;
	}
	
	b.addMessage(victim.getName() + " was hurt by the curse!");
	victim.reduceHealthFraction(b, 1/4.0);
	###
	CastMessage: user.getName() + " cut its own HP and put a curse on " + victim.getName() + "!"
	Cast: 
	super.cast(b, caster, victim, source, printCast);
	caster.reduceHealthFraction(b, 1/2.0);
	###
*
Yawn:
	NumTurns: 2
	FailCondition: !Status.applies(StatusCondition.ASLEEP, b, caster, victim)
	Subside: 
	Status.giveStatus(b, b.getOtherPokemon(p.user()), p, StatusCondition.ASLEEP);
	###
	CastMessage: victim.getName() + " grew drowsy!"
*
MagnetRise:
	Int: LevitationEffect, PassableEffect
	NumTurns: 5
	CastMessage: user.getName() + " levitated with electromagnetism!"
	FailCondition: victim.hasEffect(Namesies.INGRAIN_EFFECT)
	SubsideMessage: victim.getName() + " is no longer under the effects of magnet rise."
*
Uproar:
	NumTurns: 3
	SubsideMessage: "The uproar ended."
	Cast: 
	uproar = victim.getMove();
	super.cast(b, caster, victim, source, printCast);
	
	wakeUp(b, victim);
	wakeUp(b, b.getOtherPokemon(victim.user()));
	###
	Activate: 
	x.uproar = uproar;
	###
	Field: 
	private Move uproar;
	
	private static void wakeUp(Battle b, ActivePokemon wakey)
	{
		if (wakey.hasStatus(StatusCondition.ASLEEP))
		{
			wakey.removeStatus();
			b.addMessage("The uproar woke up " + wakey.getName() + "!", wakey);
		}	
	}
	###
	Int: ForceMoveEffect, AttackSelectionEffect, EndTurnEffect
	GetForceMove: 
	return uproar;
	###
	CastMessage: user.getName() + " started an uproar!"
	Usable: 
	return m.getAttack().namesies() == Namesies.UPROAR_ATTACK;
	###
	UnusableMessage: "Only Uproar can be used right now!"
	ApplyEndTurn: 
	// If uproar runs out of PP, the effect immediately ends
	if (uproar.getPP() == 0) 
	{
		active = false;
	}
	###
*
AquaRing:
	Int: PassableEffect, EndTurnEffect
	ApplyEndTurn: 
	if (victim.fullHealth() || victim.hasEffect(Namesies.HEAL_BLOCK_EFFECT)) return;
	int healAmount = victim.healHealthFraction(1/16.0);
	if (victim.isHoldingItem(b, Namesies.BIG_ROOT_ITEM)) 
	{
		victim.heal((int)(healAmount*.3));
	}
	
	b.addMessage(victim.getName() + " restored some HP due to aqua ring!", victim);
	###
	CastMessage: user.getName() + " surrounded itself with a veil of water!"
*
Nightmare:
	FailCondition: !victim.hasStatus(StatusCondition.ASLEEP)
	Int: EndTurnEffect
	ApplyEndTurn: 
	if (victim.hasAbility(Namesies.MAGIC_GUARD_ABILITY))
	{
		return;
	}
	
	b.addMessage(victim.getName() + " was hurt by its nightmare!");
	victim.reduceHealthFraction(b, 1/4.0);
	###
	ShouldSubside: 
	return !victim.hasStatus(StatusCondition.ASLEEP);
	###
	CastMessage: victim.getName() + " began having a nightmare!"
*
Charge:
	NumTurns: 2
	Int: PowerChangeEffect
	GetMultiplier: 
	return user.getAttackType() == Type.ELECTRIC ? 2 : 1;
	###
*
Focusing:
	CastMessage: user.getName() + " began tightening its focus!"
	NumTurns: 1
*
FiddyPercentStronger:
	Int: PowerChangeEffect
	GetMultiplier: 
	return 1.5;
	###
	NumTurns: 1
*
Transformed:
	Field: 
	private Move[] moveList;
	private int[] stats;
	private Type[] type;
	###
	Activate: 
	x.moveList = moveList;
	x.stats = stats;
	x.type = type;
	###
	CastMessage: victim.getName() + " transformed into " + b.getOtherPokemon(victim.user()).getPokemonInfo().getName() + "!"
	Cast: 
	// Pokemon to transform into
	ActivePokemon transformee = b.getOtherPokemon(victim.user());
	
	// Set the new stats
	stats = new int[Stat.NUM_STATS];
	for (int i = 0; i < stats.length; i++)
	{
		stats[i] = Stat.getStat(i, victim.getLevel(), transformee.getPokemonInfo().getStat(i), victim.getIV(i), victim.getEV(i), victim.getNature().getNatureVal(i));
	}
	stats[Stat.HP.index()] = victim.getMaxHP();
	
	// Copy the move list
	List<Move> transformeeMoves = transformee.getMoves(b);
	moveList = new Move[transformeeMoves.size()];
	for (int i = 0; i < transformeeMoves.size(); i++)
	{
		moveList[i] = new Move(transformeeMoves.get(i).getAttack(), 5);
	}
	
	// Copy all stages
	for (int i = 0; i < Stat.NUM_BATTLE_STATS; i++) 
	{
		victim.getAttributes().setStage(i, transformee.getStage(i));
	}
	
	// Copy the type
	type = transformee.getPokemonInfo().getType();
	
	// Castaway
	super.cast(b, caster, victim, source, printCast);
	b.addMessage("", transformee.getPokemonInfo(), transformee.isShiny(), true, victim.user());
	b.addMessage("", victim);
	###
	FailCondition: b.getOtherPokemon(victim.user()).hasEffect(this.namesies) || ((caster.hasAbility(Namesies.ILLUSION_ABILITY) && caster.getAbility().isActive()))
	Int: MoveListCondition, StatsCondition, TypeCondition
	GetMoveList:
	return moveList;
	###
	GetStat: 
	return stats[stat.index()];
	###
	GetTypeCondition: 
	return type;
	###
*
Substitute:
	Int: IntegerCondition, PassableEffect, EffectBlockerEffect
	Field: 
	private int hp;
	###
	Activate: 
	x.hp = hp;
	###
	IntegerName: hp
	CastMessage: victim.getName() + " put in a substitute!"
	Cast: 
	hp = victim.reduceHealthFraction(b, .25) + 1;
	super.cast(b, caster, victim, source, printCast);
	b.addMessage("", victim);
	###
	FailCondition: victim.getHPRatio() <= .25 || victim.getMaxHP() <= 3
	ValidMove: 
	// Self-target and field moves are always successful
	if (user.getAttack().isSelfTarget() || user.getAttack().isMoveType(MoveType.FIELD))
	{
		return true;
	}
	
	// Substitute-piercing moves, Sound-based moves, and Pokemon with the Infiltrator ability bypass Substitute
	if (user.getAttack().isMoveType(MoveType.SUBSTITUTE_PIERCING) || user.getAttack().isMoveType(MoveType.SOUND_BASED) || user.hasAbility(Namesies.INFILTRATOR_ABILITY))
	{
		return true;
	}
	
	// Print the failure for status moves
	if (user.getAttack().getCategory() == Category.STATUS)
	{
		b.addMessage(this.getFailMessage(b, user, victim));
	}
	
	return false;
	###
*	
Mist:
	NumTurns: 5
	CastMessage: user.getName() + " shrouded itself in mist!"
	SubsideMessage: "The mist faded."
	Defog: "The mist faded."
	Int: StatProtectingEffect, DefogRelease
	StatProtect: 
	return !caster.hasAbility(Namesies.INFILTRATOR_ABILITY);
	###
	StatProtectMessage: 
	return "The mist prevents stat reductions!";
	###
*
MagicCoat:
	CastMessage: user.getName() + " shrouded itself with a magic coat!"
	NumTurns: 1
	MagicReflection: "Magic Coat"
*
Bide:
	Field: 
	private Move move;
	private int turns;
	private int damage;
	###
	Int: ForceMoveEffect, EndTurnEffect, IntegerCondition
	GetForceMove: 
	return move;
	###
	IntegerName: damage
	GetTurns: 
	return turns;
	###
	CastMessage: user.getName() + " is storing energy!"
	Activate: 
	x.move = move;
	x.turns = 1;
	x.damage = 0;
	###
	Cast: 
	Bide bidesies = (Bide)victim.getEffect(this.namesies);
			
	// If the victim is not already under the effects of Bide, cast it upon them
	if (bidesies == null)
	{
		move = caster.getMove();
		super.cast(b, caster, victim, source, printCast);
		return;
	}
	
	// Already has the effect, but not ready for it to end yet -- store dat energy 
	if (bidesies.turns > 0)
	{
		bidesies.turns--;
		b.addMessage(getCastMessage(b, caster, victim));
		return;
	}
	
	// TIME'S UP -- RELEASE DAT STORED ENERGY
	b.addMessage(victim.getName() + " released energy!");
	if (bidesies.damage == 0)
	{
		// Sucks to suck
		b.addMessage(this.getFailMessage(b, caster, victim));
	}
	else
	{
		// RETALIATION STATION
		b.getOtherPokemon(victim.user()).reduceHealth(b, 2*bidesies.damage);
	}
	
	// Bye Bye Bidesies
	victim.getAttributes().removeEffect(this.namesies);
	###
	CanHave: True
	ApplyEndTurn: 
	increase(victim.getAttributes().getDamageTaken());
	###
*
HalfWeight:
	Field: 
	private int layers;
	###
	CanHave: True
	Cast: 
	HalfWeight halfWeight = (HalfWeight)victim.getEffect(this.namesies);
	if (halfWeight == null) super.cast(b, caster, victim, source, printCast);
	else halfWeight.layers++;
	###
	Activate: 
	x.layers = 1;
	###
	Int: HalfWeightEffect
	HalfAmount: layers
*
PowerTrick:
	CanHave: True
	SwitchStat: 
	if (s == Stat.ATTACK) return Stat.DEFENSE;
	if (s == Stat.DEFENSE) return Stat.ATTACK;
	return s;
	###
	Int: PassableEffect, StatSwitchingEffect
	CastMessage: user.getName() + "'s attack and defense were swapped!"
	Cast: 
	PokemonEffect thaPowah = victim.getEffect(this.namesies);
	if (thaPowah == null)
	{
		super.cast(b, caster, victim, source, printCast);
		return;
	}
	
	b.addMessage(getCastMessage(b, caster, victim));
	victim.getAttributes().removeEffect(this.namesies);
	###
*
PowerSplit:
	StatSplit: Attack Sp_Attack
	CastMessage: user.getName() + " split the power!"
*
GuardSplit:
	StatSplit: Defense Sp_Defense
	CastMessage: user.getName() + " split the defense!"
*
HealBlock:
	FailAbility: Aroma Veil
	FailMessage: 
	if (victim.hasAbility(Namesies.AROMA_VEIL_ABILITY))
	{
		return victim.getName() + "'s " + victim.getAbility().getName() + " prevents heal block!";
	}
	###
	NumTurns: 5
	CastMessage: user.getName() + " blocked " + victim.getName() + " from healing!"
	SubsideMessage: "The effects of heal block wore off."
	Int: BeforeTurnEffect
	CanAttack:
	if (p.getAttack().isMoveType(MoveType.SAP_HEALTH))
	{
		b.printAttacking(p);
		b.addMessage(Effect.DEFAULT_FAIL_MESSAGE);
		return false;
	}
	
	return true;
	###
*
Infatuated:
	FailAbility: Oblivious, Aroma Veil
	FailCondition: !Gender.oppositeGenders(caster, victim)
	Int: BeforeTurnEffect
	FailMessage: 
	if (Gender.oppositeGenders(user, victim) && (victim.hasAbility(Namesies.OBLIVIOUS_ABILITY) || victim.hasAbility(Namesies.AROMA_VEIL_ABILITY)))
	{
		return victim.getName() + "'s " + victim.getAbility().getName() + " prevents infatuation!";
	}
	###
	CanAttack: 
	b.addMessage(p.getName() + " is in love with " + opp.getName() + "!");
	if (Math.random() < .5) 
	{
		return true;
	}
	
	b.addMessage(p.getName() + "'s infatuation kept it from attacking!");
	return false;
	###
	CastMessage: victim.getName() + " fell in love!"
	Cast: 
	super.cast(b, caster, victim, source, printCast);
	if (victim.isHoldingItem(b, Namesies.DESTINY_KNOT_ITEM) && this.applies(b, victim, caster, CastSource.HELD_ITEM))
	{
		super.cast(b, victim, caster, CastSource.HELD_ITEM, false);
		b.addMessage(victim.getName() + "'s " + Namesies.DESTINY_KNOT_ITEM.getName() + " caused " + caster.getName() + " to fall in love!");
	}	
	###
*
Snatch:
	NumTurns: 1
	Int: TargetSwapperEffect
	TargetSwap:
	Attack attack = user.getAttack();
	if (attack.isSelfTarget() && attack.getCategory() == Category.STATUS && !attack.isMoveType(MoveType.NON_SNATCHABLE))
	{
		b.addMessage(opponent.getName() + " snatched " + user.getName() + "'s move!");
		return true;
	}
	
	return false;
	###
*
Grudge:
	CastMessage: victim.getName() + " wants " + b.getOtherPokemon(victim.user()).getName() + " to bear a grudge!"
	Int: FaintEffect
	Deathwish: 
	if (murderer.getAttributes().isAttacking())
	{
		b.addMessage(murderer.getName() + "'s " + murderer.getAttack().getName() + " lost all its PP due to its grudge!");
		murderer.getMove().reducePP(murderer.getMove().getPP());
	}
	###
*
DestinyBond:
	CastMessage: victim.getName() + " is trying to take " + b.getOtherPokemon(victim.user()).getName() + " down with it!"
	Int: FaintEffect, BeforeTurnEffect
	CanAttack:
	super.active = false;
	return true;
	###
	Deathwish: 
	if (murderer.getAttributes().isAttacking())
	{
		b.addMessage(dead.getName() + " took " + murderer.getName() + " down with it!");
		murderer.reduceHealthFraction(b, 1);
	}
	###
*
PerishSong:
	NumTurns: 3
	FailAbility: Soundproof
	Int: PassableEffect, EndTurnEffect
	FailMessage: 
	if (victim.hasAbility(Namesies.SOUNDPROOF_ABILITY)) 
	{
		return victim.getName() + "'s " + victim.getAbility().getName() + " makes it immune to sound based moves!";
	}
	###
	ApplyEndTurn: 
	b.addMessage(victim.getName() + "'s Perish Song count fell to " + (super.numTurns - 1) + "!");
	if (super.numTurns == 1) victim.reduceHealthFraction(b, 1);
	###
*
Embargo:
	Int: PassableEffect
	CastMessage: victim.getName() + " can't use items now!"
	NumTurns: 5
	SubsideMessage: victim.getName() + " can use items again!"
*
ConsumedItem:
	Field: 
	private Item consumed;
	###
	Activate: 
	x.consumed = consumed;
	###
	Cast: 
	consumed = victim.getHeldItem(b);
	victim.removeItem();
	while (victim.getAttributes().removeEffect(this.namesies));
	super.cast(b, caster, victim, source, printCast);
	###
	Int: ItemCondition
	GetItem: 
	return consumed;
	###
	CanHave: True
*
FairyLock:
	Int: OpponentTrappingEffect
	OppTrapped:
	return true;
	###
*
Powder:
	NumTurns: 1
	CastMessage: user.getName() + " sprinkled powder on " + victim.getName() + "!"
	Int: BeforeTurnEffect
	CanAttack:
	// Fire-type moves makes the user explode
	if (p.getAttackType() == Type.FIRE)
	{
		b.addMessage("The powder exploded!");
		p.reduceHealthFraction(b, 1/4.0);
		return false;
	}
	
	return true;
	###
*
Electrified:
	NumTurns: 1
	CastMessage: user.getName() + " electrified " + victim.getName() + "!"
	Int: ChangeAttackTypeEffect
	ChangeAttackType:
	return Type.ELECTRIC;
	###
*
EatenBerry:
	UsedProof: True
*