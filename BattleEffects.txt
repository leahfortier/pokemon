# The name of each effect and its contents.
# Blocks are separated by '*'
# Any function must be terminated by ### on a line by itself
# Fields can be specified in any order

Constructor:
	Namesies Enum Namesies Effect
	MinTurns Default -1 Int
	MaxTurns Default -1 Int
	NextTurnSubside Default False Boolean
*
Failure:
	Header boolean applies(Battle b, ActivePokemon caster, ActivePokemon victim, CastSource source)
	CanHave Not Default True Boolean Effect.hasEffect(b.getEffects(), this.namesies)
*

***

Gravity:
	NumTurns: 5
	Int: GroundedEffect, StageChangingEffect, BeforeTurnEffect
	StageChange: 
	return s == Stat.EVASION ? stage - 2 : stage;
	###
	CastMessage: "Gravity intensified!"
	Cast: 
	super.cast(b, caster, victim, source, printCast);
	removeLevitation(b, caster);
	removeLevitation(b, victim);
	###
	Field: 
	private void removeLevitation(Battle b, ActivePokemon p)
	{
		if (p.isSemiInvulnerable() && (p.getAttack().getName().equals("Fly") || p.getAttack().getName().equals("Bounce")))
		{
			p.getMove().switchReady(b);
			b.addMessage(p.getName() + " fell due to the gravity!");
		}
		
		if (p.hasEffect(Namesies.MAGNET_RISE_EFFECT))
		{
			Effect.removeEffect(p.getEffects(), Namesies.MAGNET_RISE_EFFECT);
			b.addMessage("The effects of " + p.getName() + "'s magnet rise were cancelled due to the gravity!");
		}
		
		if (p.hasEffect(Namesies.TELEKINESIS_EFFECT))
		{
			Effect.removeEffect(p.getEffects(), Namesies.TELEKINESIS_EFFECT);
			b.addMessage("The effects of telekinesis were cancelled due to the gravity!");
		}
	}
	###
	SubsideMessage: "The gravity returned to normal."
	CanAttack: 
	if (p.getAttack().isMoveType(MoveType.AIRBORNE))
	{
		b.printAttacking(p);
		b.addMessage(this.getFailMessage(b, p, opp));
		return false;
	}
	return true;
	###
*
WaterSport:
	Int: PowerChangeEffect
	GetMultiplier: 
	return user.getAttack().getType(b, user) == Type.FIRE ? .33 : 1;
	###
	CastMessage: "Fire's power was weakened!"
*
MudSport:
	Int: PowerChangeEffect
	GetMultiplier: 
	return user.getAttack().getType(b, user) == Type.ELECTRIC ? .33 : 1;
	###
	CastMessage: "Electricity's power was weakened!"
*
WonderRoom:
	Int: StatSwitchingEffect
	SwitchStat: 
	if (s == Stat.DEFENSE) return Stat.SP_DEFENSE;
	if (s == Stat.SP_DEFENSE) return Stat.DEFENSE;
	return s;
	###
	NumTurns: 5
	SubsideMessage: "The dimensions of the wonder room returned to normal."
	CastMessage: user.getName() + " twisted the dimensions to switch defense and special defense!"
	CanHave: True
	Cast: 
	Effect wonder = Effect.getEffect(b.getEffects(), Namesies.WONDER_ROOM_EFFECT);
	if (wonder == null)
	{
		super.cast(b, caster, victim, source, printCast);
		return;
	}
	
	b.addMessage(wonder.getSubsideMessage(caster));
	Effect.removeEffect(b.getEffects(), Namesies.WONDER_ROOM_EFFECT);
	###
*
TrickRoom:
	NumTurns: 5
	SubsideMessage: "The dimensions of the trick room returned to normal."
	CastMessage: user.getName() + " twisted the dimensions to switch speeds!"
	CanHave: True
	Cast: 
	Effect tricksies = Effect.getEffect(b.getEffects(), this.namesies);
	if (tricksies == null)
	{
		super.cast(b, caster, victim, source, printCast);
		return;
	}
	
	b.addMessage(tricksies.getSubsideMessage(caster));
	Effect.removeEffect(b.getEffects(), this.namesies);
	###
*
MagicRoom:
	NumTurns: 5
	SubsideMessage: "The dimensions of the magic room returned to normal."
	CastMessage: user.getName() + " twisted the dimensions to prevent using items!"
	CanHave: True
	Cast: 
	Effect magics = Effect.getEffect(b.getEffects(), this.namesies);
	if (magics == null)
	{
		super.cast(b, caster, victim, source, printCast);
		return;
	}
	
	b.addMessage(magics.getSubsideMessage(caster));
	Effect.removeEffect(b.getEffects(), this.namesies);
	###
*