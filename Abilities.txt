# The name of each ability and its contents.
# Blocks are separated by '*'

Constructor:
	Namesies Enum Namesies Ability
	Desc String
*

***

None:
	Desc: None
*
Overgrow:
	Desc: Powers up Grass-type moves in a pinch.
	Int: PowerChangeEffect
	GetMultiplier: 
	return user.getHPRatio() < 1/3.0 && user.getAttack().getType(b, user) == Type.GRASS ? 1.5 : 1;
	###
*
Chlorophyll:
	Desc: Boosts the Pok\u00e9mon’s Speed in sunshine.
	Int: StatChangingEffect
	ModifyStat: 
	return stat*(s == Stat.SPEED && b.getWeather().namesies() == Namesies.SUNNY_EFFECT ? 2 : 1);
	###
*
Blaze:
	Desc: Powers up Fire-type moves in a pinch.
	Int: PowerChangeEffect
	GetMultiplier: 
	return user.getHPRatio() < 1/3.0 && user.getAttack().getType(b, user) == Type.FIRE ? 1.5 : 1;
	###
*
Solar Power:
	Desc: Boosts Sp. Atk, but lowers HP in sunshine.
	Int: PowerChangeEffect, EndTurnEffect
	GetMultiplier: 
	return user.getAttack().getCategory() == Category.SPECIAL && b.getWeather().namesies() == Namesies.SUNNY_EFFECT ? 1.5 : 1;
	###
	ApplyEndTurn: 
	if (b.getWeather().namesies() == Namesies.SUNNY_EFFECT)
	{
		b.addMessage(victim.getName() + " lost some of its HP due to its " + this.getName() + "!");
		victim.reduceHealthFraction(b, 1/8.0);
	}
	###
*
Torrent:
	Desc: Powers up Water-type moves in a pinch.
	GetMultiplier: 
	return user.getHPRatio() < 1/3.0 && user.getAttack().getType(b, user) == Type.WATER ? 1.5 : 1;
	###
	Int: PowerChangeEffect
*
Rain Dish:
	Desc: The Pok\u00e9mon gradually recovers HP in rain.
	Int: EndTurnEffect
	ApplyEndTurn: 
	if (b.getWeather().namesies() == Namesies.RAINING_EFFECT)
	{
		victim.healHealthFraction(1/16.0);
		b.addMessage(victim.getName() + "'s HP was restored due to its " + this.getName() + "!", victim.getHP(), victim.user());
	}
	###
*
Shield Dust:
	Desc: Blocks the added effects of attacks taken.
	ValidMove: 
	return !user.getAttack().hasSecondaryEffects();
	###
	Int: EffectBlockerEffect
*
Shed Skin:
	Desc: The Pok\u00e9mon may heal its own status problems.
	Int: EndTurnEffect
	ApplyEndTurn: 
	if (victim.hasStatus() && (int)(Math.random()*3) == 0)
	{
		b.addMessage(victim.getName() + "'s " + this.getName() + " cured it of its status condition!", StatusCondition.NONE, victim.user());
		victim.removeStatus();
	}
	###
*
Compoundeyes:
	Desc: The Pok\u00e9mon’s accuracy is boosted.
	Int: StatChangingEffect
	ModifyStat: 
	return (int)(stat*(s == Stat.ACCURACY ? 1.3 : 1));
	###
*
Tinted Lens:
	Desc: Powers up “not very effective” moves.
	Int: PowerChangeEffect
	GetMultiplier: 
	return Type.getAdvantage(user.getAttack().getType(b, user), victim, b) < 1 ? 2 : 1;
	###
*
Swarm:
	Desc: Powers up Bug-type moves in a pinch.
	Int: PowerChangeEffect
	GetMultiplier: 
	return user.getHPRatio() < 1/3.0 && user.getAttack().getType(b, user) == Type.BUG ? 1.5 : 1;
	###
*
Sniper:
	Desc: Powers up moves if they become critical hits.
*
Keen Eye:
	Desc: Prevents the Pok\u00e9mon from losing accuracy.
	Int: StatProtectingEffect
	StatProtect: 
	return stat == Stat.ACCURACY;
	###
	StatProtectMessage: p.getName() + "'s Keen Eye prevents its accuracy from being lowered!"
*
Tangled Feet:
	Desc: Raises evasion if the Pok\u00e9mon is confused.
	Int: StageChangingEffect
	StageChange: 
	return s == Stat.EVASION && p.hasEffect(Namesies.CONFUSION_EFFECT) ? stage + 1 : stage;
	###
*
Guts:
	Desc: Boosts Attack if there is a status problem.
	Int: StatChangingEffect
	ModifyStat: 
	return (int)(stat*(p.hasStatus() && s == Stat.ATTACK ? 1.5 : 1));
	###
*
Intimidate:
	Desc: Lowers the foe’s Attack stat.
	Int: EntryEffect
	Enter: 
	ActivePokemon other = b.getOtherPokemon(victim.user());
	other.getAttributes().modifyStage(victim, other, -1, Stat.ATTACK, b, CastSource.ABILITY);
	###
*
Static:
	Int: PhysicalContactEffect
	Desc: Contact with the Pok\u00e9mon may cause paralysis.
	Contact: 
	if (Math.random()*100 < 30)
	{
		Status.giveStatus(b, victim, user, StatusCondition.PARALYZED, true);
	}
	###
*
Lightningrod:
	Desc: The Pok\u00e9mon draws in all Electric-type moves.
	Int: DamageBlocker
	Block: 
	return attacking == Type.ELECTRIC;
	###
	AlternateEffect: 
	b.addMessage(victim.getName() + "'s " + this.getName() + " makes it immune to Electric type moves!");
	victim.getAttributes().modifyStage(b.getOtherPokemon(victim.user()), victim, 1, Stat.SP_ATTACK, b, CastSource.ABILITY);
	###
*
Sand Veil:
	Desc: Raises the Pok\u00e9mon’s evasion during a sandstorm by one level.
	Int: StageChangingEffect
	StageChange: 
	return s == Stat.EVASION && b.getWeather().namesies() == Namesies.SANDSTORM_EFFECT ? stage + 1 : stage;
	###
*
Sand Rush:
	Desc: Speed rises in a Sandstorm.
	Int: StatChangingEffect
	ModifyStat: 
	return stat*(s == Stat.SPEED && b.getWeather().namesies() == Namesies.SANDSTORM_EFFECT ? 2 : 1);
	###
*
Poison Point:
	Desc: Contact with the Pok\u00e9mon may poison the foe.
	Int: PhysicalContactEffect
	Contact: 
	if (Math.random()*100 < 30)
	{
		Status.giveStatus(b, victim, user, StatusCondition.POISONED, true);
	}
	###
*
Rivalry:
	Desc: Raises Attack if the foe is of the same gender.
	Int: PowerChangeEffect
	GetMultiplier: 
	if (user.getGender() == Gender.GENDERLESS) return 1;
	if (Gender.oppositeGenders(user, victim)) return .75;
	if (user.getGender() == victim.getGender()) return 1.25;
	return 1;
	###
*
Cute Charm:
	Desc: Contact with the Pok\u00e9mon may cause infatuation.
	Int: PhysicalContactEffect
	Contact: 
	if (Math.random()*100 < 30)
	{
		PokemonEffect e = PokemonEffect.getEffect(Namesies.INFATUATED_EFFECT);
		if (e.applies(b, victim, user, CastSource.ABILITY))
		{
			user.addEffect(e.newInstance());
			b.addMessage(victim.getName() + "'s " + this.getName() + " infatuated " + user.getName() + "!");
		}
	}
	###
*
Magic Guard:
	Desc: The Pok\u00e9mon only takes damage from attacks.
	Int: WeatherBlockerEffect
	WeatherBlock: 
	return true;
	###
*
Flash Fire:
	Desc: Powers up Fire-type moves if hit by a fire move.
	Field: 
	private boolean activated;
	###
	Activate: 
	x.activated = false;
	###
	Int: DamageBlocker, PowerChangeEffect
	Block: 
	return attacking == Type.FIRE;
	###
	AlternateEffect: 
	b.addMessage(victim.getName() + "'s " + this.getName() + " makes it immune to Fire type moves!");
	activated = true;
	###
	GetMultiplier: 
	return activated && user.getAttack().getType(b, user) == Type.FIRE ? 1.5 : 1;
	###
*
Drought:
	Int: EntryEffect
	Enter: 
	b.addEffect(Weather.getEffect(Namesies.SUNNY_EFFECT).newInstance());
	b.addMessage(victim.getName() + "'s " + this.getName() + " made the sunlight turn harsh!");
	###
	Desc: The Pok\u00e9mon makes it sunny if it is in battle.
*
Frisk:
	Desc: The Pok\u00e9mon can check the foe’s held item.
	Int: EntryEffect
	Enter: 
	ActivePokemon other = b.getOtherPokemon(victim.user());
	if (other.isHoldingItem(b)) b.addMessage(victim.getName() + "'s " + this.getName() + " alerted it to " + other.getName() + "'s " + other.getHeldItem(b).getName() + "!");
	###
*
Inner Focus:
	Desc: The Pok\u00e9mon is protected from flinching.
*
Infiltrator:
	Desc: You slip through the opponents walls and attack.
*
Stench:
	Desc: The stench may cause the target to flinch.
	Int: ApplyDamageEffect
	OnApplyDamage: 
	if (Math.random()*100 < 10)
	{
		PokemonEffect flinch = PokemonEffect.getEffect(Namesies.FLINCH_EFFECT);
		if (flinch.applies(b, user, victim, CastSource.ABILITY))
		{
			flinch.cast(b, user, victim, CastSource.ABILITY, false);
			b.addMessage(user.getName() + "'s " + this.getName() + " caused " + victim.getName() + " to flinch!");
		}
	}
	###
*
Effect Spore:
	Desc: Contact may paralyze, poison, or cause sleep.
	Int: PhysicalContactEffect
	Field: 
	private static StatusCondition[] statuses = new StatusCondition[] {StatusCondition.PARALYZED, StatusCondition.POISONED, StatusCondition.ASLEEP};
	###
	Contact: 
	if (Math.random()*100 < 30)
	{
		Status.giveStatus(b, victim, user, statuses[(int)(Math.random()*statuses.length)], true);
	}
	###
*
Dry Skin:
	Desc: Reduces HP if it is hot. Water restores HP.
	Int: EndTurnEffect, DamageBlocker, OpponentPowerChangeEffect
	ApplyEndTurn: 
	if (b.getWeather().namesies() == Namesies.RAINING_EFFECT)
	{
		victim.healHealthFraction(1/8.0);
		b.addMessage(victim.getName() + "'s HP was restored due to its " + this.getName() + "!", victim.getHP(), victim.user());
	}
	else if (b.getWeather().namesies() == Namesies.SUNNY_EFFECT)
	{
		b.addMessage(victim.getName() + " lost some of its HP due to its " + this.getName() + "!");
		victim.reduceHealthFraction(b, 1/8.0);
	}
	###
	Block: 
	return attacking == Type.WATER;
	###
	AlternateEffect: 
	victim.healHealthFraction(1/4.0);
	b.addMessage(victim.getName() + "'s HP was restored due to its " + this.getName() + "!", victim.getHP(), victim.user());
	###
	GetOppMultiplier: 
	return user.getAttack().getType(b, user) == Type.FIRE ? 1.25 : 1;
	###
*
Arena Trap:
	Desc: Prevents the foe from fleeing.
	Int: OpponentTrappingEffect
	Trapped: 
	return !p.isLevitating(b);	
	###
*
Technician:
	Desc: Powers up the Pok\u00e9mon’s weaker moves.
	GetMultiplier: 
	return user.getAttack().getPower(b, user, victim) <= 60 ? 1.5 : 1;
	###
	Int: PowerChangeEffect
*
Limber:
	Desc: The Pok\u00e9mon is protected from paralysis.
	Int: StatusPreventionEffect
	StatusPrevent: 
	return status == StatusCondition.PARALYZED;
	###
	StatusPreventMessage: victim.getName() + "'s Limber prevents paralysis!"
*
Damp:
	Desc: Prevents combatants from self destructing.
	Int: BeforeTurnEffect, OpposingBeforeTurnEffect
	CanAttack:
	if (p.getAttack().namesies() == Namesies.SELF_DESTRUCT_ATTACK || p.getAttack().namesies() == Namesies.EXPLOSION_ATTACK)
	{
		b.printAttacking(p);
		b.addMessage(p.getName() + "'s " + this.getName() + " prevents " + p.getAttack().getName() + " from being used!");
		return false;
	}
	return true;
	###
	OpposingCanAttack: 
	if (p.getAttack().namesies() == Namesies.SELF_DESTRUCT_ATTACK || p.getAttack().namesies() == Namesies.EXPLOSION_ATTACK)
	{
		b.printAttacking(p);
		b.addMessage(opp.getName() + "'s " + this.getName() + " prevents " + p.getAttack().getName() + " from being used!");
		return false;
	}
	return true;
	###
*
Cloud Nine:
	Desc: Eliminates the effects of weather.
	Int: EntryEffect
	Enter: 
	b.addEffect(Weather.getEffect(Namesies.CLEAR_SKIES_EFFECT));
	b.addMessage(victim.getName() + "'s " + this.getName() + " eliminated the weather!");
	###
*
Vital Spirit:
	Desc: Prevents the Pok\u00e9mon from falling asleep.
	Int: StatusPreventionEffect
	StatusPrevent: 
	return status == StatusCondition.ASLEEP;
	###
	StatusPreventMessage: victim.getName() + "'s Vital Spirit prevents sleep!"
*
Insomnia:
	Desc: Prevents the Pok\u00e9mon from falling asleep.
	Int: StatusPreventionEffect
	StatusPrevent: 
	return status == StatusCondition.ASLEEP;
	###
	StatusPreventMessage: victim.getName() + "'s Insomnia prevents sleep!"
*
Anger Point:
	Desc: Raises Attack upon taking a critical hit.
*
Water Absorb:
	Desc: Restores HP if hit by a Water-type move.
	Int: DamageBlocker
	Block: 
	return attacking == Type.WATER && !victim.hasEffect(Namesies.HEAL_BLOCK_EFFECT);
	###
	AlternateEffect: 
	victim.healHealthFraction(1/4.0);
	b.addMessage(victim.getName() + "'s HP was restored due to its " + this.getName() + "!", victim.getHP(), victim.user());
	###
*
Synchronize:
	Desc: Passes on a burn, poison, or paralysis to the foe.
*
No Guard:
	Desc: Ensures the Pok\u00e9mon and its foe’s attacks land.
*
Own Tempo:
	Desc: Prevents the Pok\u00e9mon from becoming confused.
*
Clear Body:
	Desc: Prevents the Pok\u00e9mon’s stats from being lowered.
	Int: StatProtectingEffect
	StatProtect: 
	return true;
	###
	StatProtectMessage: p.getName() + "'s Clear Body prevents its stats from being lowered!"
*
Liquid Ooze:
	Desc: Inflicts damage on foes using any draining move.
*
Rock Head:
	Desc: Protects the Pok\u00e9mon from recoil damage.
*
Sturdy:
	Desc: The Pok\u00e9mon is protected against 1-hit KO attacks.
	Int: BracingEffect
	Bracing: 
	return fullHealth;
	###
	BraceMessage: bracer.getName() + "'s Sturdy endured the hit!"
*
Oblivious:
	Desc: Prevents the Pok\u00e9mon from becoming infatuated.
*
Magnet Pull:
	Int: OpponentTrappingEffect
	Trapped: 
	return p.isType(b, Type.STEEL);
	###
	Desc: Prevents Steel-type Pok\u00e9mon from escaping.
*
Unaware:
	Desc: Ignores any change in ability by the foe.
	Int: IgnoreStageEffect
	IgnoreStage:
	return s == Stat.ATTACK || s == Stat.SP_ATTACK || s == Stat.DEFENSE || s == Stat.SP_DEFENSE;
	###
*
Simple:
	Desc: The Pok\u00e9mon is prone to wild stat changes.
	Int: ModifyStageValueEffect
	ModifyStageValue: 
	return modVal*2;
	###
*
Early Bird:
	Desc: The Pok\u00e9mon awakens quickly from sleep.
*
Thick Fat:
	Desc: Raises resistance to Fire-and Ice-type moves.
	Int: OpponentPowerChangeEffect
	GetOppMultiplier: 
	return user.getAttack().getType(b, user) == Type.FIRE || user.getAttack().getType(b, user) == Type.ICE ? .5 : 1;
	###
*
Hydration:
	Desc: Heals status problems if it is raining.
	Int: EndTurnEffect
	ApplyEndTurn: 
	if (b.getWeather().namesies() == Namesies.RAINING_EFFECT && victim.hasStatus())
	{
		victim.removeStatus();
		b.addMessage(victim.getName() + "'s " + this.getName() + " cured it of its status condition!", StatusCondition.NONE, victim.user());
	}
	###
*
Shell Armor:
	Desc: The Pok\u00e9mon is protected against critical hits.
	Int: CritBlockerEffect
*
Battle Armor:
	Desc: The Pok\u00e9mon is protected against critical hits.
	Int: CritBlockerEffect
*
Skill Link:
	Desc: Increases the frequency of multi-strike moves.
*
Levitate:
	Desc: Gives full immunity to all Ground-type moves.
*
Forewarn:
	Desc: Determines what moves the foe has.
	Int: EntryEffect
	Enter: 
	ActivePokemon other = b.getOtherPokemon(victim.user());
	List<Namesies> besties = new ArrayList<>();

	int highestPower = -1;
	
	for (Move m : other.getMoves())
	{
		if (m.getAttack().getCategory() == Category.STATUS) 
		{
			continue;
		}
		
		int power = m.getAttack().getPower(b, other, victim);
		if (power > highestPower)
		{
			highestPower = power;
			besties = new ArrayList<>();
			besties.add(m.getAttack().namesies());
		}
		else if (power == highestPower) 
		{
			besties.add(m.getAttack().namesies());
		}
	}
	
	Namesies warn;
	if (highestPower == -1)
	{
		warn = other.getMoves().get((int)(Math.random()*other.getMoves().size())).getAttack().namesies();
	}
	else
	{
		warn = besties.get((int)(Math.random()*besties.size()));
	}
	
	b.addMessage(victim.getName() + "'s " + this.getName() + " alerted it to " + other.getName() + "'s " + warn.getName() + "!");
	###
*
Hyper Cutter:
	Desc: Prevents the Attack stat from being lowered.
	Int: StatProtectingEffect
	StatProtect: 
	return stat == Stat.ATTACK;
	###
	StatProtectMessage: p.getName() + "'s Hyper Cutter prevents its attack from being lowered!"
*
Soundproof:
	Desc: Gives full immunity to all sound-based moves.
	Int: OpposingBeforeTurnEffect
	OpposingCanAttack: 
	if (p.getAttack().isMoveType(MoveType.SOUND_BASED))
	{
		b.printAttacking(p);
		b.addMessage(opp.getName() + "'s " + this.getName() + " makes it immune to sound based moves!");
		return false;
	}
	return true;
	###
*
Reckless:
	Desc: Powers up moves that have recoil damage.
	Int: PowerChangeEffect
	GetMultiplier: 
	return user.getAttack() instanceof RecoilMove || user.getAttack() instanceof CrashDamageMove ? 1.2 : 1;
	###
*
Iron Fist:
	Desc: Boosts the power of punching moves.
	GetMultiplier: 
	return user.getAttack().isMoveType(MoveType.PUNCHING) ? 1.2 : 1;
	###
	Int: PowerChangeEffect
*
Natural Cure:
	Desc: All status problems are healed upon switching out.
	Int: SwitchOutEffect
	SwitchOut: 
	if (!switchee.hasStatus(StatusCondition.FAINTED)) switchee.removeStatus();
	###
*
Serene Grace:
	Desc: Boosts the likelihood of added effects appearing.
*
Leaf Guard:
	Desc: Prevents status problems in sunny weather.
	Int: StatusPreventionEffect
	StatusPrevent: 
	return b.getWeather().namesies() == Namesies.SUNNY_EFFECT;
	###
	StatusPreventMessage: victim.getName() + "'s Leaf Guard prevents status conditions!"
*
Scrappy:
	Desc: Enables moves to hit Ghost-type foes.
*
Swift Swim:
	Desc: Boosts the Pok\u00e9mon’s Speed in rain.
	Int: StatChangingEffect
	ModifyStat: 
	return stat*(s == Stat.SPEED && b.getWeather().namesies() == Namesies.RAINING_EFFECT ? 2 : 1);
	###
*
Water Veil:
	Desc: Prevents the Pok\u00e9mon from getting a burn.
	Int: StatusPreventionEffect
	StatusPrevent: 
	return status == StatusCondition.BURNED;
	###
	StatusPreventMessage: victim.getName() + "'s Water Veil prevents burns!"
*
Filter:
	Desc: Powers down super-effective moves.
	Int: OpponentPowerChangeEffect
	GetOppMultiplier: 
	return Type.getAdvantage(user.getAttack().getType(b, user), victim, b) > 1 ? .75 : 1;
	###
*
Flame Body:
	Desc: Contact with the Pok\u00e9mon may burn the foe.
	Int: PhysicalContactEffect
	Contact: 
	if (Math.random()*100 < 30)
	{
		Status.giveStatus(b, victim, user, StatusCondition.BURNED, true);
	}
	###
*
Rattled:
	Desc: Some move types scare it and boost its Speed.
	Int: TakeDamageEffect
	OnTakeDamage:
	Type type = user.getAttack().getType(b, user);
	if (type == Type.BUG || type == Type.DARK || type == Type.GHOST)
	{
		victim.getAttributes().modifyStage(victim, victim, 1, Stat.SPEED, b, CastSource.ABILITY);
	}
	###
*
Moxie:
	Desc: Attack rises when you knock out an opponent.
	Int: FaintEffect
	Deathwish: 
	murderer.getAttributes().modifyStage(murderer, murderer, 1, Stat.ATTACK, b, CastSource.ABILITY);
	###
*
Imposter:
	Desc: It transforms itself into the Pok\u00e9mon it is facing.
	Int: EntryEffect
	Enter: 
	PokemonEffect.getEffect(Namesies.TRANSFORMED_EFFECT).cast(b, victim, victim, CastSource.ABILITY, false);
	###
*
Adaptability:
	Desc: Powers up moves of the same type.
*
Volt Absorb:
	Desc: Restores HP if hit by an Electric-type move.
	Int: DamageBlocker
	Block: 
	return attacking == Type.ELECTRIC && !victim.hasEffect(Namesies.HEAL_BLOCK_EFFECT);
	###
	AlternateEffect: 
	victim.healHealthFraction(1/4.0);
	b.addMessage(victim.getName() + "'s HP was restored due to its " + this.getName() + "!", victim.getHP(), victim.user());
	###
*
Quick Feet:
	Desc: Boosts Speed if there is a status problem.
	Int: StatChangingEffect
	ModifyStat: 
	return (int)(stat*(p.hasStatus() && s == Stat.SPEED ? 1.5 : 1));
	###
*
Trace:
	Desc: The Pok\u00e9mon copies the foe’s ability.
	Int: EntryEffect, ChangeAbilityMove
	Enter: 
	ActivePokemon other = b.getOtherPokemon(victim.user());
	if (other.hasAbility(Namesies.MULTITYPE_ABILITY) || other.hasAbility(Namesies.ILLUSION_ABILITY) || other.hasAbility(this.namesies))
	{
		return;
	}
	
	PokemonEffect.getEffect(Namesies.CHANGE_ABILITY_EFFECT).cast(b, victim, victim, CastSource.ABILITY, true);
	###
	AbilityChange: 
	return b.getOtherPokemon(victim.user()).getAbility().newInstance();
	###
	AbilityMessage: 
	ActivePokemon other = b.getOtherPokemon(victim.user());
	return victim.getName() + " traced " + other.getName() + "'s " + other.getAbility().getName() + "!";
	###
*
Download:
	Desc: Adjusts power according to a foe's defenses.
	Int: EntryEffect
	Enter: 
	ActivePokemon other = b.getOtherPokemon(victim.user());
	if (Stat.getStat(Stat.DEFENSE, other, victim, b) < Stat.getStat(Stat.SP_DEFENSE, other, victim, b))
	{
		victim.getAttributes().modifyStage(victim, victim, 1, Stat.ATTACK, b, CastSource.ABILITY);
	}
	else
	{
		victim.getAttributes().modifyStage(victim, victim, 1, Stat.SP_ATTACK, b, CastSource.ABILITY);
	}
	###
*
Pressure:
	Desc: The Pok\u00e9mon raises the foe’s PP usage.
	Int: EntryEffect
	Enter: 
	b.addMessage(victim.getName() + " is exerting pressure!");
	###
*
Immunity:
	Desc: Prevents the Pok\u00e9mon from getting poisoned.
	Int: StatusPreventionEffect
	StatusPrevent: 
	return status == StatusCondition.POISONED;
	###
	StatusPreventMessage: victim.getName() + "'s Immunity prevents it from being poisoned!"
*
Snow Cloak:
	Desc: Raises the Pok\u00e9mon’s evasion during a hailstorm by one level.
	Int: StageChangingEffect
	StageChange: 
	return s == Stat.EVASION && b.getWeather().namesies() == Namesies.HAILING_EFFECT ? stage + 1 : stage;
	###
*
Marvel Scale:
	Desc: Boosts Defense if there is a status problem.
	Int: StatChangingEffect
	ModifyStat: 
	return (int)(stat*(p.hasStatus() && s == Stat.DEFENSE ? 1.5 : 1));
	###
*
Multiscale:
	Desc: When this Pok\u00e9mon is at full HP, damage is lessened.
	Int: OpponentPowerChangeEffect
	GetOppMultiplier: 
	return victim.fullHealth() ? .5 : 1;
	###
*
Sheer Force:
	Desc: Attacks gain power, but lose their secondary effect.
	Int: PowerChangeEffect
	GetMultiplier: 
	return user.getAttack().hasSecondaryEffects() ? 1.3 : 1;
	###
*
Hustle:
	Desc: Boosts the Attack stat, but lowers accuracy.
	Int: StatChangingEffect
	ModifyStat: 
	if (s == Stat.ATTACK) return (int)(stat*1.5);
	if (s == Stat.ACCURACY) return (int)(stat*.8);
	return stat;
	###
*
Huge Power:
	Desc: Raises the Pok\u00e9mon’s Attack stat.
	Int: StatChangingEffect
	ModifyStat: 
	return stat*(s == Stat.ATTACK ? 2 : 1);
	###
*
Speed Boost:
	Desc: The Pok\u00e9mon’s Speed stat is gradually boosted.
	Int: EndTurnEffect
	ApplyEndTurn: 
	victim.getAttributes().modifyStage(victim, victim, 1, Stat.SPEED, b, CastSource.ABILITY);
	###
*
Magic Bounce:
	Desc: Reflects status-changing moves.
*
Super Luck:
	Desc: Heightens the critical-hit ratios of moves.
	Int: CritStageEffect
*
Shadow Tag:
	Desc: Prevents the foe from escaping.
	Int: OpponentTrappingEffect
	Trapped: 
	return !p.hasAbility(this.namesies);
	###
*
Overcoat:
	Desc: Protects the Pok\u00e9mon from damage from weather.
	Int: WeatherBlockerEffect
	WeatherBlock: 
	return true;
	###
*
Magma Armor:
	Desc: Prevents the Pok\u00e9mon from becoming frozen.
	Int: StatusPreventionEffect
	StatusPrevent: 
	return status == StatusCondition.FROZEN;
	###
	StatusPreventMessage: victim.getName() + "'s Magma Armor prevents freezing!"
*
Suction Cups:
	Desc: Negates all moves that force switching out.
*
Steadfast:
	Desc: Raises Speed each time the Pok\u00e9mon flinches.
*
Sand Stream:
	Desc: The Pok\u00e9mon summons a sandstorm in battle.
	Int: EntryEffect
	Enter: 
	b.addEffect(Weather.getEffect(Namesies.SANDSTORM_EFFECT).newInstance());
	b.addMessage(victim.getName() + "'s " + this.getName() + " whipped up a sand storm!");
	###
*
Regenerator:
	Desc: Restores a little HP when withdrawn from battle.
	Int: SwitchOutEffect
	SwitchOut: 
	if (!switchee.hasStatus(StatusCondition.FAINTED)) switchee.healHealthFraction(1/3.0);
	###
*
Poison Heal:
	Desc: Restores HP if the Pok\u00e9mon is poisoned.
*
Truant:
	Desc: Pok\u00e9mon can't attack on consecutive turns.
	Field: 
	private boolean lazyface;
	###
	Activate: 
	x.lazyface = false;
	###
	Int: EndTurnEffect, BeforeTurnEffect
	ApplyEndTurn: 
	if (victim.hasStatus(StatusCondition.ASLEEP)) lazyface = false;
	else lazyface = !lazyface;
	###
	CanAttack: 
	if (lazyface)
	{
		b.addMessage(p.getName() + " is loafing around!");
		return false;
	}
	
	return true;
	###
*
Wonder Guard:
	Desc: Only supereffective moves will hit.
	Int: OpposingBeforeTurnEffect
	OpposingCanAttack: 
	if (p.getAttack().getCategory() == Category.STATUS) return true;
	if (Type.getAdvantage(p.getAttack().getType(b, p), opp, b) > 1) return true;
	if (p.getAttack().getType(b, p) == Type.NONE) return true;
	b.printAttacking(p);
	b.addMessage(opp.getName() + "'s " + this.getName() + " makes it immune to " + p.getAttack().getName() + "!");
	return false;
	###
*
Normalize:
	Desc: All the Pok\u00e9mon's moves become the Normal type.
*
Stall:
	Desc: The Pok\u00e9mon moves after even slower foes.
	Int: StallingEffect
*
Pure Power:
	Desc: Raises the Pok\u00e9mon's Attack stat.
	Int: StatChangingEffect
	ModifyStat: 
	return stat*(s == Stat.ATTACK ? 2 : 1);
	###
*
Rough Skin:
	Desc: Inflicts damage to the foe on contact.
	Int: PhysicalContactEffect
	Contact: 
	b.addMessage(user.getName() + " was hurt by " + victim.getName() + "'s " + this.getName() + "!");
	user.reduceHealthFraction(b, 1/8.0);
	###
*
Solid Rock:
	Desc: Reduces damage from supereffective attacks.
	Int: OpponentPowerChangeEffect
	GetOppMultiplier: 
	return Type.getAdvantage(user.getAttack().getType(b, user), victim, b) < 1 ? .75 : 1;
	###
*
White Smoke:
	Desc: Prevents other Pok\u00e9mon from lowering its stats.
	Int: StatProtectingEffect
	StatProtect: 
	return true;
	###
	StatProtectMessage: p.getName() + "'s White Smoke prevents its stats from being lowered!"
*
Toxic Boost:
	Desc: Powers up physical attacks when poisoned.
	Int: StatChangingEffect
	ModifyStat: 
	return (int)(stat*(s == Stat.ATTACK && p.hasStatus(StatusCondition.POISONED) ? 1.5 : 1));
	###
*
Anticipation:
	Desc: Senses a foe's dangerous moves.
	Int: EntryEffect
	Enter: 
	ActivePokemon other = b.getOtherPokemon(victim.user());
	for (Move m : other.getMoves())
	{
		if (Type.getAdvantage(m.getAttack().getType(b, other), victim, b) > 1 || m.getAttack().isMoveType(MoveType.ONE_HIT_KO))
		{
			b.addMessage(victim.getName() + "'s " + this.getName() + " made it shudder!");
			break;
		}
	}
	###
*
Storm Drain:
	Desc: Draws in all Water-type moves to up Sp. Attack.
	Int: DamageBlocker
	Block: 
	return attacking == Type.WATER;
	###
	AlternateEffect: 
	b.addMessage(victim.getName() + "'s " + this.getName() + " makes it immune to Water type moves!");
	victim.getAttributes().modifyStage(b.getOtherPokemon(victim.user()), victim, 1, Stat.SP_ATTACK, b, CastSource.ABILITY);
	###
*
Color Change:
	Int: TakeDamageEffect, ChangeTypeMove
	OnTakeDamage: 
	Type t = user.getAttack().getType(b, user);
	if (!victim.isType(b, t))
	{
		type = t;
		PokemonEffect.getEffect(Namesies.CHANGE_TYPE_EFFECT).cast(b, victim, victim, CastSource.ABILITY, true);
	}
	###
	Activate: 
	x.type = type;
	###
	Field: 
	private Type type;
	###
	ChangeType: 
	return new Type[] {type, Type.NONE};
	###
	Desc: Changes the Pok\u00e9mon's type to the foe's move.
*
Ice Body:
	Desc: The Pok\u00e9mon gradually regains HP in a hailstorm.
	Int: EndTurnEffect, WeatherBlockerEffect
	ApplyEndTurn: 
	if (b.getWeather().namesies() == Namesies.HAILING_EFFECT)
	{
		victim.healHealthFraction(1/16.0);
		b.addMessage(victim.getName() + "'s HP was restored due to its " + this.getName() + "!", victim.getHP(), victim.user());
	}
	###
	WeatherBlock: 
	return weather == Namesies.HAILING_EFFECT;
	###
*
Light Metal:
	Desc: Halves the Pok\u00e9mon's weight.
*
Drizzle:
	Desc: The Pok\u00e9mon makes it rain if it appears in battle.
	Int: EntryEffect
	Enter: 
	b.addEffect(Weather.getEffect(Namesies.RAINING_EFFECT).newInstance());
	b.addMessage(victim.getName() + "'s " + this.getName() + " started a downpour!");
	###
*
Air Lock:
	Desc: Eliminates the effects of weather.
	Int: EntryEffect
	Enter: 
	b.addEffect(Weather.getEffect(Namesies.CLEAR_SKIES_EFFECT));
	b.addMessage(victim.getName() + "'s " + this.getName() + " eliminated the weather!");
	###
*
Defiant:
	Desc: When its stats are lowered its Attack increases.
*
Flower Gift:
	Desc: Powers up party Pok\u00e9mon when it is sunny.
	Int: StatChangingEffect
	ModifyStat: 
	return (int)(stat*((s == Stat.ATTACK || s == Stat.SP_DEFENSE) && b.getWeather().namesies() == Namesies.SUNNY_EFFECT ? 1.5 : 1));
	###
*
Aftermath:
	Desc: Damages the attacker landing the finishing hit.
	Int: PhysicalContactEffect
	Contact: 
	if (victim.isFainted(b))
	{
		b.addMessage(user.getName() + " was hurt by " + victim.getName() + "'s " + this.getName() + "!");
		user.reduceHealthFraction(b, 1/4.0);
	}
	###
*
Heatproof:
	Desc: Weakens the power of Fire-type moves.
	Int: OpponentPowerChangeEffect
	GetOppMultiplier: 
	return user.getAttack().getType(b, user) == Type.FIRE ? .5 : 1;
	###
*
Sand Force:
	Desc: Boosts certain moves' power in a sandstorm.
	Int: PowerChangeEffect, WeatherBlockerEffect
	GetMultiplier: 
	Type type = user.getAttack().getType(b, user);
	return (type == Type.ROCK || type == Type.STEEL || type == Type.GROUND) && b.getWeather().namesies() == Namesies.SANDSTORM_EFFECT ? 1.3 : 1;
	###
	WeatherBlock: 
	return weather == Namesies.SANDSTORM_EFFECT;
	###
*
Snow Warning:
	Desc: The Pok\u00e9mon summons a hailstorm in battle.
	Int: EntryEffect
	Enter: 
	b.addEffect(Weather.getEffect(Namesies.HAILING_EFFECT).newInstance());
	b.addMessage(victim.getName() + "'s " + this.getName() + " caused it to hail!");
	###
*
Motor Drive:
	Int: DamageBlocker
	Block: 
	return attacking == Type.ELECTRIC;
	###
	AlternateEffect: 
	b.addMessage(victim.getName() + "'s " + this.getName() + " makes it immune to Electric type moves!");
	victim.getAttributes().modifyStage(b.getOtherPokemon(victim.user()), victim, 1, Stat.SPEED, b, CastSource.ABILITY);
	###
	Desc: Raises Speed if hit by an Electric-type move.
*
Justified:
	Int: TakeDamageEffect
	OnTakeDamage: 
	if (user.getAttack().getType(b, user) == Type.DARK)
	{
		victim.getAttributes().modifyStage(victim, victim, 1, Stat.ATTACK, b, CastSource.ABILITY);
	}
	###
	Desc: Raises Attack when hit by a Dark-type move.
*
Cursed Body:
	Desc: May disable a move used on the Pok\u00e9mon.
	Int: PhysicalContactEffect
	Contact: 
	if (Math.random()*100 < 30)
	{
		user.getAttributes().setLastMoveUsed();
		PokemonEffect disable = PokemonEffect.getEffect(Namesies.DISABLE_EFFECT);
		if (disable.applies(b, victim, user, CastSource.ABILITY))
		{
			disable.cast(b, victim, user, CastSource.ABILITY, false);
			b.addMessage(victim.getName() + "'s " + this.getName() + " disabled " + user.getName() + "'s " + user.getAttack().getName());
		}
	}
	###
*
Slow Start:
	Desc: Temporarily halves Attack and Speed.
	Field: 
	int count;
	###
	Activate: 
	x.count = 0;
	###
	Int: EndTurnEffect, EntryEffect, StatChangingEffect
	ApplyEndTurn: 
	count++;
	###
	Enter: 
	count = 0;
	###
	ModifyStat: 
	return (int)(stat*(count < 5 && (s == Stat.ATTACK || s == Stat.SPEED)? .5 : 1));
	###
*
Bad Dreams:
	Desc: Reduces a sleeping foe's HP.
	Int: EndTurnEffect
	ApplyEndTurn: 
	ActivePokemon other = b.getOtherPokemon(victim.user());
	if (other.hasStatus(StatusCondition.ASLEEP))
	{
		b.addMessage(other.getName() + " was hurt by " + victim.getName() + "'s " + this.getName() + "!");
		other.reduceHealthFraction(b, 1/8.0);
	}
	###
*
Victory Star:
	Desc: Boosts the accuracy of its allies and itself.
	Int: StatChangingEffect
	ModifyStat: 
	return (int)(stat*(s == Stat.ACCURACY ? 1.1 : 1));
	###
*
Contrary:
	Desc: Makes stat changes have an opposite effect.
	Int: ModifyStageValueEffect
	ModifyStageValue: 
	return modVal*(modVal < 0 ? -1 : 1);
	###
*
Big Pecks:
	Desc: Protects the Pok\u00e9mon from Defense-lowering attacks.
	Int: StatProtectingEffect
	StatProtect: 
	return stat == Stat.DEFENSE;
	###
	StatProtectMessage: p.getName() + "'s Big Pecks prevents its defense from being lowered!"
*
Poison Touch:
	Desc: May poison targets when a Pok\u00e9mon makes contact.
	Int: ApplyDamageEffect
	OnApplyDamage: 
	if (Math.random()*100 < 30)
	{
		Status.giveStatus(b, user, victim, StatusCondition.POISONED, true);
	}
	###
*
Prankster:
	Desc: Gives priority to a status move.
*
Wonder Skin:
	Desc: Makes status-changing moves more likely to miss.
	Int: StatChangingEffect
	ModifyStat: 
	return (int)(stat*(s == Stat.EVASION && opp.getAttack().getCategory() == Category.STATUS ? 1.5 : 1));
	###
*
Mummy:
	Desc: Contact with this Pok\u00e9mon spreads this Ability.
	Int: PhysicalContactEffect, ChangeAbilityMove
	Contact: 
	if (user.hasAbility(Namesies.MULTITYPE_ABILITY) || user.hasAbility(this.namesies))
	{
		return;
	}
	
	// Cast the change ability effect onto the user
	PokemonEffect.getEffect(Namesies.CHANGE_ABILITY_EFFECT).cast(b, victim, user, CastSource.ABILITY, true);
	###
	AbilityChange: 
	return (new Mummy()).newInstance();
	###
	AbilityMessage: 
	return victim.getName() + "'s ability was changed to Mummy!";
	###
*
Defeatist:
	Desc: Lowers stats when HP becomes half or less.
	Int: PowerChangeEffect
	GetMultiplier: 
	return user.getHPRatio() < 1/2.0 ? .5 : 1;
	###
*
Weak Armor:
	Desc: Physical attacks lower Defense and raise Speed.
	Int: TakeDamageEffect
	OnTakeDamage: 
	if (user.getAttack().getCategory() == Category.PHYSICAL)
	{
		victim.getAttributes().modifyStage(victim, victim, -1, Stat.DEFENSE, b, CastSource.ABILITY);
		victim.getAttributes().modifyStage(victim, victim, 1, Stat.SPEED, b, CastSource.ABILITY);
	}
	###
*
Illusion:
	Field: 
	private boolean activated;
	private String actualName;
	###
	Activate: 
	x.activated = false;
	x.actualName = actualName;
	###
	Int: EntryEffect, SwitchOutEffect, TakeDamageEffect
	Enter: 
	List<ActivePokemon> team = b.getTrainer(victim.user()).getTeam();
	ActivePokemon illusion = team.get(team.size()-1);
	
	if (!illusion.canFight()) return;
	if (illusion.getPokemonInfo().getNumber() == victim.getPokemonInfo().getNumber()) return;

	activated = true;
	actualName = victim.getName(); // TODO: When the Pokemon is sent out, it displays the actual name, instead of the illusion name
	
	victim.setNickname(illusion.getName()); // TODO: Find a better workaround for this, the Illusion name is appearing in the Switch Pokemon menu
	b.addMessage("", illusion.getPokemonInfo(), illusion.isShiny(), false, victim.user());
	b.addMessage("", illusion.getName(), victim.user());
	b.addMessage("", illusion.getType(b), victim.user());
	b.addMessage("", illusion.getGender(), victim.user());
	###
	SwitchOut: 
	activated = false;
	switchee.setNickname(actualName);
	###
	OnTakeDamage: 
	if (!activated) return;
	activated = false;
	victim.setNickname(actualName);
	b.addMessage(actualName + "'s Illusion was broken!");
	b.addMessage("", victim.getPokemonInfo(), victim.isShiny(), true, victim.user());
	b.addMessage("", actualName, victim.user());
	b.addMessage("", victim.getType(b), victim.user());
	b.addMessage("", victim.getGender(), victim.user());
	###
	Desc: Comes out disguised as the Pok\u00e9mon in back.
*
Analytic:
	Desc: Boosts move power when the Pok\u00e9mon moves last.
	Int: PowerChangeEffect
	GetMultiplier: 
	return !b.isFirstAttack() ? 1.3 : 1;
	###
*
Sap Sipper:
	Desc: Boosts Attack when hit by a Grass-type move.
	Int: DamageBlocker
	Block: 
	return attacking == Type.GRASS;
	###
	AlternateEffect: 
	b.addMessage(victim.getName() + "'s " + this.getName() + " makes it immune to Grass type moves!");
	victim.getAttributes().modifyStage(b.getOtherPokemon(victim.user()), victim, 1, Stat.ATTACK, b, CastSource.ABILITY);
	###
*
Iron Barbs:
	Desc: Inflicts damage to the Pok\u00e9mon on contact.
	Int: PhysicalContactEffect
	Contact: 
	b.addMessage(user.getName() + " was hurt by " + victim.getName() + "'s " + this.getName() + "!");
	user.reduceHealthFraction(b, 1/8.0);
	###
*
Mold Breaker:
	Desc: Moves can be used regardless of Abilities.
	Int: EntryEffect
	Enter: 
	b.addMessage(victim.getName() + " breaks the mold!");
	###
*
Teravolt:
	Desc: Moves can be used regardless of Abilities.
	Int: EntryEffect
	Enter: 
	b.addMessage(victim.getName() + " is radiating a bursting aura!");
	###
*
Turboblaze:
	Desc: Moves can be used regardless of Abilities.
	Int: EntryEffect
	Enter: 
	b.addMessage(victim.getName() + " is radiating a blazing aura!");
	###
*
Run Away:
	Int: DefiniteEscape
	Desc: Enables a sure getaway from wild Pok\u00e9mon.
*
Sticky Hold:
	Desc: Protects the Pok\u00e9mon from item theft.
*
Klutz:
	Desc: The Pok\u00e9mon can't use any held items.
*
Unburden:
	Desc: Raises Speed if a held item is used.
	Int: StatChangingEffect
	ModifyStat: 
	return stat*(s == Stat.SPEED && p.hasEffect(Namesies.CHANGE_ITEM_EFFECT) && !p.isHoldingItem(b) ? 2 : 1);
	###
*
Pickpocket:
	Int: PhysicalContactEffect, ItemCondition
	Field:
	private Item item;
	###
	GetItem:
	return item;
	###
	Contact: 
	if (victim.isFainted(b) || !user.isHoldingItem(b) || victim.isHoldingItem(b) || b.getTrainer(victim.user()) instanceof WildPokemon || user.hasAbility(Namesies.STICKY_HOLD_ABILITY))
	{
		return;
	}

	Item stolen = user.getHeldItem(b);
	b.addMessage(victim.getName() + " stole " + user.getName() + "'s " + stolen.getName() + "!");

	if (b.isWildBattle())
	{
		user.removeItem();
		victim.giveItem((HoldItem)stolen);
		return;
	}

	item = stolen;
	PokemonEffect.getEffect(Namesies.CHANGE_ITEM_EFFECT).cast(b, victim, victim, CastSource.ABILITY, false);
	item = Item.noneItem();
	PokemonEffect.getEffect(Namesies.CHANGE_ITEM_EFFECT).cast(b, victim, user, CastSource.ABILITY, false);
	###
	Desc: Steals an item when hit by another Pok\u00e9mon.
*
Harvest:
	Desc: May create another Berry after one is used.
	Int: EndTurnEffect
	ApplyEndTurn: 
	PokemonEffect consumed = victim.getEffect(Namesies.CONSUMED_ITEM_EFFECT);
	if (consumed == null || victim.isHoldingItem(b)) return;
	Item restored = ((ItemCondition)consumed).getItem();
	if (restored instanceof Berry && (b.getWeather().namesies() == Namesies.SUNNY_EFFECT || Math.random() < .5))
	{
		victim.giveItem((HoldItem)restored);
		b.addMessage(victim.getName() + "'s " + this.getName() + " restored its " + restored.getName() + "!");
	}
	###
*
Pickup:
	Desc: The Pok\u00e9mon may pick up items.
	Int: EndBattleEffect
	EndBattle: 
	if (!p.isHoldingItem(b) && Math.random() < .1)
	{
		// TODO: THIS SHOULDN'T JUST BE LEFTOVERS IT SHOULD BE MORE FUN STUFF
		p.giveItem((HoldItem)Item.getItem(Namesies.LEFTOVERS_ITEM));
	}
	###
*
Unnerve:
	Desc: Makes the foe nervous and unable to eat Berries.
	Int: EntryEffect
	Enter: 
	b.addMessage(victim.getName() + "'s " + this.getName() + " made " + b.getOtherPokemon(victim.user()).getName() + " too nervous to eat berries!");
	###
*
Honey Gather:
	Int: EndBattleEffect
	EndBattle: 
	if (!p.isHoldingItem(b) && Math.random()*100 < 5*Math.ceil(p.getLevel()/10.0))
	{
		// TODO: Should give the item Honey, but this item has no purpose in our game so we'll see what this ability should actually do also something about Syrup Gather
		p.giveItem((HoldItem)Item.getItem(Namesies.LEFTOVERS_ITEM));
	}
	###
	Desc: The Pok\u00e9mon may gather Honey from somewhere.
*
Gluttony:
	Desc: Makes the Pok\u00e9mon use a held Berry earlier than usual.
*
Multitype:
	Desc: Changes type to match the held Plate.
*
Forecast:
	Desc: Changes with the weather.
*