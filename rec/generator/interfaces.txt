# The EffectList parameter should contain the ActivePokemon parameter that represents the entire invokee list
# If this is unspecified, then the invokee list will default to being passed in as a new parameter in the invoke method

ApplyDamageEffect:
	Comments: // This is used when the user applies direct damage to an opponent, and has special effects associated
	Method:
		Header: void applyDamageEffect(Battle b, ActivePokemon user, ActivePokemon victim, int damage)
		Comments:
		// b: The current battle
		// user: The user of that attack, the one who is probably implementing this effect
		// victim: The Pokemon that received the attack
		// damage: The amount of damage that was dealt to victim by the user 
		###
		Invoke: Void
		EffectList: user
	*
***
EndTurnEffect:
	Method:
		Header: void applyEndTurn(ActivePokemon victim, Battle b)
		Invoke: Void
		Deadsies: victim
		SetInvokees:
		// Weather is handled separately
		List<Object> invokees = b.getEffectsList(victim);
		invokees.remove(b.getWeather());
		###
	*
***
SuperDuperEndTurnEffect:
	Method:
		Header: boolean theVeryVeryEnd(Battle b, ActivePokemon p)
		Invoke: Check true
		EffectList: p
	*
***
RecoilMove:
	Method:
		Header: void applyRecoil(Battle b, ActivePokemon user, int damage)
		Invoke: Void
		Move: user
	*
***
PhysicalContactEffect:
	Method:
		Comments: 
		// b: The current battle
		// user: The user of the attack that caused the physical contact
		// victim: The Pokemon that received the physical contact attack
		###
		Header: void contact(Battle b, ActivePokemon user, ActivePokemon victim)
		Invoke: Void
		Deadsies: user
		EffectList: victim
	*
***
TakeDamageEffect:
	Method:
		Comments:
		// b: The current battle
		// user: The user of the attack
		// victim: The Pokemon who is taking damage, they are the one's probably implementing this
		###
		Header: void takeDamage(Battle b, ActivePokemon user, ActivePokemon victim, int damageTaken)
		EffectList: victim
		Invoke: Void
		Deadsies: victim
	*
***
CrashDamageMove:
	Method:
		Header: void crash(Battle b, ActivePokemon user)
		Move: user
		Invoke: Void
	*
***
BarrierEffect:
	Method:
		Header: void breakBarrier(Battle b, ActivePokemon breaker)
		EffectList: b.getOtherPokemon(breaker.isPlayer())
		Invoke: Void
		InvokeName: breakBarriers
	*
***
DefogRelease:
	Method:
		Header: void releaseDefog(Battle b, ActivePokemon victim)
		Invoke: Void
		EffectList: victim
		InvokeName: release
	*
***
RapidSpinRelease:
	Method:
		Header: void releaseRapidSpin(Battle b, ActivePokemon releaser)
		Invoke: Void
		EffectList: releaser
		InvokeName: release
	*
***
NameChanger:
	Method:
		Comments: // TODO: Not a fan that this only operates on the ability but then again I'm not passing the battle in here and also fuck illusion srsly I might just special case it since it's so fucking unique
		Header: String getNameChange()
		Invoke: Get
		InvokeParameters: ActivePokemon p
		SetInvokees: List<Object> invokees = Collections.singletonList(p.getAbility());
		InvokeName: getChangedName
	*
	Method:
		Header: void setNameChange(Battle b, ActivePokemon victim)
		Invoke: Void
		EffectList: victim
		InvokeName: setNameChanges
	*
***
EntryEffect:
	Method:
		Header: void enter(Battle b, ActivePokemon enterer)
		Invoke: void
		EffectList: enterer
	*
***
StatLoweredEffect:
	Method:
		Comments:
		// b: The current battle
		// caster: The Pokemon responsible for causing the stat to be lowered
		// victim: The Pokemon who's stat is being lowered
		###
		Header: void takeItToTheNextLevel(Battle b, ActivePokemon caster, ActivePokemon victim)
		Invoke: Void
		EffectList: victim
	*
***
LevitationEffect:
	Method:
		Header: void fall(Battle b, ActivePokemon fallen)
		Invoke: Void
		EffectList: fallen
		InvokeName: falllllllll
	*
	Method:
		Parameters: Battle b, ActivePokemon p, ActivePokemon moldBreaker
		Invoke: Contains
		EffectList: p
		MoldBreaker: moldBreaker
	*
***
MurderEffect:
	Comments: // KILL KILL KILL MURDER MURDER MURDER
	Method: 
		Header: void killWish(Battle b, ActivePokemon dead, ActivePokemon murderer)
		Invoke: Void
		InvokeName: killKillKillMurderMurderMurder
		EffectList: murderer
	*
***
EndBattleEffect:
	Method:
		Header: void afterBattle(Trainer player, Battle b, ActivePokemon p)
		Invoke: Void
	*
***
GroundedEffect:
	Method:
		Parameters: Battle b, ActivePokemon p
		Invoke: Contains
		EffectList: p
	*
***
AccuracyBypassEffect
	Method:
		Comments: // Attacker is the Pokemon whose accuracy is being evaluated and is the Pokemon on which this effect is attached to
		Header: boolean bypassAccuracy(Battle b, ActivePokemon attacking, ActivePokemon defending)
		Invoke: Check true
		InvokeName: bypassAccuracyCheck
		EffectList: attacking
		InvokeAttack: attacking
	*
***
OpponentAccuracyBypassEffect:
	Method:
		Comments: // Attacker is the Pokemon whose accuracy is being evaluated, defender is the Pokemon on which this effect is attached to
		Header: boolean opponentBypassAccuracy(Battle b, ActivePokemon attacking, ActivePokemon defending)
		Invoke: Check true
		InvokeName: bypassAccuracyCheck
		EffectList: defending
	*
***
AttackSelectionEffect:
	Method:
		Header: boolean usable(Battle b, ActivePokemon p, Move m)
		Invoke: CheckGet false
		InvokeName: getUnusableEffect
		EffectList: p
	*
	Method:
		Header: String getUnusableMessage(Battle b, ActivePokemon p)
	*
***
OpponentAttackSelectionEffect:
	Method:
		Header: boolean usable(Battle b, ActivePokemon p, Move m)
		Invoke: CheckGet false
		InvokeName: getUnusableEffect
		EffectList: b.getOtherPokemon(p)
		Comments: // TODO: Need to not include this method again since it already extends AttackSelectionEffect, but still need the invoke method
	*
	Extends: AttackSelectionEffect
***
WeatherBlockerEffect:
	Method:
		Header: boolean block(EffectNamesies weather)
		Invoke: Check true
		InvokeName: checkBlocked
		InvokeParameters: Battle b, ActivePokemon p
		EffectList: p
	*
***
TrappingEffect:
	Comments: // Any effect that implements this will prevent a Pokemon with said effect from escaping battle
	Method:
		Header: boolean isTrapped(Battle b, ActivePokemon escaper)
		Invoke: CheckGet true
		InvokeName: getTrapped
		EffectList: escaper
	*
	Method:
		Header: String trappingMessage(ActivePokemon trapped)
	*
***
OpponentTrappingEffect:
	Method:
		Header: boolean trapOpponent(Battle b, ActivePokemon escaper, ActivePokemon trapper)
		Invoke: CheckGet true
		InvokeName: getTrapped
		EffectList: escaper
	*
	Method:
		Header: String opponentTrappingMessage(ActivePokemon escaper, ActivePokemon trapper)
	*
***
BeforeTurnEffect:
	Method:
		Comments: // TODO: Rename these to attacking and defending
		Header: boolean canAttack(ActivePokemon p, ActivePokemon opp, Battle b)
		Invoke: Check false
		InvokeName: checkCannotAttack
		Deadsies: p opp
		EffectList: p
	*
***
OpponentBeforeTurnEffect:
	Method:
		Header: boolean opposingCanAttack(ActivePokemon p, ActivePokemon opp, Battle b)
		Invoke: Check false
		InvokeName: checkCannotAttack
		Deadsies: p opp
		MoldBreaker: p
		EffectList: opp
	*
***
EffectBlockerEffect:
	Method:
		Header: boolean validMove(Battle b, ActivePokemon user, ActivePokemon victim)
		Invoke: Check false
		InvokeName: checkBlocked
		MoldBreaker: user
		EffectList: victim
	*
***
TargetSwapperEffect:
	Method:
		Header: boolean swapTarget(Battle b, ActivePokemon user, ActivePokemon opponent)
		Invoke: Check true
		InvokeName: checkSwapTarget
		MoldBreaker: user
		EffectList: opponent
	*
***
CritBlockerEffect:
	Method:
		Header: boolean blockCrits()
		Invoke: Check true
		InvokeName: checkBlocked
		InvokeParameters: Battle b, ActivePokemon attacking, ActivePokemon defending
		MoldBreaker: attacking
		EffectList: defending
		InvokeAttack: attacking
	*
***
StatProtectingEffect:
	Method:
		Header: boolean prevent(Battle b, ActivePokemon caster, ActivePokemon victim, Stat stat)
		Invoke: CheckGet true
		InvokeName: getPreventEffect
		EffectList: victim
		MoldBreaker: caster
	*
	Method:
		Header: String preventionMessage(ActivePokemon p, Stat s)
	*
***
StatusPreventionEffect:
	Method:
		Comments: // TODO: Would be nice in the future if I am able to implement multiple invoke methods for the same interface method since this could also use a basic check invoke as well
		Header: boolean preventStatus(Battle b, ActivePokemon caster, ActivePokemon victim, StatusCondition status)
		Invoke: CheckGet true
		InvokeName: getPreventEffect
		EffectList: victim
		MoldBreaker: caster
	*
	Method:
		Header: String statusPreventionMessage(ActivePokemon victim)
	*
***
BracingEffect:
	Method:
		Header: boolean isBracing(Battle b, ActivePokemon bracer, boolean fullHealth)
		Invoke: CheckGet true
		InvokeName: getBracingEffect
		EffectList: bracer
		MoldBreaker: b.getOtherPokemon(bracer.isPlayer())
	*
	Method:
		Header: String braceMessage(ActivePokemon bracer)
	*
***
OpponentIgnoreStageEffect:
	Method:
		Header: boolean ignoreStage(Stat s)
		Invoke: Check true
		InvokeName: checkIgnoreStage
		InvokeParameters: Battle b, ActivePokemon stagePokemon, ActivePokemon other
		MoldBreaker: stagePokemon
		StatInvokeAttack: other
	*
***
ChangeTypeEffect:
	Method:
		Comments: // Guarantee the change-type effect to be first
		Header: Type[] getType(Battle b, ActivePokemon p, boolean display)
		Invoke: Get
		InvokeName: getChangedType
		EffectList: p
		EffectPriority: p.getEffect(EffectNamesies.CHANGE_TYPE)
	*
***
ForceMoveEffect:
	Method:
		Header: Move getForcedMove()
		Invoke: Get
		InvokeName: getForcedMove
		InvokeParameters: Battle b, ActivePokemon attacking
		EffectList: attacking
	*
***
DifferentStatEffect
	Method:
		Header: Integer getStat(ActivePokemon user, Stat stat)
		Invoke: Get
		InvokeName: getStat
		InvokeParameters: Battle b
		EffectList: user
	*
***
CritStageEffect:
	Method:
		Header: int increaseCritStage(int stage, ActivePokemon p)
		Invoke: Update
		Update: stage
		InvokeName: updateCritStage
		InvokeParameters: Battle b
		EffectList: p
	*	
***
PriorityChangeEffect:
	Method:
		Header: int changePriority(Battle b, ActivePokemon user, Attack attack, int priority)
		Invoke: Update
		Update: priority
		InvokeName: updatePriority
		EffectList: user
	*
***
ChangeAttackTypeEffect:
	Method:
		Header: Type changeAttackType(Attack attack, Type original)
		Invoke: Update
		Update: original
		InvokeParameters: Battle b, ActivePokemon attacking
		EffectList: attacking
		InvokeName: updateAttackType
	*
***
AdvantageChanger:
	Method:
		Header: Type[] getAdvantageChange(Type attackingType, Type[] defendingType)
		Invoke: Update
		Update: defendingType
		InvokeParameters: Battle b, ActivePokemon attacking, ActivePokemon defending
		SetInvokees:
		// TODO: I really hate it when the invokee list takes from the attacker and the defender -- need to rewrite all of this
		// Check the defending Pokemon's effects and held item as well as the attacking Pokemon's ability for advantage changes 
		List<Object> invokees = new ArrayList<>();
		invokees.addAll(defending.getEffects());
		invokees.add(defending.getHeldItem(b));
		invokees.add(attacking.getAbility());
		###
		InvokeName: updateDefendingType
	*
***
ChangeMoveListEffect:
	Method:
		Header: List<Move> getMoveList(List<Move> actualMoves)
		Invoke: Get
		InvokeParameters: Battle b, ActivePokemon p
		EffectList: p
		InvokeName: getMoveList
	*
***
StatSwitchingEffect:
	Method:
		Header: Stat switchStat(Stat s)
		Invoke: Update
		Update: s
		InvokeParameters: Battle b, ActivePokemon statPokemon, ActivePokemon other
		EffectList: statPokemon
		InvokeName: switchStat
	*
***
OpponentStatSwitchingEffect:
	Method:
		Header: Stat switchStat(Stat s)
		Invoke: Update
		Update: s
		InvokeParameters: Battle b, ActivePokemon other
		InvokeName: switchStat
		StatInvokeAttack: other
	*
***
HalfWeightEffect:
	Method:
		Header: int getHalfAmount(int halfAmount)
		Invoke: Update
		Update: halfAmount
		InvokeName: updateHalfAmount
		InvokeParameters: Battle b, ActivePokemon anorexic
		MoldBreaker: b.getOtherPokemon(anorexic.isPlayer())
		EffectList: anorexic
	*
***
StageChangingEffect:
	Method:
		Header: int adjustStage(Battle b,  ActivePokemon p, ActivePokemon opp, Stat s, int stage)
		Invoke: Update
		MoldBreakerNullCheck: s.user() ? null : opp
		EffectList: p
		Update: stage
		InvokeName: updateStage
	*
***
StatChangingEffect:
	Method:
		Comments:
		// b: The current battle
		// p: The Pokemon that the stat is being altered on
		// opp: The opposing Pokemon
		// s: The stat that is being altered
		// stat: The current value of stat s
		// Return: The modified value of stat, if stat was not altered, just return stat
		###
		Header: int modify(Battle b, ActivePokemon p, ActivePokemon opp, Stat s, int stat)
		Invoke: Update
		Update: stat
		InvokeName: modifyStat
		EffectList: p
		MoldBreakerNullCheck: s.user() ? null : opp
	*
***
PowerChangeEffect:
	Method:
		Header: double getMultiplier(Battle b, ActivePokemon user, ActivePokemon victim)
		Invoke: Multiply
		EffectList: user
	*
***
OpponentPowerChangeEffect:
	Method:
		Header: double getOpponentMultiplier(Battle b, ActivePokemon user, ActivePokemon victim)
		Invoke: Multiply
		EffectList: victim
		MoldBreaker: user
	*
***
AdvantageMultiplierMove:
	Method:
		Header: double multiplyAdvantage(Type moveType, Type[] defendingType)
		Invoke: Multiply
		InvokeParameters: ActivePokemon attacking
		Move: attacking
	*
***
AbsorbDamageEffect:
	Method:
		Header: boolean absorbDamage(Battle b, ActivePokemon damageTaker, int damageAmount)
		Invoke: Check true
		EffectList: damageTaker
	*
***
DamageTakenEffect:
	Method:
		Header: void damageTaken(Battle b, ActivePokemon damageTaker)
		Invoke: void
		EffectList: damageTaker
	*
***
AlwaysCritEffect:
	Method:
		Header: boolean shouldCrit(Battle b, ActivePokemon p)
		Invoke: Check true
		EffectList: p
		InvokeAttack: p
		InvokeName: defCritsies
	*
***
StatusReceivedEffect:
	Method:
		Header: void receiveStatus(Battle b, ActivePokemon caster, ActivePokemon victim, StatusCondition statusType)
		Invoke: Void
		EffectList: victim
	*
***
OpponentStatusReceivedEffect:
	Method:
		Header: void receiveStatus(Battle b, ActivePokemon victim, StatusCondition statusType)
		Invoke: Void
		EffectList: b.getOtherPokemon(victim)
	*
***
SleepyFightsterEffect:
	Method:
		Parameters: Battle b, ActivePokemon p
		Invoke: Contains
		EffectList: p
		InvokeAttack: p
	*
***
OpponentEndAttackEffect:
	Method:
		Header: void endsies(Battle b, ActivePokemon attacking, Attack attack)
		Invoke: Void
		EffectList: b.getOtherPokemon(attacking)
	*
***