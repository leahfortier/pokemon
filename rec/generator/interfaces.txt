# The EffectList parameter should contain the ActivePokemon parameter that represents the entire invokee list
# If this is unspecified, then the invokee list will default to being passed in as a new parameter in the invoke method

ApplyDamageEffect:
    Extends: OnDamageEffect
    Comments: // This is used when the user applies direct damage to an opponent, and has special effects associated with the user
    Method:
        Header: void applyDamageEffect(Battle b, ActivePokemon user, ActivePokemon victim)
        Comments:
            // user: The user of that attack, the one who is implementing this effect
            // victim: The Pokemon that received the attack
            ###
        Invoke: Void
        EffectList: user
        InvokeAttack: user
        Deadsies: user
        IgnoreCondition: effect.shouldIgnore(victim)
    *
***
OpponentApplyDamageEffect:
    Extends: OnDamageEffect
    Comments: // This is used when the user applies direct damage to an opponent, and has special effects associated with the user
    Method:
        Header: void applyDamageEffect(Battle b, ActivePokemon user, ActivePokemon victim)
        Comments:
            // user: The user of that attack
            // victim: The Pokemon that received the attack, the one who is probably implementing this effect
            ###
        Invoke: Void
        EffectList: victim
        Deadsies: user
        IgnoreCondition: effect.shouldIgnore(victim)
    *
***
TakeDamageEffect:
    Extends: OnDamageEffect
    Comments: // This is used when the user applies direct damage to an opponent, and has special effects associated with the victim
    Method:
        Comments:
            // user: The user of the attack
            // victim: The one who is taking damage and is implementing this effect
            ###
        Header: void takeDamage(Battle b, ActivePokemon user, ActivePokemon victim)
        EffectList: victim
        Invoke: Void
        Deadsies: victim
        IgnoreCondition: effect.shouldIgnore(victim)
    *
***
OpponentTakeDamageEffect:
    Extends: OnDamageEffect
    Comments: // This is used when the user applies direct damage to an opponent, and has special effects associated with the victim
    Method:
        Comments:
            // user: The user of the attack and implementer of the effect
            // victim: The Pokemon who is taking damage
            ###
        Header: void takeDamage(Battle b, ActivePokemon user, ActivePokemon victim)
        EffectList: user
        Invoke: Void
        Deadsies: victim
        IgnoreCondition: effect.shouldIgnore(victim)
    *
***
EndTurnEffect:
    Method:
        Header: void applyEndTurn(ActivePokemon victim, Battle b)
        Invoke: Void
        Deadsies: victim
        EffectList: victim
    *
***
BattleEndTurnEffect:
    Comments: // EndTurnEffect for BattleEffects -- those should only use this and not the standard EndTurnEffect!!!
    Extends: EffectInterface
    Method:
        Header: void singleEndTurnEffect(Battle b, ActivePokemon victim)
        Default: Empty
    *
    Method:
        Header: String getEndTurnMessage()
        Default:
            // Definitely not required to have a message here
            return "";
            ###
    *
    Method:
        Header: boolean endTurnSubsider()
        Default:
            // Should override to true when this effect should be deactivated in the end turn method when out of turns
            return false;
            ###
    *
    Method:
        Header: void applyEndTurn(Battle b)
        Invoke: Void
        SetInvokees:
            List<BattleEffect<? extends BattleEffectNamesies>> invokees = b.getEffects().asList();
            ###
        Default:
            if (this.endTurnSubsider() && this.getTurns() == 1) {
                Messages.add(this.getSubsideMessage(null));
                this.deactivate();
                return;
            }
        
            Messages.add(this.getEndTurnMessage());
            
            ActivePokemon playerFront = b.getPlayer().front();
            if (!playerFront.isFainted(b)) {
                this.singleEndTurnEffect(b, playerFront);
            }
            
            ActivePokemon oppFront = b.getOpponent().front();
            if (!oppFront.isFainted(b)) {
                this.singleEndTurnEffect(b, oppFront);
            }
            ###
    *
***
SuperDuperEndTurnEffect:
    Method:
        Header: boolean theVeryVeryEnd(Battle b, ActivePokemon p)
        Invoke: Check true
        EffectList: p
    *
***
AttackMissedEffect:
    Method:
        Header: void afterMiss(Battle b, ActivePokemon misser)
        Invoke: Void
        EffectList: misser
        InvokeAttack: misser
    *
***
CrashDamageMove:
    Extends: AttackInterface, AttackMissedEffect
    Method:
        Header: int getMaxHealthPercentageDenominator()
    *
    Method:
        Header: void afterMiss(Battle b, ActivePokemon misser)
        Override: True
        Default:
            // Crash when we miss
            this.crash(b, misser);
            ###
    *
    Method:
        Header: void crash(Battle b, ActivePokemon user)
        Move: user
        Invoke: Void
        Default:
            // Crash damage must be at least one and is affected by Magic Guard
            int crashDamage = (int)Math.max(Math.ceil((double)user.getMaxHP()/getMaxHealthPercentageDenominator()), 1);
            user.indirectReduceHealth(b, crashDamage, false, user.getName() + " kept going and crashed!");
            ###
    *
    Comments: // Needs a separate invoke method in addition to naturally being apart of the AttackMissedEffect because it can be invoked from other places as well
***
BarrierEffect:
    Extends: SwappableEffect, SimpleStatModifyingEffect
    Method:
        Header: String getBreakMessage(ActivePokemon breaker)
    *
    Method:
        Header: void breakBarrier(ActivePokemon breaker)
        InvokeParameters: Battle b, ActivePokemon broken
        EffectList: broken
        Invoke: Void
        InvokeName: breakBarriers
        Default:
            Messages.add(this.getBreakMessage(breaker));
            this.deactivate();
            ###
    *
    Method:
        Header: boolean canModifyStat(Battle b, ActivePokemon p, ActivePokemon opp)
        Override: True
        Default:
            // Critical hits and Pokemon with the Infiltrator ability bypass the barrier's boosts
            return !opp.isCriticalHit() && !opp.hasAbility(AbilityNamesies.INFILTRATOR);
            ###
    *
    Method:
        Header: double getModifier()
        Override: True
        Default:
            return 2;
            ###
    *
***
DefogRelease:
    Extends: EffectInterface
    Method:
        Header: String getDefogReleaseMessage()
    *
    Method:
        Header: void releaseDefog()
        InvokeParameters: Battle b, ActivePokemon released
        Invoke: Void
        EffectList: released
        InvokeName: release
        Default:
            Messages.add(this.getDefogReleaseMessage());
            this.deactivate();
            ###
    *
***
RapidSpinRelease:
    Extends: EffectInterface
    Method:
        Header: String getRapidSpinReleaseMessage(ActivePokemon released)
    *
    Method:
        Header: void releaseRapidSpin(ActivePokemon released)
        InvokeParameters: Battle b
        Invoke: Void
        EffectList: released
        InvokeName: release
        Default:
            Messages.add(this.getRapidSpinReleaseMessage(released));
            this.deactivate();
            ###
    *
***
NameChanger:
    Comments:
        // This only operates on the ability which I'm not a super huge fan of but then again I'm not passing the battle
        // in here and also fuck illusion srsly maybe it should just be special cased since it's so fucking unique
        ###
    Method:
        Header: String getNameChange()
        Invoke: Get
        InvokeParameters: ActivePokemon p
        SetInvokees: List<InvokeEffect> invokees = Collections.singletonList(p.getAbility());
        InvokeName: getChangedName
    *
    Method:
        Header: void setNameChange(Battle b, ActivePokemon victim)
        Invoke: Void
        EffectList: victim
        InvokeName: setNameChanges
    *
***
EntryEffect:
    Method:
        Header: void enter(Battle b, ActivePokemon enterer)
        Invoke: void
        EffectList: enterer
    *
***
StatLoweredEffect:
    Method:
        Comments:
            // victim: The Pokemon whose stat is being lowered
            // selfCaster: true if the victim caused its own stats to be lowered
            ###
        Header: void takeItToTheNextLevel(Battle b, ActivePokemon victim, boolean selfCaster)
        Invoke: Void
        EffectList: victim
    *
***
LevitationEffect:
    Method:
        Header: void fall(ActivePokemon fallen)
        Invoke: Void
        InvokeParameters: Battle b
        EffectList: fallen
        InvokeName: falllllllll
        Default: Empty
    *
    Method:
        InvokeParameters: Battle b, ActivePokemon p, ActivePokemon moldBreaker
        Invoke: Contains
        EffectList: p
        MoldBreaker: moldBreaker
    *
***
FaintEffect:
    Method:
        Header: void deathWish(Battle b, ActivePokemon dead, ActivePokemon murderer)
        Invoke: Void
        InvokeName: grantDeathWish
        EffectList: dead
    *
***
MurderEffect:
    Comments: // KILL KILL KILL MURDER MURDER MURDER
    Method:
        Header: void killWish(Battle b, ActivePokemon dead, ActivePokemon murderer)
        Invoke: Void
        InvokeName: killKillKillMurderMurderMurder
        EffectList: murderer
        InvokeAttack: murderer
    *
***
EndBattleEffect:
    Method:
        Header: void afterBattle(Trainer player, ActivePokemon p)
        Invoke: Void
    *
***
GroundedEffect:
    Method:
        InvokeParameters: Battle b, ActivePokemon p
        Invoke: Contains
        EffectList: p
    *
    Extends: SelfAttackBlocker
    Method:
        Override: True
        Header: boolean block(Battle b, ActivePokemon user)
        Default:
            return user.getAttack().isMoveType(MoveType.AIRBORNE);
            ###
    *
    Method:
        Header: void removeLevitation(Battle b, ActivePokemon p)
        Default:
            if (p.isSemiInvulnerableFlying()) {
                ((MultiTurnMove)p.getAttack()).resetReady();
                Effect.cast(PokemonEffectNamesies.FLINCH, b, p, p, CastSource.EFFECT, p.getName() + " fell to the ground!");
            }

            LevitationEffect.falllllllll(b, p);
            ###
    *
***
SemiInvulnerableBypasser:
    Method:
        Comments:
            // Attacker is the Pokemon whose accuracy is being evaluated and is the Pokemon on which this effect is attached to
            // This is evaluated BEFORE the semi-invulnerable checks, so if this returns true, the move will hit even if the defending is semi-invulnerable
            ###
        Header: boolean semiInvulnerableBypass(Battle b, ActivePokemon attacking, ActivePokemon defending)
        Invoke: Check true
        InvokeName: bypassAccuracyCheck
        EffectList: attacking
        InvokeAttack: attacking
    *
***
BasicAccuracyBypassEffect:
    Method:
        Comments: 
            // Attacker is the Pokemon whose accuracy is being evaluated and is the Pokemon on which this effect is attached to
            // This is evaluated AFTER the semi-invulnerable checks
            // Should use SemiInvulnerableBypasser for moves that hit fly, dig, etc.
            ###
        Header: boolean bypassAccuracy(Battle b, ActivePokemon attacking, ActivePokemon defending)
        Invoke: Check true
        InvokeName: bypassAccuracyCheck
        EffectList: attacking
        InvokeAttack: attacking
    *
***
OpponentAccuracyBypassEffect:
    Method:
        Comments: 
            // Attacker is the Pokemon whose accuracy is being evaluated, defending is the Pokemon on which this effect is attached to
            // This is evaluated BEFORE the semi-invulnerable checks, so if this returns true, the move will hit even if the defending is semi-invulnerable
            ###
        Header: boolean opponentBypassAccuracy(Battle b, ActivePokemon attacking, ActivePokemon defending)
        Invoke: Check true
        InvokeName: bypassAccuracyCheck
        EffectList: defending
    *
***
AttackSelectionEffect:
    Method:
        Header: boolean usable(Battle b, ActivePokemon p, Move m)
        Invoke: CheckGet false
        InvokeName: getUnusableEffect
        EffectList: p
    *
    Method:
        Header: String getUnusableMessage(ActivePokemon p)
    *
***
WeatherBlockerEffect:
    Method:
        Header: boolean block(WeatherNamesies weather)
        Invoke: Check true
        InvokeName: checkBlocked
        InvokeParameters: Battle b, ActivePokemon p
        EffectList: p
        Begin:
            // Non-overground Pokemon are immune to weather effects
            if (p.isSemiInvulnerableNotOverground()) {
                return true;
            }
            ###
    *
***
TrappingEffect:
    Comments: // Any effect that implements this will prevent a Pokemon with said effect from escaping battle
    Method:
        Header: String trappingMessage(ActivePokemon trapped)
    *
    Method:
        Header: boolean trapped(Battle b, ActivePokemon escaper)
        Default:
            return true;
            ###
        Invoke: CheckMessage true trappingMessage(escaper)
        InvokeName: isTrapped
        EffectList: escaper
    *
***
OpponentTrappingEffect:
    Method:
        Header: boolean trapOpponent(Battle b, ActivePokemon escaper, ActivePokemon trapper)
        Invoke: CheckMessage true opponentTrappingMessage(escaper, trapper)
        InvokeName: isTrapped
        EffectList: trapper
    *
    Method:
        Header: String opponentTrappingMessage(ActivePokemon escaper, ActivePokemon trapper)
    *
***
BeforeAttackPreventingEffect:
    Comments: // Used for effects that check if the Pokemon can attack during the time of execution
    Method:
        Header: boolean canAttack(Battle b, ActivePokemon attacking, ActivePokemon defending)
        Invoke: Check false
        InvokeName: checkCannotAttack
        Deadsies: attacking defending
        EffectList: attacking
    *
***
StartAttackEffect:
    Comments: // Used for effects that occur immediately after printing an attack is being used (after success checks, but before accuracy checks)
    Method:
        Header: void beforeAttack(Battle b, ActivePokemon attacking, ActivePokemon defending)
        Invoke: Void
        InvokeName: checkBeforeAttack
        EffectList: attacking
    *
***
TargetSwapperEffect:
    Method:
        Header: boolean swapTarget(Battle b, ActivePokemon user, ActivePokemon opponent)
        Invoke: Check true
        InvokeName: checkSwapTarget
        MoldBreaker: user
        EffectList: opponent
    *
***
CritBlockerEffect:
    Method:
        Invoke: Contains
        InvokeName: checkBlocked
        InvokeParameters: Battle b, ActivePokemon attacking, ActivePokemon defending
        MoldBreaker: attacking
        EffectList: defending
        InvokeAttack: attacking
    *
***
StatProtectingEffect:
    Method:
        Header: boolean prevent(Battle b, ActivePokemon caster, ActivePokemon victim, Stat stat)
        Invoke: CheckGet true
        InvokeName: getPreventEffect
        EffectList: victim
        MoldBreaker: moldBreaker
        InvokeParameters: ActivePokemon moldBreaker
    *
    Method:
        Header: String preventionMessage(ActivePokemon p, Stat s)
    *
***
StatTargetSwapperEffect:
    Method:
        Header: String getSwapStatTargetMessage(ActivePokemon victim)
    *
    Method:
        Header: boolean shouldSwapTarget()
        Default:
            // TODO: This should probably use a ContainsGet type of thing but just doing this instead for now
            return true;
            ###
        Invoke: CheckGet true
        InvokeName: checkTargetSwap
        EffectList: victim
        MoldBreaker: moldBreaker
        InvokeParameters: ActivePokemon moldBreaker, Battle b, ActivePokemon caster, ActivePokemon victim
    *
***
StatusPreventionEffect:
    Method:
        Header: ApplyResult preventStatus(Battle b, ActivePokemon caster, ActivePokemon victim, StatusNamesies status)
        Invoke: Get
        InvokeName: getPreventEffect
        EffectList: victim
        MoldBreaker: caster
    *
***
EffectPreventionEffect:
    Method:
        Header: ApplyResult preventEffect(Battle b, ActivePokemon caster, ActivePokemon victim, EffectNamesies effectName, CastSource source)
        Invoke: Get
        InvokeName: getPreventEffect
        EffectList: victim
        MoldBreaker: caster
    *
***
BracingEffect:
    Method:
        Header: boolean isBracing(Battle b, ActivePokemon bracer, boolean fullHealth)
        Invoke: CheckGet true
        InvokeName: getBracingEffect
        EffectList: bracer
        MoldBreaker: b.getOtherPokemon(bracer)
    *
    Method:
        Header: String braceMessage(ActivePokemon bracer)
    *
***
IgnoreStageEffect:
    Method:
        Header: boolean ignoreStage(Stat s, int stage)
        Invoke: Check true
        InvokeName: checkIgnoreStage
        InvokeParameters: Battle b, ActivePokemon stagePokemon
        EffectList: stagePokemon
    *
***
OpponentIgnoreStageEffect:
    Method:
        Header: boolean ignoreStage(Stat s)
        Invoke: Check true
        InvokeName: checkIgnoreStage
        InvokeParameters: Battle b, ActivePokemon stagePokemon, ActivePokemon other
        MoldBreaker: stagePokemon
        StatInvokeAttack: other
    *
***
ChangeTypeEffect:
    Method:
        Comments: // Guarantee the change-type effect to be first
        Header: PokeType getType(Battle b, ActivePokemon p, boolean display)
        Invoke: Get
        InvokeName: getChangedType
        EffectList: p
        EffectPriority: p.getEffect(PokemonEffectNamesies.CHANGE_TYPE)
    *
***
ForceMoveEffect:
    Method:
        Header: Move getForcedMove(ActivePokemon attacking)
        Invoke: Get
        InvokeName: getForcedMove
        InvokeParameters: Battle b
        EffectList: attacking
        InvokeAttack: attacking
    *
***
DifferentStatEffect
    Method:
        Header: Integer getStat(ActivePokemon user, Stat stat)
        Invoke: Get
        InvokeName: getStat
        InvokeParameters: Battle b
        EffectList: user
    *
***
CritStageEffect:
    Method:
        Header: int increaseCritStage(ActivePokemon p)
        Default:
            return 1;
            ###
        Invoke: Add
        InvokeParameters: Battle b
        EffectList: p
        InvokeAttack: p
    *
***
PriorityChangeEffect:
    Method:
        Header: int changePriority(Battle b, ActivePokemon user)
        Invoke: Add
        InvokeName: getModifier
        EffectList: user
    *
***
ChangeAttackTypeEffect:
    Method:
        Header: Type changeAttackType(Attack attack, Type original)
        InvokeParameters: Battle b, ActivePokemon attacking
        EffectList: attacking
        InvokeName: getAttackType
        Comments: // Guarantee the change-attack-type effect to be first
        Invoke: Get
        EffectPriority: attacking.getEffect(PokemonEffectNamesies.CHANGE_ATTACK_TYPE)
    *
***
AttackingNoAdvantageChanger:
    Method:
        Header: boolean negateNoAdvantage(Type attackingType, Type defendingType)
        Invoke: Check true
        InvokeParameters: Battle b, ActivePokemon attacking
        EffectList: attacking
    *
***
DefendingNoAdvantageChanger:
    Method:
        Header: boolean negateNoAdvantage(Type attackingType, Type defendingType)
        Invoke: Check true
        InvokeParameters: Battle b, ActivePokemon defending
        EffectList: defending
    *
***
ChangeMoveListEffect:
    Method:
        Header: MoveList getMoveList(MoveList actualMoves)
        Invoke: Get
        InvokeParameters: Battle b, ActivePokemon p
        EffectList: p
        InvokeName: getMoveList
    *
***
StatSwitchingEffect:
    Method:
        Header: Stat getSwitchStat(Stat s)
        InvokeParameters: Battle b, ActivePokemon statPokemon
        Invoke: Update
        Update: s
        EffectList: statPokemon
        InvokeAttack: statPokemon
        InvokeName: switchStat
    *
***
OpponentStatSwitchingEffect:
    Method:
        Header: Stat getSwitchStat(Stat s)
        Invoke: Update
        Update: s
        InvokeParameters: Battle b, ActivePokemon other
        InvokeName: switchStat
        StatInvokeAttack: other
    *
***
HalfWeightEffect:
    Method:
        Header: int getHalfAmount()
        Default:
            return 1;
            ###
        Invoke: Add
        InvokeName: getHalfAmount
        InvokeParameters: Battle b, ActivePokemon anorexic
        MoldBreaker: b.getOtherPokemon(anorexic)
        EffectList: anorexic
    *
***
DoubleWeightEffect:
    Method:
        Header: int getDoubleAmount()
        Default:
            return 1;
            ###
        Invoke: Add
        InvokeName: getDoubleAmount
        InvokeParameters: Battle b, ActivePokemon fatty
        MoldBreaker: b.getOtherPokemon(fatty)
        EffectList: fatty
    *
***
StageChangingEffect:
    Method:
        Header: int adjustStage(Battle b, ActivePokemon p, Stat s)
    *
    Method:
        Header: int fullAdjustStage(Battle b, ActivePokemon p, ActivePokemon opp, Stat s)
        Invoke: Add
        MoldBreakerNullCheck: s.isDefending() ? opp : null
        EffectList: p
        Default:
            int adjustment = this.adjustStage(b, p, s);
            return getStageWithCritCheck(adjustment, p, opp, s);
            ###
    *
    StaticMethod:
        Comments: // Critical hits ignore negative stages on the attacker and positive stages on the defending
        Header: int getStageWithCritCheck(int stage, ActivePokemon p, ActivePokemon opp, Stat s)
        Body:
            if (s.isAttacking() && p.isCriticalHit() && stage < 0) {
                return 0;
            } else if (s.isDefending() && opp.isCriticalHit() && stage > 0) {
                return 0;
            } else {
                return stage;
            }
            ###
    *
***
StatModifyingEffect:
    Method:
        Header: double modify(Battle b, ActivePokemon p, ActivePokemon opp, Stat s)
        Invoke: Multiply
        EffectList: p
        MoldBreakerNullCheck: s.isDefending() ? opp : null
    *
***
StatChangingEffect:
    Method:
        Comments:
            // p: The Pokemon that the stat is being altered on
            // opp: The opposing Pokemon
            // s: The stat that is being altered
            // stat: The current value of stat s
            // Return: The modified value of stat, if stat was not altered, just return stat
            ###
        Header: int modify(Battle b, ActivePokemon p, ActivePokemon opp, Stat s, int stat)
        Invoke: Update
        Update: stat
        InvokeName: modifyStat
        EffectList: p
        MoldBreakerNullCheck: s.isDefending() ? opp : null
    *
***
EffectChanceMultiplierEffect:
    Method:
        Header: double getEffectChanceMultiplier(ActivePokemon user)
        InvokeParameters: Battle b
        Invoke: Multiply
        EffectList: user
    *
***
PowerChangeEffect:
    Method:
        Header: double getMultiplier(Battle b, ActivePokemon user, ActivePokemon victim)
        Invoke: Multiply
        EffectList: user
        InvokeAttack: user
    *
***
OpponentPowerChangeEffect:
    Method:
        Header: double getOpponentMultiplier(Battle b, ActivePokemon user, ActivePokemon victim)
        Invoke: Multiply
        EffectList: victim
        MoldBreaker: user
    *
***
AdvantageMultiplierMove:
    Extends: AttackInterface
    Method:
        Header: double multiplyAdvantage(Type attackingType, PokeType defendingTypes)
        Invoke: Multiply
        InvokeParameters: ActivePokemon attacking
        Move: attacking
    *
***
StatusBoosterEffect:
    Method:
        Header: boolean statusBooster(Stat stat)
        Invoke: Check true
        InvokeName: isStatusBooster
        InvokeParameters: Battle b, ActivePokemon user
        EffectList: user
        InvokeAttack: user
    *
***
AbsorbDamageEffect:
    Comments: // Effects which can absorb direct attacks
    Method:
        Header: boolean absorbDamage(Battle b, ActivePokemon damageTaker, int damageAmount)
        Invoke: Check true
        EffectList: damageTaker
        MoldBreaker: b.getOtherPokemon(damageTaker)
    *
***
DamageTakenEffect:
    Method:
        Header: void damageTaken(Battle b, ActivePokemon damageTaker, int damageAmount)
        Invoke: void
        EffectList: damageTaker
    *
***
AlwaysCritEffect:
    Method:
        Header: boolean shouldCrit(Battle b, ActivePokemon attacking, ActivePokemon defending)
        Default:
            return true;
            ###
        Invoke: Check true
        EffectList: attacking
        InvokeAttack: attacking
        InvokeName: defCritsies
    *
***
EffectReceivedEffect:
    Method:
        Header: void receiveEffect(Battle b, ActivePokemon caster, ActivePokemon victim, EffectNamesies effectType)
        Invoke: Void
        EffectList: victim
    *
***
StatusReceivedEffect:
    Method:
        Header: void receiveStatus(Battle b, ActivePokemon caster, ActivePokemon victim, StatusNamesies statusType)
        Invoke: Void
        EffectList: victim
    *
***
OpponentStatusReceivedEffect:
    Method:
        Header: void receiveStatus(Battle b, ActivePokemon victim, StatusNamesies statusType)
        Invoke: Void
        EffectList: b.getOtherPokemon(victim)
    *
***
SleepyFightsterEffect:
    Method:
        InvokeParameters: Battle b, ActivePokemon p
        Invoke: Contains
        EffectList: p
        InvokeAttack: p
    *
***
EndAttackEffect:
    Method:
        Header: void endsies(Battle b, ActivePokemon attacking)
        Invoke: Void
        EffectList: attacking
    *
***
OpponentEndAttackEffect:
    Method:
        Header: void endsies(Battle b, ActivePokemon attacking)
        Invoke: Void
        EffectList: b.getOtherPokemon(attacking)
    *
***
TerrainCastEffect:
    Method:
        Header: void newTerrain(Battle b, ActivePokemon p, TerrainType newTerrain)
        Invoke: Void
        EffectList: p
    *
***
AttackBlocker:
    Method:
        Header: boolean block(Battle b, ActivePokemon user, ActivePokemon victim)
        Invoke: CheckGet true
        InvokeName: checkBlocked
        MoldBreaker: user
        EffectList: victim
    *
    Method:
        Header: void alternateEffect(Battle b, ActivePokemon user, ActivePokemon victim)
        Default: Empty
    *
    Method:
        Header: String getBlockMessage(ActivePokemon user, ActivePokemon victim)
        Default:
            return Effect.DEFAULT_FAIL_MESSAGE;
            ###
    *
***
SelfAttackBlocker:
    Method:
        Header: boolean block(Battle b, ActivePokemon user)
        Invoke: CheckGet true
        InvokeName: checkBlocked
        EffectList: user
        InvokeAttack: user
    *
    Method:
        Header: void alternateEffect(Battle b, ActivePokemon user)
        Default: Empty
    *
    Method:
        Header: String getBlockMessage(ActivePokemon user)
        Default:
            return Effect.DEFAULT_FAIL_MESSAGE;
            ###
    *
***
WildEncounterAlterer:
    Method:
        Header: void alterWildPokemon(ActivePokemon playerFront, WildEncounterInfo encounterData, WildEncounter encounter)
        Invoke: Void
        NonBattleEffects: playerFront
    *
***
RepellingEffect:
    Method:
        Header: boolean shouldRepel(ActivePokemon playerFront, WildEncounter wildPokemon)
        Invoke: Check true
        NonBattleEffects: playerFront
        Begin:
            if (wildPokemon.getLevel() <= playerFront.getLevel() && Game.getPlayer().getRepelInfo().isUsingRepel()) {
                return true;
            }
            ###
    *
***
WildEncounterSelector:
    Method:
        Header: WildEncounterInfo getWildEncounter(WildEncounterInfo[] wildEncounters)
        Invoke: Get
        InvokeParameters: ActivePokemon playerFront
        NonBattleEffects: playerFront
        InvokeName: getForcedWildEncounter
    *
***
EncounterRateMultiplier:
    Method:
        Header: double getEncounterRateMultiplier()
        Invoke: Multiply
        InvokeParameters: ActivePokemon playerFront
        NonBattleEffects: playerFront
    *
***
ModifyStageValueEffect:
    Method:
        Header: int modifyStageValue()
        Invoke: Multiply
        InvokeParameters: Battle b, ActivePokemon moldBreaker, ActivePokemon victim
        MoldBreaker: moldBreaker
        EffectList: victim
    *
***
StrikeFirstEffect:
    Method:
        Comments: // Returns if the Pokemon should go first within its priority bracket
        Header: boolean strikeFirst(Battle b, ActivePokemon striker)
        Invoke: CheckMessage true getStrikeFirstMessage(striker)
        InvokeName: checkStrikeFirst
        EffectList: striker
    *
    Method:
        Header: String getStrikeFirstMessage(ActivePokemon striker)
    *
***
WeatherEliminatingEffect:
    Method:
        Header: String getEliminateMessage(ActivePokemon eliminator)
    *
    Method:
        Header: boolean eliminateWeather(WeatherNamesies weather)
        Default:
            return weather != WeatherNamesies.CLEAR_SKIES;
            ###
        InvokeParameters: Battle b, ActivePokemon eliminator
        Invoke: CheckMessage true getEliminateMessage(eliminator)
        EffectList: eliminator
        InvokeName: shouldEliminateWeather
    *
    Extends: EntryEndTurnEffect
    Method:
        Override: True
        Header: void applyEffect(Battle b, ActivePokemon p)
        Default:
            b.addEffect(b.getWeather());
            ###
    *
    StaticMethod:
        Comments: // Calls the invoke method for both front Pokemon
        Header: boolean shouldEliminateWeather(Battle b, WeatherNamesies weather)
        Body:
            return shouldEliminateWeather(b, b.getPlayer().front(), weather) || shouldEliminateWeather(b, b.getOpponent().front(), weather);
            ###
    *
***
WeatherChangedEffect:
    Comments: // Effects that take place when weather is changed
    Method:
        Comments: // Note: The effect holder here is not necessarily the Pokemon that changed the weather, but the Pokemon which holds the WeatherChangedEffect
        Header: void weatherChanged(WeatherNamesies weather, ActivePokemon effectHolder)
        Invoke: Void
        EffectList: effectHolder
        InvokeName: checkWeatherChange
        InvokeParameters: Battle b
    *
    StaticMethod:
        Comments: // Calls the invoke method for both front Pokemon
        Header: void invokeWeatherChangedEffect(Battle b, WeatherNamesies weather)
        Body:
            // Check the effects from both Pokemon on the field
            // Note: Should not be implemented by any battle effects as they will be executed twice
            checkWeatherChange(b, weather, b.getPlayer().front());
            checkWeatherChange(b, weather, b.getOpponent().front());
            ###
    *
***
SwitchOutEffect:
    Method:
        Header: void switchOut(ActivePokemon switchee)
        Invoke: Void
        SetInvokees:
            List<InvokeEffect> invokees = switchee.getAllEffects();
            ###
    *
***
EffectExtendingEffect:
    Method:
        Header: int getExtensionTurns(Effect receivedEffect, int numTurns)
        Invoke: Add
        InvokeParameters: Battle b, ActivePokemon p
        EffectList: p
    *
***
ItemBlockerEffect:
    Method:
        InvokeParameters: Battle b, ActivePokemon p
        Invoke: Contains
        SetInvokees:
            // Don't include the item because then it's all like ahhhhhh
            List<InvokeEffect> invokees = b.getEffectsList(p, false);
            ###
    *
***
OpponentItemBlockerEffect:
    Method:
        Header: boolean blockItem(ItemNamesies item)
        InvokeParameters: Battle b, ActivePokemon opp
        Invoke: Check true
        SetInvokees:
            // Don't include the item because then it's all like ahhhhhh
            List<InvokeEffect> invokees = b.getEffectsList(opp, false);
            ###
    *
***
StallingEffect:
    Method:
        Invoke: Contains
        InvokeParameters: Battle b, ActivePokemon p
        EffectList: p
    *
***
StickyHoldEffect:
    Method:
        Invoke: Contains
        InvokeParameters: Battle b, ActivePokemon user, ActivePokemon stickyHands
        EffectList: stickyHands
        MoldBreaker: user
    *
***
NoSwapEffect:
    Method:
        Invoke: Contains
        InvokeParameters: Battle b, ActivePokemon swapper, ActivePokemon swapped
        EffectList: swapped
        MoldBreaker: swapper
    *
***
DefiniteEscape:
    Extends: InvokeEffect
    Method:
        Header: String getEscapeMessage(ActivePokemon sourcerer)
        Default:
            CastSource source = this.getSource().getCastSource();
            if (source.hasSourceName()) {
                return sourcerer.getName() + "'s " + source.getSourceName(sourcerer) + " allowed it to escape!";
            }

            return "Got away safely!";
            ###
    *
    Method:
        Header: boolean canEscape()
        Default:
            return true;
            ###
        InvokeParameters: Battle b, ActivePokemon p
        EffectList: p
        Invoke: CheckMessage true getEscapeMessage(p)
        InvokeName: canDefinitelyEscape
    *
***
PowderBlocker:
    Extends: AttackBlocker
    Method:
        Header: boolean block(Battle b, ActivePokemon user, ActivePokemon victim)
        Default:
            return user.getAttack() instanceof PowderMove;
            ###
        Override: True
    *
    Method:
        InvokeParameters: Battle b, ActivePokemon p
        Invoke: Contains
        EffectList: p
        Begin:
            if (p.isType(b, Type.GRASS)) {
                return true;
            }
            ###
    *
***
