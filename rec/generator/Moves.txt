# The name of each move and its contents.
# Blocks are separated by '*'

Constructor:
	Namesies Enum AttackNamesies
	Desc String
	PP Int
	Type Enum Type
	Cat Enum MoveCategory
*
Fields:
	Pow Int power
	Acc Int accuracy
	Effect Multiple Enum EffectNamesies effects List
	EffChance Int effectChance
	Status Enum StatusCondition status
	MoveType Multiple Enum MoveType moveTypes List
	SelfTarget Boolean selfTarget
	Priority Int priority
	PrintCast Boolean printCast
*

***

Tackle:
	Pow: 40
	Acc: 100
	PP: 35
	Desc: A physical attack in which the user charges and slams into the target with its whole body.
	Cat: Physical
	Type: Normal
*
Leech Seed:
	Acc: 90
	Type: Grass
	Cat: Status
	Desc: A seed is planted on the target. It steals some HP from the target every turn.
	PP: 10
	Effect: LeechSeed
*	
Thunder Wave:
	Acc: 90
	Type: Electric
	Cat: Status
	Desc: A weak electric charge is launched at the target. It causes paralysis if it hits.
	PP: 20
	Status: Paralyzed
*	
Poison Powder:
	Acc: 75
	Desc: The user scatters a cloud of poisonous dust on the target. It may poison the target.
	Type: Poison
	Cat: Status
	PP: 35
	Status: Poisoned
	MoveType: Powder
*
Sleep Powder:
	Acc: 75
	PP: 15
	Type: Grass
	Desc: The user scatters a big cloud of sleep-inducing dust around the target.
	Status: Asleep
	Cat: Status
	MoveType: Powder
*
Toxic:
	PP: 10
	Type: Poison
	Desc: A move that leaves the target badly poisoned. Its poison damage worsens every turn.
	Effect: BadPoison
	Cat: Status
	Acc: 90
	Int: AccuracyBypassEffect
	BypassAccuracy:
	// Poison-type Pokemon bypass accuracy
	return attacking.isType(b, Type.POISON);
	###
*
Ember:
	Acc: 100
	Type: Fire
	Cat: Special
	Desc: The target is attacked with small flames. It may also leave the target with a burn.
	Status: Burned
	EffChance: 10
	Pow: 40
	PP: 25	
*
Growl:
	Acc: 100
	PP: 40
	Cat: Status
	Desc: The user growls in an endearing way, making the opposing team less wary. The foes' Attack stats are lowered.
	StatChange: 1 Attack -1
	Type: Normal
	MoveType: Sound_Based
*
Scratch:
	Pow: 40
	PP: 35
	Acc: 100
	Desc: Hard, pointed, and sharp claws rake the target to inflict damage.
	Type: Normal
	Cat: Physical
*
Vine Whip:
	Pow: 45
	PP: 25
	Acc: 100
	Desc: The target is struck with slender, whiplike vines to inflict damage.
	Type: Grass
	Cat: Physical
*
Sonic Boom:
	Acc: 90
	Type: Normal
	Desc: The target is hit with a destructive shock wave that always inflicts 20 HP damage.
	Cat: Special
	PP: 20
	FixedDamage: 20
*
Smokescreen:
	Type: Normal
	Acc: 100
	PP: 20
	Desc: The user releases an obscuring cloud of smoke or ink. It reduces the target's accuracy.
	Cat: Status
	StatChange: 1 Accuracy -1
*
Take Down:
	Pow: 90
	Acc: 85
	PP: 20
	Type: Normal
	Desc: A reckless, full-body charge attack for slamming into the target. It also damages the user a little.
	Recoil: 4
	Cat: Physical
	Int: RecoilMove
*
Struggle:
	Type: No_Type
	PP: 1
	Pow: 50
	Desc: An attack that is used in desperation only if the user has no PP. It also hurts the user slightly.
	Cat: Physical
	Recoil: 
	Messages.add(new MessageUpdate(user.getName() + " was hurt by recoil!"));
	user.reduceHealth(b, user.getMaxHP()/4, false);
	###
	MoveType: Encoreless, Mimicless, Assistless, Metronomeless
	Int: RecoilMove
*
Razor Leaf:
	Desc: Sharp-edged leaves are launched to slash at the opposing team. Critical hits land more easily.
	PP: 25
	Pow: 55
	Acc: 95
	Type: Grass
	Int: CritStageEffect
	Cat: Physical
	PhysicalContact: False
*
Sweet Scent:
	Desc: A sweet scent that lowers the opposing team's evasiveness. It also lures wild Pok\u00e9mon if used in grass, etc.
	PP: 20
	Cat: Status
	StatChange: 1 Evasion -2
	Type: Normal
	Acc: 100
*
Growth:
	Desc: The user's body grows all at once, raising the Attack and Sp. Atk stats.
	Cat: Status
	SelfTarget: True
	StatChange: 2 Attack 1 Sp_Attack 1
	Type: Normal
	ApplyEffects:
	// Doubles stat changes in the sunlight
	if (b.getWeather().namesies() == EffectNamesies.SUNNY) {
		int[] statChanges = super.statChanges.clone();
		for (int i = 0; i < super.statChanges.length; i++) {
			super.statChanges[i] *= 2;
		}
		
		super.applyEffects(b, user, victim);
		super.statChanges = statChanges;
		return;
	}
	
	super.applyEffects(b, user, victim);
	###
	PP: 20
*
Double-Edge:
	Desc: A reckless, life-risking tackle. It also damages the user by a fairly large amount, however.
	PP: 15
	Pow: 120
	Acc: 100
	Type: Normal
	Cat: Physical
	Recoil: 3
	Int: RecoilMove
*
Seed Bomb:
	Desc: The user slams a barrage of hard-shelled seeds down on the target from above.
	PP: 15
	Pow: 80
	Acc: 100
	Type: Grass
	Cat: Physical	
	PhysicalContact: False
	MoveType: Bomb_Ball
*
Synthesis:
	Desc: The user restores its own HP. The amount of HP regained varies with the weather.
	PP: 5
	Type: Grass
	Cat: Status
	WeatherHeal: True
*
Recover:
	Desc: Restoring its own cells, the user restores its own HP by half of its max HP.
	SelfHealing: 2
	Int: SelfHealingMove
	PP: 10
	Type: Normal
	Cat: Status
*
Dragon Rage:
	Acc: 100
	Desc: This attack hits the target with a shock wave of pure rage. This attack always inflicts 40 HP damage.
	PP: 10
	Cat: Special
	Type: Dragon
	FixedDamage: 40
*
Scary Face:
	Desc: The user frightens the target with a scary face to harshly reduce its Speed stat.
	StatChange: 1 Speed -2
	Type: Normal
	PP: 10
	Acc: 100
	Cat: Status
*
Fire Fang:
	Desc: The user bites with flame-cloaked fangs. It may also make the target flinch or leave it burned.
	PP: 15
	Pow: 65
	Cat: Physical
	Type: Fire
	Acc: 95
	StatusFang: Burned
*
Flame Burst:
	Desc: The user attacks the target with a bursting flame.
	PP: 15
	Pow: 70
	Cat: Special
	Acc: 100
	Type: Fire
*
Bite:
	Desc: The target is bitten with viciously sharp fangs. It may make the target flinch.
	PP: 25
	Pow: 60
	Acc: 100
	Type: Dark
	Cat: Physical
	Effect: Flinch
	EffChance: 30
	MoveType: Biting
*
Slash:
	Desc: The target is attacked with a slash of claws or blades. Critical hits land more easily.
	Pow: 70
	Acc: 100
	PP: 20
	Type: Normal
	Cat: Physical
	Int: CritStageEffect
*
Tail Whip:
	Desc: The user wags its tail cutely, making opposing Pok\u00e9mon less wary and lowering their Defense stat.
	PP: 30
	Type: Normal
	Cat: Status
	Acc: 100
	StatChange: 1 Defense -1
*
Solar Beam:
	Desc: A two-turn attack. The user gathers light, then blasts a bundled beam on the second turn.
	PP: 10
	Pow: 120
	Acc: 100
	Type: Grass
	Cat: Special
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " began taking in sunlight!"
	SemiInv: false
	ChargeFirst: true 
	GetPow: 
	switch (b.getWeather().namesies()) {
		case HAILING:
		case RAINING:
		case SANDSTORM:
			return super.power/2;
		default:
			return super.power;
	}
	###
	IsMultiTurn: 
	return super.isMultiTurn(b, user) && b.getWeather().namesies() != EffectNamesies.SUNNY;
	###
*
Solar Blade:
	Desc: In this two-turn attack, the user gathers light and fills a blade with the light's energy, attacking the target on the next turn.
	Pow: 125
	Acc: 100
	PP: 10
	Type: Grass
	Cat: Physical
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " began taking in sunlight!"
	SemiInv: false
	ChargeFirst: true
	IsMultiTurn: 
	return super.isMultiTurn(b, user) && b.getWeather().namesies() != EffectNamesies.SUNNY;
	###
*
Flamethrower:
	Desc: The target is scorched with an intense blast of fire. It may also leave the target with a burn.
	Type: Fire
	Cat: Special
	PP: 15
	Pow: 90
	Acc: 100
	Status: Burned
	EffChance: 10
*
Fly:
	PP: 15
	Pow: 90
	Acc: 95
	Desc: The user soars, then strikes its target on the second turn. It can also be used for flying to any familiar town.
	Type: Flying
	Cat: Physical
	MoveType: Airborne
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " flew up high!"
	ChargeFirst: true
	SemiInv: true
*
Fire Spin:
	Desc: The target becomes trapped within a fierce vortex of fire that rages for four to five turns.
	PP: 15
	Type: Fire
	Pow: 35
	Acc: 85
	Cat: Special
	Effect: FireSpin
*
Inferno:
	Type: Fire
	PP: 5
	Acc: 50
	Pow: 100
	Status: Burned
	Desc: The user attacks by engulfing the target in an intense fire. It leaves the target with a burn.
	Cat: Special
*
Dragon Claw:
	Desc: The user slashes the target with huge, sharp claws.
	Type: Dragon
	Pow: 80
	Acc: 100
	Cat: Physical
	PP: 15
*
Shadow Claw:
	Type: Ghost
	Pow: 70
	Acc: 100
	Int: CritStageEffect
	PP: 15
	Desc: The user slashes with a sharp claw made from shadows. Critical hits land more easily.
	Cat: Physical
*
Air Slash:
	Type: Flying
	PP: 15
	Cat: Special
	Desc: The user attacks with a blade of air that slices even the sky. It may also make the target flinch.
	Pow: 75
	Acc: 95
	Effect: Flinch
	EffChance: 30
*
Wing Attack:
	PP: 35
	Desc: The target is struck with large, imposing wings spread wide to inflict damage.
	Cat: Physical
	Type: Flying
	Pow: 60
	Acc: 100
*
Heat Wave:
	Pow: 95
	Acc: 90
	PP: 10
	Desc: The user attacks by exhaling hot breath on the opposing team. It may also leave targets with a burn.
	Status: Burned
	EffChance: 10
	Type: Fire
	Cat: Special
*
Flare Blitz:
	Desc: The user cloaks itself in fire and charges at the target. The user sustains serious damage and may leave the target burned.
	Recoil: 3
	Int: RecoilMove
	Status: Burned
	EffChance: 10
	Cat: Physical
	Type: Fire
	PP: 15
	Pow: 120
	Acc: 100
	MoveType: Defrost
*
Flash Cannon:
	Desc: The user gathers all its light energy and releases it at once. It may also lower the target's Sp. Def stat.
	PP: 10
	Pow: 80
	Acc: 100
	Type: Steel
	Cat: Special
	StatChange: 1 Sp_Defense -1
	EffChance: 10
*
Bubble:
	Type: Water
	PP: 30
	Pow: 40
	Acc: 100
	Cat: Special
	Desc: A spray of countless bubbles is jetted at the opposing team. It may also lower the targets' Speed stats.
	StatChange: 1 Speed -1
	EffChance: 10
*
Withdraw:
	Desc: The user withdraws its body into its hard shell, raising its Defense stat.
	Type: Water
	SelfTarget: True
	PP: 40
	StatChange: 1 Defense 1
	Cat: Status
*
Water Gun:
	PP: 25
	Type: Water
	Cat: Special
	Acc: 100
	Pow: 40
	Desc: The target is blasted with a forceful shot of water.
*
Rapid Spin:
	PP: 40
	Pow: 20
	Acc: 100
	Desc: A spin attack that can also eliminate such moves as Bind, Wrap, Leech Seed, and Spikes.
	Type: Normal
	Cat: Physical
	ApplyEffects: 
	RapidSpinRelease.release(b, user);
	###
*
Reflect:
	Desc: A wondrous wall of light is put up to suppress damage from physical attacks for five turns.
	PP: 20
	Type: Psychic
	Cat: Status
	Effect: Reflect
	SelfTarget: True
*
Aurora Veil:
	Desc: This move reduces damage from physical and special moves for five turns. This can be used only in a hailstorm.
	PP: 20
	Type: Ice
	Cat: Status
	Effect: AuroraVeil
	SelfTarget: True
	ApplyError: b.getWeather().namesies() != EffectNamesies.HAILING
*
Spiky Shield:
	Desc: In addition to protecting the user from attacks, this move also damages any attacker who makes direct contact.
	Type: Grass
	PP: 10
	Cat: Status
	ProtectingAttack: SpikyShield
*
Baneful Bunker:
	Desc: In addition to protecting the user from attacks, this move also poisons any attacker that makes direct contact.
	Type: Poison
	PP: 10
	Cat: Status
	ProtectingAttack: BanefulBunker
*
King's Shield:
	Desc: The user takes a defensive stance while it protects itself from damage. It also harshly lowers the Attack stat of any attacker who makes direct contact.
	Type: Steel
	PP: 10
	Cat: Status
	ProtectingAttack: KingsShield
*
Protect:
	Desc: It enables the user to evade all attacks. Its chance of failing rises if it is used in succession.
	PP: 10
	Cat: Status
	Type: Normal
	ProtectingAttack: Protecting
*
Detect:
	Desc: It enables the user to evade all attacks. Its chance of failing rises if it is used in succession.
	PP: 5
	Type: Fighting
	Cat: Status
	ProtectingAttack: Protecting
*
Quick Guard:
	Desc: The user protects itself and its allies from priority moves. If used in succession, its chance of failing rises.
	PP: 15
	Cat: Status
	Type: Fighting
	ProtectingAttack: QuickGuard
*
Endure:
	Desc: The user endures any attack with at least 1 HP. Its chance of failing rises if it is used in succession.
	Type: Normal
	Cat: Status
	PP: 10
	Effect: Bracing
	SelfTarget: True
	MoveType: Assistless, Successive_Decay, Non_Snatchable, Metronomeless
	Priority: 4
*
Water Pulse:
	Desc: The user attacks the target with a pulsing blast of water. It may also confuse the target.
	Effect: Confusion
	Acc: 100
	MoveType: Aura_Pulse
	Pow: 60
	Type: Water
	EffChance: 20
	PP: 20
	Cat: Special
*
ConfusionDamage:
	Pow: 40
	Type: No_Type
	Desc: None
	Int: CritBlockerEffect
	Cat: Physical
	PP: 1
	PhysicalContact: False
*
Confuse Ray:
	Type: Ghost
	Desc: The target is exposed to a sinister ray that triggers confusion.
	Acc: 100
	Cat: Status
	PP: 10
	Effect: Confusion
*
Aqua Tail:
	Desc: The user attacks by swinging its tail as if it were a vicious wave in a raging storm.
	PP: 10
	Type: Water
	Cat: Physical
	Acc: 90
	Pow: 90
*
Skull Bash:
	Desc: The user tucks in its head to raise its Defense in the first turn, then rams the target on the next turn.
	PP: 10
	Pow: 130
	Acc: 100
	Type: Normal
	Cat: Physical
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " lowered its head!"
	ChargeFirst: true
	SemiInv: false
	Charge: 
	user.getAttributes().modifyStage(user, user, 1, Stat.DEFENSE, b, CastSource.ATTACK);
	###
*
Iron Defense:
	Desc: The user hardens its body's surface like iron, sharply raising its Defense stat.
	Cat: Status
	StatChange: 1 Defense 2
	SelfTarget: True
	Type: Steel
	PP: 15
*
Hydro Pump:
	Type: Water
	Desc: The target is blasted by a huge volume of water launched under great pressure.
	PP: 5
	Pow: 110
	Acc: 80
	Cat: Special
*
Rain Dance:
	Desc: The user summons a heavy rain that falls for five turns, powering up Water-type moves.
	Type: Water
	Cat: Status
	PP: 5
	BattleEffect: Raining
*
Sunny Day:
	Desc: The user intensifies the sun for five turns, powering up Fire-type moves.
	PP: 5
	Type: Fire
	Cat: Status
	BattleEffect: Sunny
*
Sandstorm:
	Desc: A five-turn sandstorm is summoned to hurt all combatants except the Rock, Ground, and Steel types.
	PP: 10
	Type: Rock
	Cat: Status
	BattleEffect: Sandstorm
*
Hail:
	Desc: The user summons a hailstorm lasting five turns. It damages all Pok\u00e9mon except the Ice type.
	PP: 10
	Type: Ice
	Cat: Status
	BattleEffect: Hailing
*
Petal Dance:
	Desc: The user attacks the target by scattering petals for two to three turns. The user then becomes confused.
	Acc: 100
	Pow: 120
	PP: 10
	PhysicalContact: True
	Type: Grass
	Cat: Special
	Effect: SelfConfusion
	SelfTarget: True
*
Thrash:
	Desc: The user rampages and attacks for two to three turns. It then becomes confused, however.
	Acc: 100
	Pow: 120
	PP: 10
	Type: Normal
	Cat: Physical
	Effect: SelfConfusion
	SelfTarget: True
*
Hyper Beam:
	Desc: The target is attacked with a powerful beam. The user must rest on the next turn to regain its energy.
	PP: 5
	Cat: Special
	Type: Normal
	Acc: 90
	Pow: 150
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " must recharge!"
	SemiInv: false
	ChargeFirst: false
*
Frenzy Plant:
	Desc: The user slams the target with an enormous tree. The user can't move on the next turn.
	PP: 5
	Cat: Special
	Type: Grass
	Acc: 90
	Pow: 150
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " must recharge!"
	SemiInv: false
	ChargeFirst: false
*
Blast Burn:
	Desc: The target is razed by a fiery explosion. The user can't move on the next turn.
	PP: 5
	Cat: Special
	Type: Fire
	Acc: 90
	Pow: 150
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " must recharge!"
	SemiInv: false
	ChargeFirst: false
*
Hydro Cannon:
	Desc: The target is hit with a watery blast. The user must rest on the next turn, however.
	PP: 5
	Cat: Special
	Type: Water
	Acc: 90
	Pow: 150
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " must recharge!"
	SemiInv: false
	ChargeFirst: false
*
Prismatic Laser:
	Desc: The user shoots powerful lasers using the power of a prism. The user can't move on the next turn.
	PP: 10
	Type: Psychic
	Cat: Special
	Acc: 100
	Pow: 160
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " must recharge!"
	SemiInv: false
	ChargeFirst: false
*
String Shot:
	Desc: The targets are bound with silk blown from the user's mouth. This silk reduces the targets' Speed stat.
	PP: 40
	Type: Bug
	Cat: Status
	StatChange: 1 Speed -2
	Acc: 95
*
Bug Bite:
	Desc: The user bites the target. If the target is holding a Berry, the user eats it and gains its effect.
	PP: 20
	Type: Bug
	Pow: 60
	Acc: 100
	Cat: Physical
	ConsumeBerry: True
*
Harden:
	Type: Normal
	Desc: The user stiffens all the muscles in its body to raise its Defense stat.
	PP: 30
	StatChange: 1 Defense 1
	SelfTarget: True
	Cat: Status
*
Confusion:
	Desc: The target is hit by a weak telekinetic force. It may also leave the target confused.
	Type: Psychic
	Effect: Confusion
	EffChance: 10
	Cat: Special
	Pow: 50
	Acc: 100
	PP: 25
*
Stun Spore:
	Desc: The user scatters a cloud of paralyzing powder. It may leave the target with paralysis.
	Type: Grass
	PP: 30
	Acc: 75
	Status: Paralyzed
	Cat: Status
	MoveType: Powder
*
Gust:
	Desc: A gust of wind is whipped up by wings and launched at the target to inflict damage.
	Type: Flying
	Cat: Special
	Pow: 40
	Acc: 100
	PP: 35
	HitFly: True
*
Supersonic:
	Desc: The user generates odd sound waves from its body. It may confuse the target.
	PP: 20
	Acc: 55
	MoveType: Sound_Based
	Type: Normal
	Cat: Status
	Effect: Confusion
*
Psybeam:
	Desc: The target is attacked with a peculiar ray. It may also cause confusion.
	PP: 20
	Pow: 65
	Acc: 100
	Type: Psychic
	Cat: Special
	Effect: Confusion
	EffChance: 10
*
Silver Wind:
	Desc: The target is attacked with powdery scales blown by wind. It may also raise all the user's stats.
	PP: 5
	Pow: 60
	Acc: 100
	Cat: Special
	Type: Bug
	StatChange: 7 Attack 1 Defense 1 Sp_Attack 1 Sp_Defense 1 Speed 1 Accuracy 1 Evasion 1
	SelfTarget: True
	EffChance: 10
*
Tailwind:
	Desc: The user whips up a turbulent whirlwind that ups the Speed of all party Pok\u00e9mon for four turns.
	Effect: Tailwind
	SelfTarget: True
	Type: Flying
	Cat: Status
	PP: 30
*
Morning Sun:
	Desc: The user restores its own HP. The amount of HP regained varies with the weather.
	PP: 5
	WeatherHeal: True
	Type: Normal
	Cat: Status
*
Safeguard:
	Desc: The user creates a protective field that prevents status problems for five turns.
	PP: 25
	Type: Normal
	Cat: Status
	Effect: Safeguard
	SelfTarget: True
*
Captivate:
	Desc: If it is the opposite gender of the user, the target is charmed into harshly lowering its Sp. Atk stat.
	Type: Normal
	Cat: Status
	Acc: 100
	PP: 20
	StatChange: 1 Sp_attack -2
	ApplyEffects:
	// Captivate does not work on members of the same sex or on victims with the Oblivious ability
	if (victim.hasAbility(AbilityNamesies.OBLIVIOUS)) {
		Messages.add(new MessageUpdate(victim.getName() + "'s " + victim.getAbility().getName() + " prevents it from being captivated!"));
	}
	else if (!Gender.oppositeGenders(user, victim)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
	} 
	else {
		super.applyEffects(b, user, victim);
	}
	###
*
Bug Buzz:
	Desc: The user vibrates its wings to generate a damaging sound wave. It may also lower the target's Sp. Def stat.
	PP: 10
	Type: Bug
	Cat: Special
	Pow: 90
	Acc: 100
	StatChange: 1 Sp_Defense -1
	EffChance: 10
	MoveType: Sound_Based
*
Quiver Dance:
	Desc: The user lightly performs a beautiful, mystic dance. It boosts the user's Sp. Atk, Sp. Def, and Speed stats.
	PP: 20
	Type: Bug
	Cat: Status
	SelfTarget: True
	StatChange: 3 Sp_Attack 1 Sp_Defense 1 Speed 1
*
Encore:
	Desc: The user compels the target to keep using only the move it last used for three turns.
	PP: 5
	Type: Normal
	Cat: Status
	Acc: 100
	Effect: Encore
	MoveType: Encoreless, Substitute_Piercing
*
Poison Sting:
	Desc: The user stabs the target with a poisonous stinger. This may also poison the target.
	Type: Poison
	PhysicalContact: False
	Status: Poisoned
	EffChance: 30
	Acc: 100
	Pow: 15
	PP: 35
	Cat: Physical
*
Fury Attack:
	Desc: The target is jabbed repeatedly with a horn or beak two to five times in a row.
	PP: 20
	MultiStrike: 2 5
	Cat: Physical
	Type: Normal
	Pow: 15
	Acc: 85
*
False Swipe:
	Desc: A restrained attack that prevents the target from fainting. The target is left with at least 1 HP.
	PP: 40
	Pow: 40
	Cat: Physical
	Acc: 100
	Type: Normal
	ApplyDamage: 
	o.addEffect((PokemonEffect)EffectNamesies.BRACING.getEffect());
	super.applyDamage(me, o, b);
	o.getAttributes().removeEffect(EffectNamesies.BRACING);
	###
*
Disable:
	Desc: For four turns, this move prevents the target from using the move it last used.
	PP: 20
	Acc: 100
	Type: Normal
	Cat: Status
	Effect: Disable
	MoveType: Substitute_Piercing
*
Focus Energy:
	Desc: The user takes a deep breath and focuses so that critical hits land more easily.
	PP: 30
	Type: Normal
	Cat: Status
	SelfTarget: True
	Effect: RaiseCrits
*
Twineedle:
	Desc: The user damages the target twice in succession by jabbing it with two spikes. It may also poison the target.
	PP: 20
	MultiStrike: 2 2
	Cat: Physical
	Type: Bug
	Status: Poisoned
	EffChance: 20
	PhysicalContact: False
	Pow: 25
	Acc: 100
*
Rage:
	Desc: As long as this move is in use, the power of rage raises the Attack stat each time the user is hit in battle.
	PP: 20
	Pow: 20
	Acc: 100
	Cat: Physical
	Type: Normal
	GetPow:
	// TODO: Update for Gen 5 -- Increase attack when hit while using Rage
	return super.power*me.getAttributes().getCount();
	###
*
Pursuit:
	Desc: An attack move that inflicts double damage if used on a target that is switching out of battle.
	PP: 20
	Pow: 40
	Type: Dark
	Acc: 100
	Cat: Physical
	GetPow:
	// TODO: Once the Begin- shit is resolved, then this should be combined there
	Team trainer = b.getTrainer(o.isPlayer());
	if (trainer instanceof Trainer && ((Trainer)trainer).getAction() == Action.SWITCH) {
		return super.power*2;
	}
	
	return super.power;
	###
	GetPriority: 
	Team trainer = b.getTrainer(!me.isPlayer()); // TODO: Make switching occur at its priority
	if (trainer instanceof Trainer && ((Trainer)trainer).getAction() == Action.SWITCH) return 7;
	return super.priority;
	###
*
Toxic Spikes:
	Desc: The user lays a trap of poison spikes at the opponent's feet. They poison opponents that switch into battle.
	PP: 20
	Type: Poison
	Cat: Status
	MoveType: Field
	Effect: ToxicSpikes
*
Pin Missile:
	Desc: Sharp spikes are shot at the target in rapid succession. They hit two to five times in a row.
	PP: 20
	Pow: 25
	Acc: 95
	MultiStrike: 2 5
	Type: Bug
	Cat: Physical
	PhysicalContact: False
*
Agility:
	Desc: The user relaxes and lightens its body to move faster. It sharply boosts the Speed stat.
	PP: 30
	Type: Psychic
	Cat: Status
	StatChange: 1 Speed 2
	SelfTarget: True
*
Assurance:
	Type: Dark
	Desc: If the target has already taken some damage in the same turn, this attack's power is doubled.
	PP: 10
	Cat: Physical
	Pow: 60
	Acc: 100
	DoublePowerCondition: me.getAttributes().hasTakenDamage()
*
Poison Jab:
	Desc: The target is stabbed with a tentacle or arm steeped in poison. It may also poison the target.
	PP: 20
	Pow: 80
	Acc: 100
	Type: Poison
	Cat: Physical
	Status: Poisoned
	EffChance: 30
	MoveType: Punching
*
Endeavor:
	Desc: An attack move that cuts down the target's HP to equal the user's HP.
	Type: Normal
	Cat: Physical
	PP: 5
	Acc: 100
	ApplyError: me.getHP() >= o.getHP()
	FixedDamage: o.getHP() - me.getHP()
*
Sand Attack:
	Desc: Sand is hurled in the target's face, reducing its accuracy.
	PP: 15
	Acc: 100
	Cat: Status
	Type: Ground
	StatChange: 1 Accuracy -1
*
Quick Attack:
	Desc: The user lunges at the target at a speed that makes it almost invisible. It is sure to strike first.
	PP: 30
	Pow: 40
	Priority: 1
	Cat: Physical
	Type: Normal
	Acc: 100
*
Twister:
	Desc: The user whips up a vicious tornado to tear at the opposing team. It may also make targets flinch.
	Type: Dragon
	Cat: Special
	PP: 20
	Pow: 40
	Acc: 100
	Effect: Flinch
	EffChance: 20
	HitFly: True
*
Feather Dance:
	Desc: The user covers the target's body with a mass of down that harshly lowers its Attack stat.
	PP: 15
	Type: Flying
	Cat: Status
	Acc: 100
	StatChange: 1 Attack -2
*
Roost:
	Desc: The user lands and rests its body. It restores the user's HP by up to half of its max HP.
	PP: 10
	SelfHealing: 
	healFail = false;
	victim.healHealthFraction(1/2.0);
	###
	Int: SelfHealingMove
	Type: Flying
	Cat: Status
	PrintCast: False
	RemoveType: Flying
	ApplyEffects: 
	healFail = true;
	super.applyEffects(b, user, victim);
	if (!healFail && getType(b, user, victim) != null) {
		EffectNamesies.CHANGE_TYPE.getEffect().cast(b, user, victim, CastSource.ATTACK, super.printCast);
		user.getEffect(EffectNamesies.CHANGE_TYPE).setTurns(1);
	}
	###
	Field: 
	private boolean healFail;
	###
*
Thunder Shock:
	PP: 30
	Desc: A jolt of electricity is hurled at the target to inflict damage. It may also leave the target with paralysis.
	Type: Electric
	Acc: 100
	Cat: Special
	Pow: 40
	Status: Paralyzed
	EffChance: 10
*
Mirror Move:
	Desc: The user counters the target by mimicking the target's last move.
	PP: 20
	Type: Flying
	Cat: Status
	MirrorMove: True
*
Hurricane:
	Desc: The user attacks by wrapping its opponent in a fierce wind that flies up into the sky. It may also confuse the target.
	Pow: 110
	Acc: 70
	PP: 10
	Type: Flying
	Cat: Special
	StormyMove: True
	Effect: Confusion
	EffChance: 30
*
Hyper Fang:
	Desc: The user bites hard on the target with its sharp front fangs. It may also make the target flinch.
	PP: 15
	Pow: 80
	Cat: Physical
	Acc: 90
	MoveType: Biting
	Type: Normal
	Effect: Flinch
	EffChance: 10
*
Sucker Punch:
	Desc: This move enables the user to attack first. It fails if the foe is not readying an attack, however.
	PP: 5
	Pow: 70
	Acc: 100
	Cat: Physical
	Priority: 1
	Type: Dark
	ApplyError: o.getMove().getAttack().isStatusMove()
*
Crunch:
	Desc: The user crunches up the foe with sharp fangs. It may also lower the target's Defense stat.
	PP: 15
	Pow: 80
	Cat: Physical
	Acc: 100
	Type: Dark
	StatChange: 1 Defense -1
	EffChance: 20
	MoveType: Biting
*
Super Fang:
	Desc: The user chomps hard on the foe with its sharp front fangs. It cuts the target's HP to half.
	PP: 10
	Acc: 90
	MoveType: Biting
	Type: Normal
	Cat: Physical
	FixedDamage: (int)Math.ceil(o.getHP()/2.0)
*
Nature's Madness:
	Desc: The user hits the target with the force of nature. It halves the target's HP.
	PP: 10
	Type: Fairy
	Cat: Special
	FixedDamage: (int)Math.ceil(o.getHP()/2.0)
	Acc: 90
*
Swords Dance:
	Desc: A frenetic dance to uplift the fighting spirit. It sharply raises the user's Attack stat.
	PP: 30
	Type: Normal
	Cat: Status
	SelfTarget: True
	StatChange: 1 Attack 2
*
Peck:
	Desc: The foe is jabbed with a sharply pointed beak or horn.
	PP:35
	Pow: 35
	Acc: 100
	Cat: Physical
	Type: Flying
*
Leer:
	Desc: The foe is given an intimidating leer with sharp eyes. The target's Defense stat is reduced.
	PP: 30
	Acc: 100
	Cat: Status
	Type: Normal
	StatChange: 1 Defense -1
*
Aerial Ace:
	Desc: The user confounds the foe with speed, then slashes. The attack lands without fail.
	Type: Flying
	Cat: Physical
	Pow: 60
	PP: 20
*
Drill Peck:
	Desc: A corkscrewing attack with the sharp beak acting as a drill.
	PP: 20
	Type: Flying
	Cat: Physical
	Acc: 100
	Pow: 80
*
Pluck:
	Desc: The user pecks the foe. If the foe is holding a Berry, the user plucks it and gains its effect.
	PP: 20
	Pow: 60
	Acc: 100
	Cat: Physical
	Type: Flying
	ConsumeBerry: True
*
Drill Run:
	Desc: The user crashes into its target while rotating its body like a drill. Critical hits land more easily.
	Pow: 80
	Acc: 95
	Type: Ground
	Cat: Physical
	PP: 10
	Int: CritStageEffect
*
Wrap:
	Desc: A long body or vines are used to wrap and squeeze the target for four to five turns.
	PP: 20
	Pow: 15
	Acc: 90
	Type: Normal
	Cat: Physical
	Effect: Wrapped
*
Glare:
	Desc: The user intimidates the target with the pattern on its belly to cause paralysis.
	PP: 30
	Type: Normal
	Cat: Status
	Acc: 100
	Status: Paralyzed
*
Screech:
	Desc: An earsplitting screech harshly reduces the target's Defense stat.
	PP: 40
	Acc: 85
	Type: Normal
	Cat: Status
	StatChange: 1 Defense -2
	MoveType: Sound_Based
*
Acid:
	Desc: The opposing team is attacked with a spray of harsh acid. The acid may also lower the targets' Sp. Def stats.
	PP: 30
	Pow: 40
	Acc: 100
	Cat: Special
	Type: Poison
	StatChange: 1 Sp_Defense -1
	EffChance: 10
*
Stockpile:
	Desc: The user charges up power and raises both its Defense and Sp. Def. The move can be used three times.
	PP: 20
	Cat: Status
	Type: Normal
	SelfTarget: True
	Effect: Stockpile
*
Spit Up:
	Desc: The power stored using the move Stockpile is released at once in an attack. The more power is stored, the greater the damage.
	PP: 10
	Type: Normal
	Cat: Special
	Acc: 100
	Apply: 
	PokemonEffect stockpile = me.getEffect(EffectNamesies.STOCKPILE);
	if (stockpile == null) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}

	super.apply(me, o, b);
	
	// Stockpile ends after Spit up is used
	stockpile.deactivate();
	###
	GetPow: 
	PokemonEffect stockpile = me.getEffect(EffectNamesies.STOCKPILE);
			
	// TODO: Look at this again
	// I really don't like this, because there's no way this value should actually be getting used -- but it's getting set now always even if the attack isn't going to work and we don't want a NullPointerException
	if (stockpile == null) {
		return super.setPower(b, me, o);
	}
	
	int turns = stockpile.getTurns();
	if (turns <= 0) {
		Global.error("Stockpile turns should never be nonpositive");
	}
	
	// Max power is 300
	return (int)Math.min(turns, 3)*100;
	###
*
Swallow:
	Desc: The power stored using the move Stockpile is absorbed by the user to heal its HP. Storing more power heals more HP.
	PP: 10
	Cat: Status
	Int: SelfHealingMove
	SelfHealing: 
	PokemonEffect stockpile = user.getEffect(EffectNamesies.STOCKPILE);
	if (stockpile == null) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	if (stockpile.getTurns() <= 0) {
		Global.error("Stockpile turns should never be nonpositive");
	}
	
	// TODO: This doesn't need to be in a switch statement
	// Heals differently based on number of stockpile turns
	switch (stockpile.getTurns()) {
		case 1:
			victim.healHealthFraction(1/4.0);
			break;
		case 2:
			victim.healHealthFraction(1/2.0);
			break;
		default:
			victim.healHealthFraction(1);
			break;
	}
	
	// Stockpile ends after Swallow is used
	stockpile.deactivate();
	###
	Type: Normal
*
Acid Spray:
	Desc: The user spits fluid that works to melt the target. This harshly reduces the target's Sp. Def stat.
	PP: 20
	Pow: 40
	Acc: 100
	Cat: Special
	Type: Poison
	StatChange: 1 Sp_Defense -2
	MoveType: Bomb_Ball
*
Mud Bomb:
	Desc: The user launches a hard-packed mud ball to attack. It may also lower the target's accuracy.
	PP: 10
	Pow: 65
	Acc: 85
	Cat: Special
	Type: Ground
	StatChange: 1 Accuracy -1
	EffChance: 30
	MoveType: Bomb_Ball
*
Haze:
	Desc: The user creates a haze that eliminates every stat change among all the Pok\u00e9mon engaged in battle.
	PP: 30
	Type: Ice
	Cat: Status
	EliminateStatChanges: True
	MoveType: Substitute_Piercing, No_Magic_Coat, Field
*
Coil:
	Desc: The user coils up and concentrates. This raises its Attack and Defense stats as well as its accuracy.
	PP: 20
	Type: Poison
	Cat: Status
	SelfTarget: True
	StatChange: 3 Attack 1 Defense 1 Accuracy 1
*
Gunk Shot:
	Desc: The user shoots filthy garbage at the target to attack. It may also poison the target.
	PP: 5
	Pow: 120
	Acc: 80
	PhysicalContact: False
	Cat: Physical
	Status: Poisoned
	EffChance: 30
	Type: Poison
*
Ice Fang:
	Desc: The user bites with cold-infused fangs. It may also make the target flinch or leave it frozen.
	PP: 15
	Pow: 65
	Cat: Physical
	Type: Ice
	StatusFang: Frozen
	Acc: 95
*
Thunder Fang:
	Desc: The user bites with electrified fangs. It may also make the target flinch or leave it with paralysis.
	PP: 15
	Pow: 65
	Cat: Physical
	Type: Electric
	StatusFang: Paralyzed
	Acc: 95
*
Electro Ball:
	Desc: The user hurls an electric orb at the target. The faster the user is than the target, the greater the damage.
	StatRatio: Speed o me
	Acc: 100
	Type: Electric
	Cat: Special
	PP: 10
	MoveType: Bomb_Ball
*
Double Team:
	Desc: By moving rapidly, the user makes illusory copies of itself to raise its evasiveness.
	PP: 15
	Type: Normal
	Cat: Status
	SelfTarget: True
	StatChange: 1 Evasion 1
*
Slam:
	Desc: The target is slammed with a long tail, vines, etc., to inflict damage.
	Pow: 80
	Acc: 75
	PP: 20
	Type: Normal
	Cat: Physical
*
Thunderbolt:
	Desc: A strong electric blast is loosed at the target. It may also leave the target with paralysis.
	PP: 15
	Pow: 95
	Acc: 100
	Cat: Special
	Type: Electric
	Status: Paralyzed
	EffChance: 10
*
Feint:
	Desc: An attack that hits a target using Protect or Detect. It also lifts the effects of those moves.
	PP: 10
	Pow: 30
	Acc: 100
	Cat: Physical
	MoveType: Assistless, Protect_Piercing, Metronomeless
	Type: Normal
	Priority: 2
	PhysicalContact: False
*
Discharge:
	Desc: A flare of electricity is loosed to strike the area around the user. It may also cause paralysis.
	PP: 15
	Pow: 80
	Type: Electric
	Cat: Special
	Acc: 100
	Status: Paralyzed
	EffChance: 30
*
Light Screen:
	Desc: A wondrous wall of light is put up to suppress damage from special attacks for five turns.
	PP: 30
	Type: Psychic
	Cat: Status
	Effect: LightScreen
	SelfTarget: True
*
Thunder:
	Desc: A wicked thunderbolt is dropped on the target to inflict damage. It may also leave the target with paralysis.
	PP: 10
	Type: Electric
	Cat: Special
	Pow: 110
	Acc: 70
	StormyMove: True
	Status: Paralyzed
	EffChance: 30
*
Defense Curl:
	Desc: The user curls up to conceal weak spots and raise its Defense stat.
	Type: Normal
	SelfTarget: True
	Effect: UsedDefenseCurl
	Cat: Status
	PP: 40
	StatChange: 1 Defense 1
*
Swift:
	Desc: Star-shaped rays are shot at the opposing team. This attack never misses.
	Pow: 60
	Type: Normal
	PP: 20
	Cat: Special
*
Fury Swipes:
	Desc: The target is raked with sharp claws or scythes for two to five times in quick succession.
	MultiStrike: 2 5
	PP: 15
	Pow: 18
	Cat: Physical
	Acc: 80
	Type: Normal
*
Rollout:
	Desc: The user continually rolls into the target over five turns. It becomes stronger each time it hits.
	PP: 20
	Pow: 30
	Acc: 90
	Cat: Physical
	Type: Rock
	GetPow: 
	// TODO: Combine these types of moves
	return super.power*(int)Math.min(me.getAttributes().getCount(), 5)*(me.hasEffect(EffectNamesies.USED_DEFENSE_CURL) ? 2 : 1);
	###
*
Fury Cutter:
	Desc: The target is slashed with scythes or claws. Its power increases if it hits in succession.
	PP: 20
	Acc: 95
	Cat: Physical
	Type: Bug
	Pow: 40
	GetPow: 
	return super.power*(int)Math.min(5, me.getAttributes().getCount());
	###
*
Sand Tomb:
	Desc: The user traps the target inside a harshly raging sandstorm for four to five turns.
	PP: 15
	Pow: 35
	Acc: 85
	Cat: Physical
	Type: Ground
	Effect: SandTomb
	PhysicalContact: False
*
Gyro Ball:
	Desc: The user tackles the target with a high-speed spin. The slower the user, the greater the damage.
	PP: 5
	Acc: 100
	Cat: Physical
	Type: Steel
	MoveType: Bomb_Ball
	GetPow: 
	return (int)Math.min(150, 25.0*Stat.getStat(Stat.SPEED, o, me, b)/Stat.getStat(Stat.SPEED, me, o, b));
	###
*
Crush Claw:
	Desc: The user slashes the target with hard and sharp claws. It may also lower the target's Defense.
	PP: 10
	Pow: 75
	Type: Normal
	Acc:  95
	Cat: Physical
	StatChange: 1 Defense -1
	EffChance: 50
*
Double Kick:
	Desc: The target is quickly kicked twice in succession using both feet.
	PP: 30
	Pow: 30
	Acc: 100
	MultiStrike: 2 2
	Type: Fighting
	Cat: Physical
*
Poison Tail:
	Desc: The user hits the target with its tail. It may also poison the target. Critical hits land more easily.
	PP: 25
	Pow: 50
	Int: CritStageEffect
	Acc: 100
	Cat: Physical
	Type: Poison
	Status: Poisoned
	EffChance: 10
*
Flatter:
	Desc: Flattery is used to confuse the target. However, it also raises the target's Sp. Atk stat.
	PP: 15
	Type: Dark
	Cat: Status
	Acc: 100
	Effect: Confusion
	StatChange: 1 Sp_Attack 2
*
Poison Fang:
	Desc: The user bites the target with toxic fangs. It may also leave the target badly poisoned.
	PP: 15
	Pow: 50
	Acc: 100
	Cat: Physical
	Type: Poison
	MoveType: Biting
	Effect: BadPoison
	EffChance: 50
*
Chip Away:
	Desc: Looking for an opening, the user strikes continually. The target's stat changes don't affect this attack's damage.
	PP: 20
	Pow: 70
	Cat: Physical
	Type: Normal
	Int: OpponentIgnoreStageEffect
	IgnoreStage:
	return !s.user();
	###
	Acc: 100
*
Body Slam:
	Desc: The user drops onto the target with its full body weight. It may also leave the target with paralysis.
	PP: 15
	Pow: 85
	Acc: 100
	Cat: Physical
	Type: Normal
	Status: Paralyzed
	EffChance: 30
	HitMinimize: True
*
Earth Power:
	Desc: The user makes the ground under the target erupt with power. It may also lower the target's Sp. Def.
	PP: 10
	Pow: 90
	Cat: Special
	Acc: 100
	StatChange: 1 Sp_Defense -1
	EffChance: 10
	Type: Ground
*
Superpower:
	Desc: The user attacks the target with great power. However, it also lowers the user's Attack and Defense.
	SelfTarget: True
	StatChange: 2 Attack -1 Defense -1
	Pow: 120
	Type: Fighting
	Acc: 100
	Cat: Physical
	PP: 5
*
Horn Attack:
	Desc: The target is jabbed with a sharply pointed horn to inflict damage.
	PP: 25
	Pow: 65
	Acc: 100
	Cat: Physical
	Type: Normal
*
Horn Drill:
	Desc: The user stabs the target with a horn that rotates like a drill. If it hits, the target faints instantly.
	PP: 5
	Acc: 30
	Type: Normal
	Cat: Physical
	OHKO: True
*
Megahorn:
	Desc: Using its tough and impressive horn, the user rams into the target with no letup.
	PP: 10
	Type: Bug
	Cat: Physical
	Pow: 120
	Acc: 85
*
Pound:
	Desc: The target is physically pounded with a long tail or a foreleg, etc.
	PP: 35
	Pow: 40
	Acc: 100
	Cat: Physical
	Type: Normal
*
Sing:
	Desc: A soothing lullaby is sung in a calming voice that puts the target into a deep slumber.
	Acc: 55
	PP: 15
	Status: Asleep
	Type: Normal
	Cat: Status
	MoveType: Sound_Based
*
Double Slap:
	Desc: The target is slapped repeatedly, back and forth, two to five times in a row.
	MultiStrike: 2 5
	Type: Normal
	Cat: Physical
	Acc: 85
	Pow: 15
	PP: 10
*
Wish:
	Effect: Wish
	SelfTarget: True
	Desc: One turn after this move is used, the target's HP is restored by half the user's maximum HP.
	PP: 10
	Cat: Status
	Type: Normal
*
Minimize:
	Desc: The user compresses its body to make itself look smaller, which sharply raises its evasiveness.
	StatChange: 1 Evasion 2
	SelfTarget: True
	PP: 20
	Cat: Status
	Type: Normal
	Effect: UsedMinimize
*
Wake-Up Slap:
	Desc: This attack inflicts big damage on a sleeping target. It also wakes the target up, however.
	PP: 10
	Pow: 70
	Acc: 100
	Cat: Physical
	Type: Fighting
	StatusCureMove: Asleep
*
Cosmic Power:
	Desc: The user absorbs a mystical power from space to raise its Defense and Sp. Def stats.
	PP: 20
	Type: Psychic
	Cat: Status
	SelfTarget: True
	StatChange: 2 Defense 1 Sp_Defense 1
*
Lucky Chant:
	Desc: The user chants an incantation toward the sky, preventing opposing Pok\u00e9mon from landing critical hits.
	PP: 30
	Type: Normal
	Cat: Status
	Effect: LuckyChant
	SelfTarget: True
*
Metronome:
	MoveType: Sleep_Talk_Fail, Mimicless, Assistless, Metronomeless, No_Magic_Coat
	Apply: 
	AttackNamesies[] attackNames = AttackNamesies.values();

	int index;
	Attack metronomeMove;

	do {
		index = RandomUtils.getRandomIndex(attackNames);
		metronomeMove = attackNames[index].getAttack();
	} while (metronomeMove.isMoveType(MoveType.METRONOMELESS));
	
	me.callNewMove(b, o, new Move(metronomeMove));
	###
	Desc: The user waggles a finger and stimulates its brain into randomly using nearly any move.
	PP: 10
	Type: Normal
	Cat: Status
*
Gravity:
	Desc: Gravity is intensified for five turns, making moves involving flying unusable and negating Levitate.
	PP: 5
	Type: Psychic
	Cat: Status
	BattleEffect: Gravity
*
Moonlight:
	WeatherHeal: True
	PP: 5
	Type: Fairy
	Desc: The user restores its own HP. The amount of HP regained varies with the weather.
	Cat: Status
*
Stored Power:
	Pow: 20
	Desc: The user attacks the target with stored power. The more the user's stats are raised, the greater the damage.
	Type: Psychic
	Cat: Special
	Acc: 100
	PP: 10
	GetPow: 
	return super.power*me.getAttributes().totalStatIncreases();
	###
*
Power Trip:
	Pow: 20
	Desc: The user boasts its strength and attacks the target. The more the user's stats are raised, the greater the move's power.
	Type: Dark
	Cat: Physical
	Acc: 100
	PP: 10
	GetPow: 
	return super.power*me.getAttributes().totalStatIncreases();
	###
*
Mimic: 
	Desc: The user copies the target's last move. The move can be used during battle until the Pok\u00e9mon is switched out.
	PP: 10
	Type: Normal
	Cat: Status
	Effect: Mimic
	MoveType: Encoreless, Assistless, Metronomeless, Non_Snatchable
	SelfTarget: True
*
Meteor Mash:
	Desc: The target is hit with a hard punch fired like a meteor. It may also raise the user's Attack.
	PP: 10
	Pow: 90
	Acc: 90
	Type: Steel
	MoveType: Punching
	Cat: Physical
	SelfTarget: True
	StatChange: 1 Attack 1
	EffChance: 20
*
Imprison:
	Desc: If the opponents know any move also known by the user, the opponents are prevented from using it.
	PP: 10
	Type: Psychic
	Cat: Status
	Effect: Imprison
	MoveType: No_Magic_Coat, Protect_Piercing, Substitute_Piercing
*
Will-O-Wisp:
	Desc: The user shoots a sinister, bluish-white flame at the target to inflict a burn.
	Status: Burned
	PP: 15
	Acc: 85
	Type: Fire
	Cat: Status
*
Payback:
	Desc: If the user moves after the target, this attack's power will be doubled.
	PP: 10
	Acc: 100
	Pow: 50
	Type: Dark
	Cat: Physical
	DoublePowerCondition: !b.isFirstAttack()
*
Extrasensory:
	Desc: The user attacks with an odd, unseeable power. It may also make the target flinch.
	PP: 20
	Type: Psychic
	Cat: Special
	Acc: 100
	Pow: 80
	Effect: Flinch
	EffChance: 10
*
Fire Blast:
	Desc: The target is attacked with an intense blast of all-consuming fire. It may also leave the target with a burn.
	PP: 5
	Pow: 110
	Acc: 85
	Type: Fire
	Status: Burned
	EffChance: 10
	Cat: Special
*
Nasty Plot:
	Desc: The user stimulates its brain by thinking bad thoughts. It sharply raises the user's Sp. Atk.
	PP: 20
	Cat: Status
	Type: Dark
	StatChange: 1 Sp_Attack 2
	SelfTarget: True
*
Round:
	Desc: The user attacks the target with a song.
	PP: 15
	Pow: 60
	Acc: 100
	Cat: Special
	Type: Normal
	MoveType: Sound_Based
*
Rest:
	Desc: The user goes to sleep for two turns. It fully restores the user's HP and heals any status problem.
	PP: 10
	Type: Psychic
	Cat: Status
	Int: SelfHealingMove
	SelfHealing: 1
	Status: Asleep
	ApplyEffects: 
	if (victim.fullHealth() || !Status.appliesWithoutStatusCheck(StatusCondition.ASLEEP, b, victim, victim)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	victim.removeStatus();
	super.applyEffects(b, user, victim);
	victim.getStatus().setTurns(3);
	###
*
Hyper Voice:
	Desc: The user lets loose a horribly echoing shout with the power to inflict damage.
	Pow: 90
	Acc: 100
	Cat: Special
	Type: Normal
	PP: 10
	MoveType: Sound_Based
*
Leech Life:
	Int: SapHealthEffect
	Cat: Physical
	Acc: 100
	Pow: 80
	PP: 10
	Type: Bug
	Desc: The user drains the target's blood. The user's HP is restored by half the damage taken by the target.
*
Astonish:
	Desc: The user attacks the target while shouting in a startling fashion. It may also make the target flinch.
	PP: 15
	Pow: 30
	Acc: 100
	Cat: Physical
	Type: Ghost
	Effect: Flinch
	EffChance: 30
*
Air Cutter:
	Desc: The user launches razor-like wind to slash the opposing team. Critical hits land more easily.
	PP: 25
	Pow: 60
	Acc: 95
	Int: CritStageEffect
	Cat: Special
	Type: Flying
*
Mean Look:
	Desc: The user pins the target with a dark, arresting look. The target becomes unable to flee.
	PP: 5
	Type: Normal
	Cat: Status
	Effect: Trapped
*
Acrobatics:
	Desc: The user nimbly strikes the target. If the user is not holding an item, this attack inflicts massive damage.
	PP: 15
	Pow: 55
	Acc: 100
	Cat: Physical
	Type: Flying
	DoublePowerCondition: !me.isHoldingItem(b)
*
Absorb:
	Desc: A nutrient-draining attack. The user's HP is restored by half the damage taken by the target.
	PP: 25
	Pow: 20
	Cat: Special
	Acc: 100
	Type: Grass
	Int: SapHealthEffect
*
Mega Drain:
	PP: 15
	Desc: A nutrient-draining attack. The user's HP is restored by half the damage taken by the target.
	Int: SapHealthEffect
	Type: Grass
	Pow: 40
	Acc: 100
	Cat: Special
*
Natural Gift:
	PP: 15
	GetPow: 
	return ((Berry)me.getHeldItem(b)).naturalGiftPower();
	###
	GetType: 
	Item i = user.getHeldItem(b);
	if (i instanceof Berry) {
		return ((Berry)i).naturalGiftType();
	}
	
	return super.type;
	###
	Desc: The user draws power to attack by using its held Berry. The Berry determines its type and power.
	Cat: Physical
	PhysicalContact: False
	Type: Normal
	Acc: 100
	ApplyEffects: 
	// This is so fucking stupid that it consumes the Berry upon use, like srsly what the fuck is the fucking point of this move
	if (user.getHeldItem(b) instanceof Berry) {
		user.consumeItem(b);
	}
	###
	ApplyError: !(me.getHeldItem(b) instanceof Berry)
*
Giga Drain:
	Desc: A nutrient-draining attack. The user's HP is restored by half the damage taken by the target.
	Int: SapHealthEffect
	Type: Grass
	Pow: 75
	Acc: 100
	Cat: Special
	PP: 10
*
Aromatherapy:
	HealPartyStatus: True
	MoveType: Healing
	PP: 5
	Type: Grass
	Cat: Status
	Desc: The user releases a soothing scent that heals all status problems affecting the user's party.
*
Spore:
	PP: 15
	Acc: 100
	Desc: The user scatters bursts of spores that induce sleep.
	Status: Asleep
	Type: Grass
	Cat: Status
	MoveType: Powder
*
Cross Poison:
	Desc: A slashing attack with a poisonous blade that may also leave the target poisoned. Critical hits land more easily.
	Int: CritStageEffect
	Status: Poisoned
	EffChance: 10
	Type: Poison
	Cat: Physical
	Pow: 70
	Acc: 100
	PP: 20
*
X-Scissor:
	Desc: The user slashes at the target by crossing its scythes or claws as if they were a pair of scissors.
	PP: 15
	Type: Bug
	Cat: Physical
	Pow: 80
	Acc: 100
*
Foresight:
	Desc: Enables a Ghost-type target to be hit by Normal and Fighting type attacks. It also enables an evasive target to be hit.
	PP: 40
	Type: Normal
	Cat: Status
	ForesightMove: Foresight
*
Odor Sleuth:
	Desc: Enables a Ghost-type target to be hit with Normal- and Fighting-type attacks. It also enables an evasive target to be hit.
	PP: 40
	Type: Normal
	Cat: Status
	ForesightMove: Foresight
*
Miracle Eye:
	Desc: Enables a Dark-type target to be hit by Psychic-type attacks. It also enables an evasive target to be hit.
	PP: 40
	Type: Psychic
	Cat: Status
	ForesightMove: MiracleEye
*
Howl:
	Desc: The user howls loudly to raise its spirit, boosting its Attack stat.
	PP: 40
	StatChange: 1 Attack 1
	SelfTarget: True
	Type: Normal
	Cat: Status
*
Signal Beam:
	Desc: The user attacks with a sinister beam of light. It may also confuse the target.
	PP: 15
	Type: Bug
	Cat: Special
	Acc: 100
	Pow: 75
	Effect: Confusion
	EffChance: 10
*
Zen Headbutt:
	Desc: The user focuses its willpower to its head and attacks the target. It may also make the target flinch.
	PP: 15
	Pow: 80
	Cat: Physical
	Type: Psychic
	Effect: Flinch
	EffChance: 20
	Acc: 90
*
Psychic:
	Type: Psychic
	Desc: The target is hit by a strong telekinetic force. It may also reduce the target's Sp. Def stat.
	PP: 10
	Pow: 90
	Cat: Special
	Acc: 100
	StatChange: 1 Sp_defense -1
	EffChance: 10
*
Mud-Slap:
	Desc: The user hurls mud in the target's face to inflict damage and lower its accuracy.
	PP: 10
	Type: Ground
	Cat: Special
	Pow: 20
	Acc: 100
	StatChange: 1 Accuracy -1
*
Magnitude:
	Desc: The user looses a ground-shaking quake affecting everyone around the user. Its power varies.
	PP: 30
	Type: Ground
	Cat: Physical
	Acc: 100
	Field: 
	private static final int[] CHANCES = {5, 10, 20, 30, 20, 10, 5};
	private static final int[] POWERS = {10, 30, 50, 70, 90, 110, 150};
	
	private int index;
	###
	PhysicalContact: False
	HitDig: POWERS[index = GeneralUtils.getPercentageIndex(CHANCES)]
	Apply: 
	Messages.add(new MessageUpdate("Magnitude " + (index + 4) + "!"));
	super.apply(me, o, b);
	###
*
Bulldoze:
	Desc: The user stomps down on the ground and attacks everything in the area. Hit Pok\u00e9mon's Speed stat is reduced.
	PP: 20
	Pow: 60
	Acc: 100
	Cat: Physical
	Type: Ground
	StatChange: 1 Speed -1
	PhysicalContact: False
	GetPow:
	// Power is halved during Grassy Terrain
	return (int)(super.power*(b.hasEffect(EffectNamesies.GRASSY_TERRAIN) ? .5 : 1));
	###
*
Dig:
	Desc: The user burrows, then attacks on the second turn. It can also be used to exit dungeons.
	PP: 10
	Type: Ground
	Cat: Physical
	Acc: 100
	Pow: 80
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " went underground!" 
	ChargeFirst: true
	SemiInv: true
*
Earthquake:
	Desc: The user sets off an earthquake that strikes those around it.
	PP: 10
	Pow: 100
	Acc: 100
	Cat: Physical
	Type: Ground
	PhysicalContact: False
	HitDig: super.power
*
Fissure:
	Desc: The user opens up a fissure in the ground and drops the target in. The target instantly faints if it hits.
	OHKO: True
	PP: 5
	Acc: 30
	Cat: Physical
	Type: Ground
	PhysicalContact: False
*
Night Slash:
	Desc: The user slashes the target the instant an opportunity arises. Critical hits land more easily.
	PP: 15
	Pow: 70
	Acc: 100
	Cat: Physical
	Type: Dark
	Int: CritStageEffect
*
Tri Attack:
	Desc: The user strikes with a simultaneous three-beam attack. May also burn, freeze, or leave the target with paralysis.
	PP: 10
	Pow: 80
	Acc: 100
	Cat: Special
	EffChance: 20
	ApplyEffects: 
	super.status = RandomUtils.getRandomValue(statusConditions);
	super.applyEffects(b, user, victim);
	###
	Type: Normal
	Field: 
	private static StatusCondition[] statusConditions = {
			StatusCondition.PARALYZED,
			StatusCondition.BURNED,
			StatusCondition.FROZEN
	};
	###
*
Fake Out:
	Desc: An attack that hits first and makes the target flinch. It only works the first turn the user is in battle.
	PP: 10
	Cat: Physical
	Acc: 100
	Type: Normal
	Priority: 3
	Pow: 40
	Effect: Flinch
	ApplyError: !me.getAttributes().isFirstTurn()
*
Feint Attack:
	Desc: The user approaches the target disarmingly, then throws a sucker punch. It hits without fail.
	PP: 20
	Cat: Physical
	Pow: 60
	Type: Dark
*
Taunt:
	Desc: The target is taunted into a rage that allows it to use only attack moves for three turns.
	PP: 20
	Acc: 100
	Cat: Status
	Type: Dark
	Effect: Taunt
	MoveType: Substitute_Piercing
*
Pay Day:
	Desc: Numerous coins are hurled at the target to inflict damage. Money is earned after the battle.
	PP: 20
	Pow: 40
	Acc: 100
	Cat: Physical
	Type: Normal
	PhysicalContact: False
	Effect: PayDay
	SelfTarget: True
*
Power Gem:
	Desc: The user attacks with a ray of light that sparkles as if it were made of gemstones.
	PP: 20
	Type: Rock
	Cat: Special
	Pow: 80
	Acc: 100
*
Water Sport:
	Desc: The user soaks itself with water. The move weakens Fire-type moves while the user is in the battle.
	BattleEffect: WaterSport
	PP: 15
	Type: Water
	Cat: Status
*
Soak:
	Desc: The user shoots a torrent of water at the target and changes the target's type to Water.
	PP: 20
	Acc: 100
	Type: Water
	Cat: Status
	Effect: ChangeType
	ChangeType: 
	return new Type[] { Type.WATER, Type.NO_TYPE };
	###
	Int: ChangeTypeSource
*
Trick-or-Treat:
	AddTypeMove: Ghost
	Desc: The user takes the target trick-or-treating. This adds Ghost type to the target's type.
	PP: 20
	Type: Ghost
	Cat: Status
	Acc: 100
*
Forest's Curse:
	Desc: The user puts a forest curse on the target. Afflicted targets are now Grass type as well.
	PP: 20
	Type: Grass
	Cat: Status
	Acc: 100
	AddTypeMove: Grass
*
Psych Up:
	Desc: The user hypnotizes itself into copying any stat change made by the target.
	PP: 10
	Cat: Status
	Type: Normal
	ApplyEffects: 
	for (int i = 0; i < Stat.NUM_BATTLE_STATS; i++)  {
		user.getAttributes().setStage(i, victim.getStage(i));
	}
	
	Messages.add(new MessageUpdate(user.getName() + " copied " + victim.getName() + "'s stat changes!"));
	###
	MoveType: No_Magic_Coat, Protect_Piercing, Substitute_Piercing
*
Amnesia:
	Desc: The user temporarily empties its mind to forget its concerns. It sharply raises the user's Sp. Def stat.
	PP: 20
	Type: Psychic
	Cat: Status
	SelfTarget: True
	StatChange: 1 Sp_Defense 2
*
Wonder Room:
	Desc: The user creates a bizarre area in which Pok\u00e9mon's Defense and Sp. Def stats are swapped for five turns.
	PP: 10
	Cat: Status
	BattleEffect: WonderRoom
	Type: Psychic
*
Aqua Jet:
	Type: Water
	Cat: Physical
	Desc: The user lunges at the target at a speed that makes it almost invisible. It is sure to strike first.
	Priority: 1
	Pow: 40
	PP: 20
	Acc: 100
*
Covet:
	Pow: 60
	MoveType: Assistless
	Acc: 100
	PP: 25 	
	Type: Normal
	Cat: Physical
	Desc: The user endearingly approaches the target, then steals the target's held item.
	SwitchItems: user.isHoldingItem(b) || !victim.isHoldingItem(b) || b.getTrainer(user.isPlayer()) instanceof WildPokemon || victim.hasAbility(AbilityNamesies.STICKY_HOLD)
	SwitchItemMessage: user.getName() + " stole " + victim.getName() + "'s " + victimItem.getName() + "!"
*
Low Kick:
	Desc: A powerful low kick that makes the target fall over. It inflicts greater damage on heavier targets.
	Cat: Physical
	Acc: 100
	PP: 20
	Type: Fighting
	WeightBased: o
*
Karate Chop:
	Desc: The target is attacked with a sharp chop. Critical hits land more easily.
	PP: 25
	Int: CritStageEffect
	Acc: 100
	Pow: 50
	Type: Fighting
	Cat: Physical
*
Seismic Toss:
	Desc: The target is thrown using the power of gravity. It inflicts damage equal to the user's level.
	PP: 20
	Acc: 100
	Type: Fighting
	Cat: Physical
	FixedDamage: me.getLevel()
*
Swagger:
	Desc: The user enrages and confuses the target. However, it also sharply raises the target's Attack stat.
	PP: 15
	Cat: Status
	Type: Normal
	Effect: Confusion
	StatChange: 1 Attack 2
	Acc: 85
*
Cross Chop:
	Desc: The user delivers a double chop with its forearms crossed. Critical hits land more easily.
	PP: 5
	Pow: 100
	Acc: 80
	Cat: Physical
	Int: CritStageEffect
	Type: Fighting
*
Punishment:
	Desc: This attack's power increases the more the target has powered up with stat changes.
	PP: 5
	Pow: 60
	GetPow: 
	return (int)Math.min(super.power + 20*o.getAttributes().totalStatIncreases(), 200);
	###
	Type: Dark
	Cat: Physical
	Acc: 100
*
Close Combat:
	Desc: The user fights the target up close without guarding itself. It also cuts the user's Defense and Sp. Def.
	PP: 5
	Type: Fighting
	Cat: Physical
	Acc: 100
	Pow: 120
	SelfTarget: True
	StatChange: 2 Defense -1 Sp_defense -1
*
Dragon Ascent:
	Desc: After soaring upward, the user attacks its target by dropping out of the sky at high speeds, although it lowers its own Defense and Sp. Def in the process.
	PP: 5
	Pow: 120
	Acc: 100
	Cat: Physical
	Type: Flying
	SelfTarget: True
	StatChange: 2 Defense -1 Sp_Defense -1
*
Flame Wheel:
	MoveType: Defrost
	PP: 25
	Desc: The user cloaks itself in fire and charges at the target. It may also leave the target with a burn.
	Pow: 60
	Acc: 100
	Cat: Physical
	Type: Fire
	Status: Burned
	EffChance: 10
*
Reversal:
	Desc: An all-out attack that becomes more powerful the less HP the user has.
	PP: 15
	Acc: 100
	Cat: Physical
	Type: Fighting
	Flailing: True
*
Extreme Speed:
	Desc: The user charges the target at blinding speed. This attack always goes before any other move.
	PP: 5
	Priority: 2
	Type: Normal
	Pow: 80
	Acc: 100
	Cat: Physical
*
Hypnosis:
	Desc: The user employs hypnotic suggestion to make the target fall into a deep sleep.
	PP: 20
	Acc: 60
	Type: Psychic
	Cat: Status
	Status: Asleep
*
Bubble Beam:
	Desc: A spray of bubbles is forcefully ejected at the opposing team. It may also lower their Speed stats.
	StatChange: 1 Speed -1
	EffChance: 10
	Type: Water
	PP: 20
	Pow: 65
	Cat: Special
	Acc: 100
*
Mud Shot:
	Desc: The user attacks by hurling a blob of mud at the target. It also reduces the target's Speed.
	PP: 15
	Pow: 55
	Cat: Special
	Acc: 95
	StatChange: 1 Speed -1
	Type: Ground
*
Belly Drum:
	Desc: The user maximizes its Attack stat in exchange for HP equal to half its max HP.
	PP: 10
	Cat: Status
	Type: Normal
	SelfTarget: True
	ApplyEffects: 
	// Fails if attack is already maxed or if you have less than half your health to give up
	if (user.getStage(Stat.ATTACK.index()) == Stat.MAX_STAT_CHANGES || user.getHPRatio() < .5) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	// Maximization station
	Messages.add(new MessageUpdate(user.getName() + " cut its own HP and maximized its attack!"));
	user.reduceHealthFraction(b, 1/2.0);
	user.getAttributes().setStage(Stat.ATTACK.index(), Stat.MAX_STAT_CHANGES);
	###
*
Submission:
	Desc: The user grabs the target and recklessly dives for the ground. It also hurts the user slightly.
	PP: 20
	Pow: 80
	Type: Fighting
	Recoil: 4
	Int: RecoilMove
	Acc: 80
	Cat: Physical
*
Dynamic Punch:
	Desc: The user punches the target with full, concentrated power. It confuses the target if it hits.
	PP: 5
	Pow: 100
	Acc: 50
	Effect: Confusion
	Type: Fighting
	Cat: Physical
	MoveType: Punching
*
Mind Reader:
	MoveType: Non_Snatchable
	Desc: The user senses the target's movements with its mind to ensure its next attack does not miss the target.
	PP: 5
	Cat: Status
	Type: Normal
	SelfTarget: True
	Effect: LockOn
*
Lock-On:
	Desc: The user takes sure aim at the target. It ensures the next attack does not fail to hit the target.
	PP: 5
	Type: Normal
	MoveType: Non_Snatchable
	Cat: Status
	SelfTarget: True
	Effect: LockOn
*
Kinesis:
	Desc: The user distracts the target by bending a spoon. It lowers the target's accuracy.
	PP: 15
	Type: Psychic
	Cat: Status
	Acc: 80
	StatChange: 1 Accuracy -1
*
Barrier:
	Desc: The user throws up a sturdy wall that sharply raises its Defense stat.
	StatChange: 1 Defense 2
	SelfTarget: True
	PP: 20
	Cat: Status
	Type: Psychic
*
Telekinesis:
	Desc: The user makes the target float with its psychic power. The target is easier to hit for three turns.
	PP: 15
	Type: Psychic
	Cat: Status
	Effect: Telekinesis
	MoveType: Airborne
*
Ingrain:
	SelfTarget: True
	Effect: Ingrain
	Desc: The user lays roots that restore its HP on every turn. Because it is rooted, it can't switch out.
	PP: 20
	Type: Grass
	Cat: Status
*
Psycho Cut:
	Desc: The user tears at the target with blades formed by psychic power. Critical hits land more easily.
	PP: 20
	Int: CritStageEffect
	Type: Psychic
	Cat: Physical
	Acc: 100
	Pow: 70
	PhysicalContact: False
*
Future Sight:
	Desc: Two turns after this move is used, a hunk of psychic energy attacks the target.
	PP: 10
	Type: Psychic
	Acc: 100
	Cat: Special
	FutureAttackMove: FutureSight
	Pow: 120
*
Doom Desire:
	Desc: Two turns after this move is used, the user blasts the target with a concentrated bundle of light.
	PP: 5
	Type: Steel
	Cat: Special
	Pow: 140
	Acc: 100
	FutureAttackMove: DoomDesire
*
Calm Mind:
	Desc: The user quietly focuses its mind and calms its spirit to raise its Sp. Atk and Sp. Def stats.
	PP: 20
	Type: Psychic
	Cat: Status
	SelfTarget: True
	StatChange: 2 Sp_Attack 1 Sp_Defense 1
*
Low Sweep:
	Desc: The user attacks the target's legs swiftly, reducing the target's Speed stat.
	PP: 20
	Type: Fighting
	Acc: 100
	Cat: Physical
	Pow: 65
	StatChange: 1 Speed -1
*
Revenge:
	Desc: An attack move that inflicts double the damage if the user has been hurt by the opponent in the same turn.
	PP: 10
	Type: Fighting
	DoublePowerCondition: me.getAttributes().hasTakenDamage()
	Pow: 60
	Acc: 100
	Cat: Physical
	Priority: -4
*
Vital Throw:
	Desc: The user attacks last. In return, this throw move is guaranteed not to miss.
	PP: 10
	Priority: -1
	Cat: Physical
	Type: Fighting
	Pow: 70
*
Wring Out:
	Desc: The user powerfully wrings the target. The more HP the target has, the greater this attack's power.
	PP: 5
	Acc: 100
	Cat: Special
	Type: Normal
	HPRatioMove: 120 o
	PhysicalContact: True
*
Leaf Tornado:
	Desc: The user attacks its target by encircling it in sharp leaves. This attack may also lower the target's accuracy.
	PP: 10
	Type: Grass
	Cat: Special
	Acc: 90
	Pow: 65
	StatChange: 1 Accuracy -1
	EffChance: 30
*
Leaf Storm:
	Desc: The user whips up a storm of leaves around the target. The attack's recoil harshly reduces the user's Sp. Atk stat.
	PP: 5
	Type: Grass
	Pow: 130
	Acc: 90
	Cat: Special
	SelfTarget: True
	StatChange: 1 Sp_attack -2
*
Leaf Blade:
	Desc: The user handles a sharp leaf like a sword and attacks by cutting its target. Critical hits land more easily.
	PP: 15
	Type: Grass
	Pow: 90
	Cat: Physical
	Acc: 100
	Int: CritStageEffect
*
Constrict:
	Desc: The target is attacked with long, creeping tentacles or vines. It may also lower the target's Speed stat.
	PP: 35
	Pow: 10
	Acc: 100
	Cat: Physical
	Type: Normal
	StatChange: 1 Speed -1
	EffChance: 10
*
Hex:
	Desc: This relentless attack does massive damage to a target affected by status problems.
	PP: 10
	Pow: 65
	Acc: 100
	Cat: Special
	Type: Ghost
	DoublePowerCondition: o.hasStatus()
*
Sludge Wave:
	Desc: It swamps the area around the user with a giant sludge wave. It may also poison those hit.
	PP: 10
	Type: Poison
	Cat: Special
	Acc: 100
	Pow: 95
	Status: Poisoned
	EffChance: 10
*
Mud Sport:
	Desc: The user covers itself with mud. It weakens Electric-type moves while the user is in the battle.
	PP: 15
	Type: Ground
	Cat: Status
	BattleEffect: MudSport
*
Rock Polish:
	Desc: The user polishes its body to reduce drag. It can sharply raise the Speed stat.
	PP: 20
	Type: Rock
	Cat: Status
	SelfTarget: True
	StatChange: 1 Speed 2
*
Rock Throw:
	Desc: The user picks up and throws a small rock at the target to attack.
	PP: 15
	Pow: 50
	Acc: 90
	Cat: Physical
	Type: Rock
	PhysicalContact: False
*
Rock Blast:
	PP: 10
	Pow: 25
	Acc: 90
	Cat: Physical
	Type: Rock
	MultiStrike: 2 5
	PhysicalContact: False
	Desc: The user hurls hard rocks at the target. Two to five rocks are launched in quick succession.
*
Smack Down:
	Effect: Grounded
	HitFly: True
	Pow: 50
	Desc: The user throws a stone or projectile to attack an opponent. A flying Pok\u00e9mon will fall to the ground when hit.
	PP: 15
	Cat: Physical
	PhysicalContact: False
	Type: Rock
	Acc: 100
*
Stealth Rock:
	Type: Rock
	Cat: Status
	PP: 20
	Effect: StealthRock
	MoveType: Field
	Desc: The user lays a trap of levitating stones around the opponent's team. The trap hurts opponents that switch into battle.
*
Stone Edge:
	Desc: The user stabs the foe with sharpened stones from below. It has a high critical-hit ratio.
	PP: 5
	Type: Rock
	Acc: 80
	Cat: Physical
	Pow: 100
	Int: CritStageEffect
	PhysicalContact: False
*
Steamroller:
	Desc: The user crushes its targets by rolling over them with its rolled-up body. This attack may make the target flinch.
	PP: 20
	Cat: Physical
	Acc: 100
	Type: Bug
	Pow: 65
	Effect: Flinch
	EffChance: 30
	HitMinimize: True
*
Heavy Slam:
	Desc: The user slams into the target with its heavy body. The more the user outweighs the target, the greater its damage.
	PP: 10
	Type: Steel
	Cat: Physical
	Acc: 100
	WeightRatio: o me
*
Stomp:
	Desc: The target is stomped with a big foot. It may also make the target flinch.
	PP: 20
	Pow: 65
	Acc: 100
	Cat: Physical
	Type: Normal
	Effect: Flinch
	EffChance: 30
	HitMinimize: True
*
Flame Charge:
	Desc: The user cloaks itself with flame and attacks. Building up more power, it raises the user's Speed stat.
	PP: 20
	Pow: 50
	Type: Fire
	Cat: Physical
	Acc: 100
	StatChange: 1 Speed 1
	SelfTarget: True
*
Bounce:
	Desc: The user bounces up high, then drops on the target on the second turn. It may also leave the target with paralysis.
	Int: MultiTurnMove
	ChargeFirst: true
	SemiInv: true
	ChargeMessage: user.getName() + " sprang up!"
	Type: Flying
	Cat: Physical
	PP: 5
	Pow: 85
	MoveType: Airborne
	Acc: 85
	Status: Paralyzed
	EffChance: 30
*
Curse:	
	Desc: A move that works differently for the Ghost type than for all other types.
	PP: 10
	Cat: Status
	Type: Ghost
	StatChange: 3 Attack 1 Defense 1 Speed -1
	Apply: 
	// Different effects based on the type of the user
	if (me.isType(b, Type.GHOST)) {
		Effect curse = EffectNamesies.CURSE.getEffect();

		// Manually apply the effect if it applies
		if (curse.applies(b, me, o, CastSource.ATTACK)) {
			curse.cast(b, me, o, CastSource.ATTACK, super.printCast);
		}
		else {
			Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		}
	}
	else {
		super.apply(me, o, b);
	}
	###
	MoveType: Protect_Piercing, Substitute_Piercing, No_Magic_Coat
*
Yawn:
	Desc: The user lets loose a huge yawn that lulls the target into falling asleep on the next turn.
	PP: 10
	Cat: Status
	Type: Normal
	Effect: Yawn
*
Headbutt:
	Desc: The user sticks out its head and attacks by charging straight into the target. It may also make the target flinch.
	PP: 15
	Type: Normal
	Cat: Physical
	Acc: 100
	Pow: 70
	Effect: Flinch
	EffChance: 30
*
Slack Off:
	Desc: The user slacks off, restoring its own HP by up to half of its maximum HP.
	SelfHealing: 2
	Int: SelfHealingMove
	Type: Normal
	Cat: Status
	PP: 10
*
Heal Pulse:
	Desc: The user emits a healing pulse which restores the target's HP by up to half of its max HP.
	PP: 10
	Type: Psychic
	Cat: Status
	MoveType: Aura_Pulse, Healing
	ApplyEffects: 
	if (victim.fullHealth() || victim.hasEffect(EffectNamesies.HEAL_BLOCK)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	// Heal by 50% unless the user has Mega Launcher -- then heal by 75%
	double fraction = user.hasAbility(AbilityNamesies.MEGA_LAUNCHER) ? .75 : .5;
	
	victim.healHealthFraction(fraction);
	Messages.add(new MessageUpdate(victim.getName() + "'s health was restored!").updatePokemon(b, victim));
	###
*
Metal Sound:
	Desc: A horrible sound like scraping metal harshly reduces the target's Sp. Def stat.
	PP: 40
	Acc: 85
	Type: Steel
	Cat: Status
	StatChange: 1 Sp_Defense -2
	MoveType: Sound_Based
*
Spark:
	Desc: The user throws an electrically charged tackle at the target. It may also leave the target with paralysis.
	PP: 20
	Type: Electric
	Acc: 100
	Cat: Physical
	Pow: 65
	Status: Paralyzed
	EffChance: 30
*	
Magnet Bomb:
	Desc: The user launches steel bombs that stick to the target. This attack will not miss.
	PP: 20
	Pow: 60
	Cat: Physical
	Type: Steel
	PhysicalContact: False
	MoveType: Bomb_Ball
*
Mirror Shot:
	Desc: The user looses a flash of energy at the target from its polished body. It may also lower the target's accuracy.
	PP: 10
	Type: Steel
	Cat: Special
	Pow: 65
	Acc: 85
	StatChange: 1 Accuracy -1
*
Magnet Rise:
	Desc: The user levitates using electrically generated magnetism for five turns.
	PP: 10
	Cat: Status
	Type: Electric
	Effect: MagnetRise
	SelfTarget: True
	MoveType: Airborne
*
Zap Cannon:
	Desc: The user fires an electric blast like a cannon to inflict damage and cause paralysis.
	PP: 5
	Pow: 120
	Type: Electric
	Acc: 50
	Cat: Special
	Status: Paralyzed
	MoveType: Bomb_Ball
*
Brave Bird:
	Desc: The user tucks in its wings and charges from a low altitude. The user also takes serious damage.
	PP: 15
	Pow: 120
	Acc: 100
	Cat: Physical
	Type: Flying
	Recoil: 3
	Int: RecoilMove
*
Uproar:
	Desc: The user attacks in an uproar for three turns. Over that time, no one can fall asleep.
	PP: 10
	MoveType: Sound_Based, Sleep_Talk_Fail
	Cat: Special
	Type: Normal
	Pow: 90
	Acc: 100
	SelfTarget: True
	Effect: Uproar
*
Acupressure:
	Desc: The user applies pressure to stress points, sharply boosting one of its stats.
	PP: 30
	Type: Normal
	Cat: Status
	SelfTarget: True
	ApplyEffects:
	// TODO: Test to make sure this works when both parties use during the same turn -- will it always be the same stat?
	super.statChanges = new int[Stat.NUM_BATTLE_STATS];
	super.statChanges[RandomUtils.getRandomInt(super.statChanges.length)] = 2;
	
	super.applyEffects(b, user, victim);
	###
*
Double Hit:
	Desc: The user slams the target with a long tail, vines, or tentacle. The target is hit twice in a row.
	PP: 10
	Cat: Physical
	Pow: 35
	MultiStrike: 2 2
	Acc: 90
	Type: Normal
*
Icy Wind:
	Desc: The user attacks with a gust of chilled air. It also reduces the targets' Speed stat.
	Type: Ice
	PP: 15
	Cat: Special
	Pow: 55
	Acc: 95
	StatChange: 1 Speed -1
*
Ice Shard:
	Desc: The user flash freezes chunks of ice and hurls them at the target. This move always goes first.
	PP: 30
	Pow: 40
	PhysicalContact: False
	Priority: 1
	Acc: 100
	Cat: Physical
	Type: Ice
*
Aqua Ring:
	Desc: The user envelops itself in a veil made of water. It regains some HP on every turn.
	PP: 20
	Type: Water
	Cat: Status
	SelfTarget: True
	Effect: AquaRing
*
Aurora Beam:
	Desc: The target is hit with a rainbow-colored beam. This may also lower the target's Attack stat.
	PP: 20
	Pow: 65
	Acc: 100
	Cat: Special
	Type: Ice
	StatChange: 1 Attack -1
	EffChance: 10
*
Brine:
	Desc: If the target's HP is down to about half, this attack will hit with double the power.
	PP: 10
	Type: Water
	Cat: Special
	Acc: 100
	Pow: 65
	DoublePowerCondition: me.getHPRatio() < .5
*
Dive:
	Desc: Diving on the first turn, the user floats up and attacks on the second turn. It can be used to dive deep in the ocean.
	PP: 10
	Pow: 80
	Cat: Physical
	Acc: 100
	Type: Water
	Int: MultiTurnMove
	ChargeFirst: true
	SemiInv: true
	ChargeMessage: user.getName() + " hid underwater!"
*
Ice Beam:
	Desc: The target is struck with an icy-cold beam of energy. It may also freeze the target solid.
	PP: 10
	Type: Ice
	Cat: Special
	Acc: 100
	Pow: 90
	Status: Frozen
	EffChance: 10
*
Sheer Cold:
	Desc: The target is attacked with a blast of absolute-zero cold. The target instantly faints if it hits.
	PP: 5
	OHKO: True
	Acc: 30
	Cat: Special
	Type: Ice
	ApplyError: o.isType(b, Type.ICE)
*
Poison Gas:
	Desc: A cloud of poison gas is sprayed in the face of opposing Pok\u00e9mon. It may poison those hit.
	PP: 40
	Acc: 90
	Type: Poison
	Cat: Status
	Status: Poisoned
*
Sludge:
	Desc: Unsanitary sludge is hurled at the target. It may also poison the target.
	PP: 20
	Pow: 65
	Acc: 100
	Cat: Special
	Type: Poison
	Status: Poisoned
	EffChance: 30
*
Sludge Bomb:
	Desc: Unsanitary sludge is hurled at the target. It may also poison the target.
	PP: 10
	Type: Poison
	Pow: 90
	Acc: 100
	Cat: Special
	Status: Poisoned
	EffChance: 30
	MoveType: Bomb_Ball
*
Acid Armor:
	Desc: The user alters its cellular structure to liquefy itself, sharply raising its Defense stat.
	PP: 20
	StatChange: 1 Defense 2
	SelfTarget: True
	Type: Poison
	Cat: Status
*
Icicle Spear:
	Desc: The user launches sharp icicles at the target. It strikes two to five times in a row.
	PP: 30
	Pow: 25
	PhysicalContact: False
	MultiStrike: 2 5
	Cat: Physical
	Acc: 100
	Type: Ice
*
Clamp:
	Desc: The target is clamped and squeezed by the user's very thick and sturdy shell for four to five turns.
	PP: 15
	Type: Water
	Cat: Physical
	Acc: 85
	Pow: 35
	Effect: Clamped
*
Razor Shell:
	Desc: The user cuts its target with sharp shells. This attack may also lower the target's Defense stat.
	PP: 10
	Type: Water
	Cat: Physical
	Acc: 95
	Pow: 75
	StatChange: 1 Defense -1
	EffChance: 50
*
Whirlpool:
	Desc: Traps foes in a violent swirling whirlpool for four to five turns.
	PP: 15
	Pow: 35
	Cat: Special
	Acc: 85
	Type: Water
	Effect: Whirlpooled
*
Shell Smash:
	Desc: The user breaks its shell, lowering its Defense and Sp. Def stats but sharply raising Attack, Sp. Atk, and Speed stats.
	PP: 15
	Type: Normal
	Cat: Status
	SelfTarget: True
	StatChange: 5 Defense -1 Sp_defense -1 Attack 2 Sp_Attack 2 Speed 2
*
Spike Cannon:
	Desc: Sharp spikes are shot at the target in rapid succession. They hit two to five times in a row.
	PP: 15
	Type: Normal
	Cat: Physical
	Acc: 100
	PhysicalContact: False
	Pow: 20
	MultiStrike: 2 5 
*
Spikes:
	Desc: The user lays a trap of spikes at the opposing team's feet. The trap hurts Pok\u00e9mon that switch into battle.
	PP: 20
	Cat: Status
	Type: Ground
	MoveType: Field
	Effect: Spikes
*
Icicle Crash:
	Desc: The user attacks by harshly dropping an icicle onto the target. It may also make the target flinch.
	PP: 10
	Pow: 85
	Acc: 90
	Cat: Physical
	PhysicalContact: False
	Effect: Flinch
	EffChance: 30
	Type: Ice
*
Lick:
	Desc: The target is licked with a long tongue, causing damage. It may also leave the target with paralysis.
	PP: 30
	Type: Ghost
	Cat: Physical
	Acc: 100
	Pow: 30
	Status: Paralyzed
	EffChance: 30
*
Spite:
	Desc: The user unleashes its grudge on the move last used by the target by cutting 4 PP from it.
	PP: 10
	Acc: 100
	Cat: Status
	MoveType: Substitute_Piercing
	Type: Ghost
	ApplyEffects: 
	Move last = victim.getAttributes().getLastMoveUsed();
	
	// Fails if the victim hasn't attacked yet, their last move already has 0 PP, or they don't actually know the last move they used
	if (last == null || last.getPP() == 0 || !victim.hasMove(b, last.getAttack().namesies())) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	Messages.add(new MessageUpdate(victim.getName() + "'s " + last.getAttack().getName() + "'s PP was reduced by " + last.reducePP(4) + "!"));
	###
*
Night Shade:
	Desc: The user makes the target see a frightening mirage. It inflicts damage matching the user's level.
	PP: 15
	Type: Ghost
	FixedDamage: me.getLevel()
	Acc: 100
	Cat: Special
*
Shadow Ball:
	Desc: The user hurls a shadowy blob at the target. It may also lower the target's Sp. Def stat.
	PP: 15
	Pow: 80
	Acc: 100
	Cat: Special
	StatChange: 1 Sp_defense -1
	EffChance: 20
	Type: Ghost
	MoveType: Bomb_Ball
*
Dream Eater:
	Desc: The user eats the dreams of a sleeping target. It absorbs half the damage caused to heal the user's HP.
	PP: 15
	Pow: 100
	Acc: 100
	Cat: Special
	Type: Psychic
	Int: SapHealthEffect
	SapMessage: return victim.getName() + "'s dream was eaten!";
	ApplyError: !o.hasStatus(StatusCondition.ASLEEP)
*
Dark Pulse:
	Desc: The user releases a horrible aura imbued with dark thoughts. It may also make the target flinch.
	PP: 15
	Pow: 80
	Acc: 100
	Type: Dark
	Cat: Special
	Effect: Flinch
	EffChance: 20
	MoveType: Aura_Pulse
*
Nightmare:
	Desc: A sleeping target sees a nightmare that inflicts some damage every turn.
	PP: 15
	Type: Ghost
	Cat: Status
	Acc: 100
	Effect: Nightmare
	MoveType: No_Magic_Coat
*
Shadow Punch:
	Desc: The user throws a punch from the shadows. The punch lands without fail.
	PP: 20
	Pow: 60
	Cat: Physical
	MoveType: Punching
	Type: Ghost
*
Bind:
	Desc: Things such as long bodies or tentacles are used to bind and squeeze the target for four to five turns.
	PP: 20
	Cat: Physical
	Type: Normal
	Acc: 85
	Pow: 15
	Effect: Binded
*
Rock Tomb:
	Desc: Boulders are hurled at the target. It also lowers the target's Speed by preventing its movement.
	PP: 10
	Type: Rock
	Cat: Physical
	Acc: 95
	Pow: 60
	StatChange: 1 Speed -1
	PhysicalContact: False
*
Dragon Breath:
	Desc: The user exhales a mighty gust that inflicts damage. It may also leave the target with paralysis.
	PP: 20
	Type: Dragon
	Acc: 100
	Cat: Special
	Pow: 60
	Status: Paralyzed
	EffChance: 30
*
Iron Tail:
	Desc: The target is slammed with a steel-hard tail. It may also lower the target's Defense stat.
	PP: 15
	Type: Steel
	Acc: 75
	Pow: 100
	Cat: Physical
	StatChange: 1 Defense -1
	EffChance: 30
*
Meditate:
	Desc: The user meditates to awaken the power deep within its body and raise its Attack stat.
	PP: 40
	StatChange: 1 Attack 1
	SelfTarget: True
	Cat: Status
	Type: Psychic
*
Synchronoise:
	Type: Psychic
	Desc: Using an odd shock wave, the user inflicts damage on any Pok\u00e9mon of the same type in the area around it.
	PP: 15
	Cat: Special
	Acc: 100
	Pow: 120
	Apply: 
	Type[] type = me.getType(b);
	
	// Like this is literally the stupidest move ever like srsly what is wrong with the creators
	if (o.isType(b, type[0]) || (type[1] != Type.NO_TYPE && o.isType(b, type[1]))) {
		super.apply(me, o, b);
	}
	else {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
	}
	###
*
Psyshock:
	Desc: The user materializes an odd psychic wave to attack the target. This attack does physical damage.
	PP: 10
	Type: Psychic
	Cat: Special
	Acc: 100
	Pow: 80
	Int: OpponentStatSwitchingEffect
	OppSwitchStat: 
	return s == Stat.SP_DEFENSE ? Stat.DEFENSE : s;
	###
*
Vice Grip:
	Desc: The target is gripped and squeezed from both sides to inflict damage.
	PP: 30
	Type: Normal
	Cat: Physical
	Pow: 55
	Acc: 100
*
Metal Claw:
	Desc: The target is raked with steel claws. It may also raise the user's Attack stat.
	PP: 35
	Pow: 50
	Acc: 95
	Cat: Physical
	Type: Steel
	StatChange: 1 Attack 1
	SelfTarget: True
*
Guillotine:
	Desc: A vicious, tearing attack with big pincers. The target will faint instantly if this attack hits.
	PP: 5
	Acc: 30
	Cat: Physical
	Type: Normal
	OHKO: True
*
Crabhammer:
	Desc: The target is hammered with a large pincer. Critical hits land more easily.
	PP: 10
	Type: Water
	Cat: Physical
	Acc: 90
	Pow: 100
	Int: CritStageEffect
*
Flail:
	Desc: The user flails about aimlessly to attack. It becomes more powerful the less HP the user has.
	PP: 15
	Acc: 100
	Cat: Physical
	Type: Normal
	Flailing: True
*
Charge:
	Desc: The user boosts the power of the Electric move it uses on the next turn. It also raises the user's Sp. Def stat.
	PP: 20
	Type: Electric
	Cat: Status
	SelfTarget: True
	StatChange: 1 Sp_Defense 1
	Effect: Charge
*
Charge Beam:
	Desc: The user attacks with an electric charge. The user may use any remaining electricity to raise its Sp. Atk stat.
	PP: 10
	Pow: 50
	Cat: Special
	Acc: 90
	Type: Electric
	SelfTarget: True
	StatChange: 1 Sp_Attack 1
	EffChance: 70
*
Mirror Coat:
	Desc: A retaliation move that counters any special attack, inflicting double the damage taken.
	Type: Psychic
	Cat: Special
	Countering: Special
*
Counter:
	Desc: A retaliation move that counters any physical attack, inflicting double the damage taken.
	Type: Fighting
	Cat: Physical
	Countering: Physical
*
Barrage:
	Desc: Round objects are hurled at the target to strike two to five times in a row.
	PP: 20
	Pow: 15
	Acc: 85
	MultiStrike: 2 5
	Type: Normal
	Cat: Physical
	PhysicalContact: False
	MoveType: Bomb_Ball
*
Bullet Seed:
	Desc: The user forcefully shoots seeds at the target. Two to five seeds are shot in rapid succession.
	PP: 30
	Type: Grass
	Pow: 25
	Acc: 100
	PhysicalContact: False
	Cat: Physical
	MultiStrike: 2 5
	MoveType: Bomb_Ball
*
Egg Bomb:
	Desc: A large egg is hurled at the target with maximum force to inflict damage.
	PP: 10
	Pow: 100
	Acc: 75
	MoveType: Bomb_Ball
	Type: Normal
	PhysicalContact: False
	Cat: Physical
*
Wood Hammer:
	Desc: The user slams its rugged body into the target to attack. The user also sustains serious damage.
	PP: 15
	Pow: 120
	Acc: 100
	Type: Grass
	Cat: Physical
	Recoil: 3
	Int: RecoilMove
*
Bone Club:
	Desc: The user clubs the target with a bone. It may also make the target flinch.
	PP: 20
	Pow: 65
	Acc: 85
	Type: Ground
	Cat: Physical
	Effect: Flinch
	EffChance: 10
	PhysicalContact: False
*
Bonemerang:
	Desc: The user throws the bone it holds. The bone loops to hit the target twice, coming and going.
	PP: 10
	Type: Ground
	Cat: Physical
	Acc: 90
	Pow: 50
	MultiStrike: 2 2
	PhysicalContact: False
*
Bone Rush:
	Desc: The user strikes the target with a hard bone two to five times in a row.
	PP: 10
	Acc: 90
	Cat: Physical
	Type: Ground
	Pow: 25
	PhysicalContact: False
	MultiStrike: 2 5
*
Rolling Kick:
	Desc: The user lashes out with a quick, spinning kick. It may also make the target flinch.
	PP: 15
	Pow: 60
	Acc: 85
	Cat: Physical
	Type: Fighting
	Effect: Flinch
	EffChance: 30
*
Jump Kick:
	Desc: The user jumps up high, then strikes with a kick. If the kick misses, the user hurts itself.
	PP: 10
	Pow: 100
	Acc: 95
	Type: Fighting
	Cat: Physical
	Int: CrashDamageMove
	CrashDamage: 3
	MoveType: Airborne
*
Brick Break:
	Desc: The user attacks with a swift chop. It can also break any barrier such as Light Screen and Reflect.
	PP: 15
	Type: Fighting
	Pow: 75
	Acc: 100
	Cat: Physical
	ApplyEffects: 
	BarrierEffect.breakBarriers(b, user);
	###
*
Psychic Fangs:
	Desc: The user bites the target with its psychic capabilities. This can also destroy Light Screen and Reflect.
	PP: 10
	Type: Psychic
	Cat: Physical
	Acc: 100
	Pow: 85
	ApplyEffects: 
	BarrierEffect.breakBarriers(b, user);
	###
*
High Jump Kick:
	Desc: The target is attacked with a knee kick from a jump. If it misses, the user is hurt instead.
	PP: 10
	Type: Fighting
	Cat: Physical
	Acc: 90
	Pow: 130
	CrashDamage: 2
	MoveType: Airborne
	Int: CrashDamageMove
*
Blaze Kick:
	Desc: The user launches a kick that lands a critical hit more easily. It may also leave the target with a burn.
	PP: 10
	Type: Fire
	Cat: Physical
	Acc: 90
	Pow: 85
	Int: CritStageEffect
	Status: Burned
	EffChance: 10
*
Mega Kick:
	Desc: The target is attacked by a kick launched with muscle-packed power.
	PP: 5
	Pow: 120
	Acc: 75
	Cat: Physical
	Type: Normal
*
Comet Punch:
	PP: 15
	Desc: The target is hit with a flurry of punches that strike two to five times in a row.
	Pow: 18
	Acc: 85
	MultiStrike: 2 5
	Type: Normal
	Cat: Physical
	MoveType: Punching
*
Mach Punch:
	Priority: 1
	Desc: The user throws a punch at blinding speed. It is certain to strike first.
	Pow: 40
	Cat: Physical
	Type: Fighting
	MoveType: Punching
	Acc: 100
	PP: 30
*
Bullet Punch:
	Desc: The user strikes the target with tough punches as fast as bullets. This move always goes first.
	Priority: 1
	Type: Steel
	Pow: 40
	Cat: Physical
	PP: 30
	Acc: 100
	MoveType: Punching
*
Vacuum Wave:
	Desc: The user whirls its fists to send a wave of pure vacuum at the target. This move always goes first.
	Cat: Special
	Pow: 40
	Acc: 100
	Priority: 1
	PP: 30
	Type: Fighting
*
Thunder Punch:
	Desc: The target is punched with an electrified fist. It may also leave the target with paralysis.
	PP: 15
	Type: Electric
	Cat: Physical
	Acc: 100
	MoveType: Punching
	Pow: 75
	Status: Paralyzed
	EffChance: 10
*
Ice Punch:
	Desc: The target is punched with an icy fist. It may also leave the target frozen.
	PP: 15
	Type: Ice
	Cat: Physical
	Acc: 100
	MoveType: Punching
	Pow: 75
	Status: Frozen
	EffChance: 10
*
Fire Punch:
	Desc: The target is punched with a fiery fist. It may also leave the target with a burn.
	PP: 15
	Type: Fire
	Cat: Physical
	MoveType: Punching
	Acc: 100
	Pow: 75
	Status: Burned
	EffChance: 10
*
Sky Uppercut:
	Desc: The user attacks the target with an uppercut thrown skyward with force.
	PP: 15
	Pow: 85
	Cat: Physical
	MoveType: Punching
	Acc: 90
	Type: Fighting
	HitFly: True
	GetPow:
	// Does not deal double damage when opponent is flying
	return super.power;
	###
*
Mega Punch:
	Desc: The target is slugged by a punch thrown with muscle-packed power.
	PP: 20
	Pow: 80
	Acc: 85
	MoveType: Punching
	Type: Normal
	Cat: Physical
*
Focus Punch:
	Desc: The user focuses its mind before launching a punch. It will fail if the user is hit before it is used.
	Pow: 150
	Acc: 100
	Cat: Physical
	MoveType: Assistless, Sleep_Talk_Fail, Metronomeless, Punching
	Priority: -3
	PP: 20
	Type: Fighting
	Effect: Focusing
	SelfTarget: True
	StartTurn: 
	super.applyEffects(b, me, me);
	###
	ApplyDamage:
	if (me.hasEffect(EffectNamesies.FOCUSING)) {
		super.applyDamage(me, o, b);
	}
	###
*
Shell Trap:
	Desc: The user sets a shell trap. If the user is hit by a physical move, the trap will explode and inflict damage on the opposing Pokémon.
	Pow: 150
	Acc: 100
	Cat: Special
	Type: Fire
	Priority: -3
	PP: 5
	Effect: ShellTrap
	SelfTarget: True
	StartTurn: 
	super.applyEffects(b, me, me);
	###
	Apply:
	if (me.hasEffect(EffectNamesies.SHELL_TRAP)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	super.applyDamage(me, o, b);
	###
*
Beak Blast:
	Desc: The user first heats up its beak, and then it attacks the target. Making direct contact with the Pokémon while it's heating up its beak results in a burn.
	PP: 15
	Type: Flying
	Cat: Physical
	Pow: 100
	PhysicalContact: False
	Priority: -3
	Effect: BeakBlast
	SelfTarget: True
	StartTurn: 
	super.applyEffects(b, me, me);
	###
*
Me First:
	Desc: The user tries to cut ahead of the target to steal and use the target's intended move with greater power.
	PP: 20
	Cat: Status
	Type: Normal
	MoveType: Sleep_Talk_Fail, Assistless, No_Magic_Coat, Metronomeless
	Apply:
	// Fails if it is the second turn or the opponent is using a status move
	if (!b.isFirstAttack() || o.getMove() == null || o.getAttack().isStatusMove()) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	me.addEffect((PokemonEffect)EffectNamesies.FIDDY_PERCENT_STRONGER.getEffect());
	me.callNewMove(b, o, new Move(o.getAttack()));
	me.getAttributes().removeEffect(EffectNamesies.FIDDY_PERCENT_STRONGER);
	###
*
Refresh:
	Desc: The user rests to cure itself of a poisoning, burn, or paralysis.
	PP: 20
	Type: Normal
	Cat: Status
	SelfTarget: True
	MoveType: Healing
	ApplyError: !me.hasStatus()
	ApplyEffects: 
	Status.removeStatus(b, user, CastSource.ATTACK);
	###
*
Power Whip:
	Desc: The user violently whirls its vines or tentacles to harshly lash the target.
	PP: 10
	Type: Grass
	Pow: 120
	Acc: 85
	Cat: Physical
*
Smog:
	Desc: The target is attacked with a discharge of filthy gases. It may also poison the target.
	PP: 20
	Pow: 30
	Acc: 70
	Cat: Special
	Type: Poison
	EffChance: 40
	Status: Poisoned
*
Clear Smog:
	Desc: The user attacks by throwing a clump of special mud. All status changes are returned to normal.
	PP: 15
	Type: Poison
	Cat: Special
	Pow: 50
	EliminateStatChanges: True
*
Hammer Arm:
	Desc: The user swings and hits with its strong and heavy fist. It lowers the user's Speed, however.
	PP: 10
	Pow: 100
	Acc: 90
	MoveType: Punching
	Cat: Physical
	Type: Fighting
	StatChange: 1 Speed -1
	SelfTarget: True
*
Ice Hammer:
	Desc: The user swings and hits with its strong, heavy fist. It lowers the user's Speed, however.
	PP: 10
	Pow: 100
	Acc: 90
	MoveType: Punching
	Cat: Physical
	Type: Ice
	StatChange: 1 Speed -1
	SelfTarget: True
*
Soft-Boiled:
	Desc: The user restores its own HP by up to half of its maximum HP. May also be used in the field to heal HP.
	PP: 10
	Type: Normal
	Cat: Status
	SelfHealing: 2
	Int: SelfHealingMove
*
Ancient Power:
	Desc: The user attacks with a prehistoric power. It may also raise all the user's stats at once.
	PP: 5
	Pow: 60
	Cat: Special
	Acc: 100
	Type: Rock
	StatChange: 7 Attack 1 Defense 1 Sp_Attack 1 Sp_Defense 1 Speed 1 Accuracy 1 Evasion 1
	SelfTarget: True
	EffChance: 10
*
Tickle:
	Desc: The user tickles the target into laughing, reducing its Attack and Defense stats.
	PP: 20
	Type: Normal
	Acc: 100
	Cat: Status
	StatChange: 2 Attack -1 Defense -1
*
Dizzy Punch:
	Desc: The target is hit with rhythmically launched punches that may also leave it confused.
	PP: 10
	Cat: Physical
	Acc: 100
	MoveType: Punching
	Pow: 70
	Type: Normal
	Effect: Confusion
	EffChance: 20	
*
Outrage:
	Desc: The user rampages and attacks for two to three turns. It then becomes confused, however.
	PP: 10
	Pow: 120
	Cat: Physical
	Acc: 100
	Effect: SelfConfusion
	SelfTarget: True
	Type: Dragon
*
Dragon Dance:
	Desc: The user vigorously performs a mystic, powerful dance that boosts its Attack and Speed stats.
	PP: 20
	Cat: Status
	Type: Dragon
	StatChange: 2 Attack 1 Speed 1
	SelfTarget: True
*
Dragon Pulse:
	Desc: The target is attacked with a shock wave generated by the user's gaping mouth.
	PP: 10
	Pow: 85
	MoveType: Aura_Pulse
	Acc: 100
	Type: Dragon
	Cat: Special
*
Draco Meteor:
	Type: Dragon
	Desc: Comets are summoned down from the sky onto the target. The attack's recoil harshly reduces the user's Sp. Atk stat.
	PP: 5
	Pow: 130
	Acc: 90
	SelfTarget: True
	StatChange: 1 Sp_Attack -2
	Cat: Special
*
Waterfall:
	Desc: The user charges at the target and may make it flinch. It can also be used to climb a waterfall.
	PP: 15
	Type: Water
	Pow: 80
	Acc: 100
	Cat: Physical
	Effect: Flinch
	EffChance: 20
*
Reflect Type:
	Desc: The user reflects the target's type, making it the same type as the target.
	PP: 15
	Type: Normal
	Cat: Status
	SelfTarget: True
	Effect: ChangeType
	Int: ChangeTypeSource
	ChangeType: 
	return b.getOtherPokemon(caster.isPlayer()).getType(b).clone();
	###
	MoveType: Non_Snatchable
*
Magical Leaf:
	Desc: The user scatters curious leaves that chase the target. This attack will not miss.
	PP: 20
	Pow: 60
	Cat: Special
	Type: Grass
*
Power Swap:
	Desc: The user employs its psychic power to switch changes to its Attack and Sp. Atk with the target.
	PP: 10
	Type: Psychic
	Cat: Status
	StatSwapMove: Attack Sp_Attack
*
Guard Swap:
	PP: 10
	Desc: The user employs its psychic power to switch changes to its Defense and Sp. Def with the target.
	Type: Psychic
	Cat: Status
	StatSwapMove: Defense Sp_Defense
*
Speed Swap:
	Desc: The user exchanges Speed stats with the target.
	PP: 10
	Type: Psychic
	Cat: Status
	MoveType: No_Magic_Coat
	ApplyEffects:
	// NOTE: Looks like this is supposed to actually swap the stats and not just the stages but I don't really care it should do the same thing as power and guard swap because that makes more sense sue me
	user.getAttributes().swapStages(Stat.SPEED, victim);
	Messages.add(new MessageUpdate(user.getName() + " swapped its stats with " + victim.getName() + "!"));
	###
*
Copycat:
	Desc: The user mimics the move used immediately before it. The move fails if no other move has been used yet.
	Type: Normal
	PP: 20
	Cat: Status
	MirrorMove: True
*
Transform:
	Desc: The user transforms into a copy of the target right down to having the same move set.
	Cat: Status
	PP: 10
	Type: Normal
	Effect: Transformed
	SelfTarget: True
	MoveType: Non_Snatchable, Protect_Piercing, Encoreless, Assistless, Metronomeless
*
Substitute:
	Desc: The user makes a copy of itself using some of its HP. The copy serves as the user's decoy.
	PP: 10
	Type: Normal
	SelfTarget: True
	Effect: Substitute
	Cat: Status
*
Razor Wind:
	Desc: A two-turn attack. Blades of wind hit opposing Pok\u00e9mon on the second turn. Critical hits land more easily.
	PP: 10
	Type: Normal
	Cat: Special
	Acc: 100
	Pow: 80
	Int: MultiTurnMove, CritStageEffect
	ChargeMessage: user.getName() + " whipped up a whirlwind!"
	SemiInv: false
	ChargeFirst: true
*
Lovely Kiss:
	Desc: With a scary face, the user tries to force a kiss on the target. If it succeeds, the target falls asleep.
	PP: 10
	Type: Normal
	Cat: Status
	Acc: 75
	Status: Asleep
*
Powder Snow:
	Desc: The user attacks with a chilling gust of powdery snow. It may also freeze the targets.
	PP: 25
	Pow: 40
	Acc: 100
	Cat: Special
	Type: Ice
	Status: Frozen
	EffChance: 10
*
Heart Stamp:
	Desc: The user unleashes a vicious blow after its cute act makes the target less wary. It may also make the target flinch.
	PP: 25
	Type: Psychic
	Acc: 100
	Cat: Physical
	Pow: 60
	Effect: Flinch
	EffChance: 30
*
Fake Tears:
	Desc: The user feigns crying to fluster the target, harshly lowering its Sp. Def stat.
	PP: 20
	Acc: 100
	Cat: Status
	Type: Dark
	StatChange: 1 Sp_Defense -2
*
Avalanche:
	Desc: An attack move that inflicts double the damage if the user has been hurt by the target in the same turn.
	PP: 10
	Type: Ice
	Pow: 60
	Acc: 100
	Cat: Physical
	Priority: -4
	DoublePowerCondition: me.getAttributes().hasTakenDamage()
*
Blizzard:
	Desc: A howling blizzard is summoned to strike the opposing team. It may also freeze them solid.
	PP: 5
	Pow: 110
	Acc: 70
	Type: Ice
	Cat: Special
	Status: Frozen
	EffChance: 10
	Int: AccuracyBypassEffect
	BypassAccuracy:
	// Always hits when it's hailing unless the opponent is hiding (I think -- the hiding part is not specified on Bulbapedia)
	return b.getWeather().namesies() == EffectNamesies.HAILING && !defending.isSemiInvulnerable();
	###
*
Shock Wave:
	Desc: The user strikes the target with a quick jolt of electricity. This attack cannot be evaded.
	PP: 20
	Pow: 60
	Cat: Special
	Type: Electric
*
Lava Plume:
	Desc: An inferno of scarlet flames torches everything around the user. It may leave targets with a burn.
	PP: 15
	Type: Fire
	Pow: 80
	Acc: 100
	EffChance: 30
	Status: Burned
	Cat: Special
*
Work Up:
	Desc: The user is roused, and its Attack and Sp. Atk stats increase.
	PP: 30
	Type: Normal
	Cat: Status
	SelfTarget: True
	StatChange: 2 Attack 1 Sp_Attack 1
*
Giga Impact:
	Desc: The user charges at the target using every bit of its power. The user must rest on the next turn.
	PP: 5
	Pow: 150
	Acc: 90
	Cat: Physical
	Int: MultiTurnMove
	ChargeFirst: false
	SemiInv: false
	ChargeMessage: user.getName() + " must recharge!"
	Type: Normal
*
Splash:
	Desc: The user just flops and splashes around to no effect at all...
	PP: 40
	Type: Normal
	Cat: Status
	SelfTarget: True
	ApplyEffects:
	Messages.add(new MessageUpdate("But nothing happened..."));
	###
	MoveType: Airborne
*
Mist:
	Desc: The user cloaks its body with a white mist that prevents any of its stats from being cut for five turns.
	PP: 30
	Type: Ice
	Cat: Status
	SelfTarget: True
	Effect: Mist
*
Last Resort:
	Desc: This move can be used only after the user has used all the other moves it knows in the battle.
	PP: 5
	Cat: Physical
	Acc: 100
	Pow: 140
	Type: Normal
	Apply:
	for (Move m : me.getMoves(b)) {
		if (m.getAttack().namesies() == super.namesies) {
			continue;
		}
		
		if (!m.used()) {
			Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
			return;
		}
	}
	
	super.apply(me, o, b);
	###
*
Trump Card:
	Desc: The fewer PP this move has, the greater its attack power.
	PP: 5
	Type: Normal
	PhysicalContact: True
	Cat: Special
	GetPow: 
	int pp = me.getMove().getPP();
	
	switch (pp) {
		case 1:
			return 190;
		case 2:
			return 75;
		case 3:
			return 60;
		case 4:
			return 50;
		default:
			return 40;
	}
	###
*
Muddy Water:
	Desc: The user attacks by shooting muddy water at the opposing team. It may also lower the targets' accuracy.
	PP: 10
	Type: Water
	Acc: 85
	Pow: 90
	Cat: Special
	StatChange: 1 Accuracy -1
	EffChance: 30
*
Conversion:
	Desc: The user changes its type to become the same type as one of its moves.
	PP: 30
	Type: Normal
	Cat: Status
	SelfTarget: True
	Apply: 
	for (Move m : me.getMoves(b)) {
		if (!me.isType(b, m.getAttack().getActualType())) {
			super.apply(me, o, b);
			return;
		}
	}
	
	Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
	###
	Int: ChangeTypeSource
	ChangeType: 
	List<Type> types = new ArrayList<>();
	for (Move m : victim.getMoves(b)) {
		Type t = m.getAttack().getActualType();
		if (!victim.isType(b, t)) {
			types.add(t);
		}
	}
	
	return new Type[] { RandomUtils.getRandomValue(types), Type.NO_TYPE };
	###
	Effect: ChangeType
*
Conversion 2:
	MoveType: Non_Snatchable
	Desc: The user changes its type to make itself resistant to the type of the attack the opponent used last.
	PP: 30
	Type: Normal
	Cat: Status
	SelfTarget: True
	Int: ChangeTypeSource
	Apply: 
	Move m = o.getAttributes().getLastMoveUsed();
	if (m == null || getResistances(me, m.getType(), b).size() == 0) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	super.apply(me, o, b);
	###
	Effect: ChangeType
	ChangeType: 
	ActivePokemon other = b.getOtherPokemon(victim.isPlayer());
	List<Type> types = getResistances(victim, other.getAttributes().getLastMoveUsed().getType(), b);
	return new Type[] { RandomUtils.getRandomValue(types), Type.NO_TYPE };
	###
	Field: 
	private List<Type> getResistances(ActivePokemon victim, Type attacking, Battle b) {
		List<Type> types = new ArrayList<>();
		for (Type t : Type.values()) {
			if (attacking.getAdvantage().isNotVeryEffective(t) && !victim.isType(b, t)) {
				types.add(t);
			}
		}
				
		return types;
	}
	###
*
Sharpen:
	Desc: The user reduces its polygon count to make itself more jagged, raising the Attack stat.
	Type: Normal
	Cat: Status
	SelfTarget: True
	StatChange: 1 Attack 1
	PP: 30
*
Magic Coat:
	Desc: A barrier reflects back to the target moves like Leech Seed and moves that damage status.
	PP: 15
	Type: Psychic
	Cat: Status
	Effect: MagicCoat
	SelfTarget: True
	Priority: 4
	MoveType: Non_Snatchable
*
Sky Drop:
	Desc: The user takes the target into the sky, then slams it into the ground.
	PP: 10
	Pow: 60
	Type: Flying
	Cat: Physical
	Acc: 100
	MoveType: Airborne
	ApplyError: o.getWeight(b) > 440
*
Iron Head:
	Desc: The user slams the target with its steel-hard head. It may also make the target flinch.
	PP: 15
	Pow: 80
	Acc: 100
	Cat: Physical
	Type: Steel
	Effect: Flinch
	EffChance: 30
*
Rock Slide:
	Desc: Large boulders are hurled at the opposing team to inflict damage. It may also make the targets flinch.
	PP: 10
	Pow: 75
	Acc: 90
	Cat: Physical
	Type: Rock
	Effect: Flinch
	PhysicalContact: False
	EffChance: 30
*
Snore:
	Desc: An attack that can be used only if the user is asleep. The harsh noise may also make the target flinch.
	PP: 15
	Pow: 50
	Acc: 100
	Cat: Special
	Type: Normal
	Int: SleepyFightsterEffect
	MoveType: Sound_Based, Metronomeless
	Effect: Flinch
	EffChance: 30
	ApplyError: !me.hasStatus(StatusCondition.ASLEEP)
*
Sleep Talk:
	Desc: While it is asleep, the user randomly uses one of the moves it knows.
	PP: 10
	Type: Normal
	Cat: Status
	Int: SleepyFightsterEffect
	MoveType: No_Magic_Coat, Sleep_Talk_Fail, Assistless, Metronomeless
	Apply: 
	if (!me.hasStatus(StatusCondition.ASLEEP)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	List<Move> moves = new ArrayList<>();
	for (Move m : me.getMoves(b)) {
		if (!m.getAttack().isMoveType(MoveType.SLEEP_TALK_FAIL)) {
			moves.add(m);
		}
	}
	
	if (moves.size() == 0) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	me.callNewMove(b, o, RandomUtils.getRandomValue(moves));
	###
*
Block:
	Desc: The user blocks the target's way with arms spread wide to prevent escape.
	PP: 5
	Type: Normal
	Cat: Status
	Effect: Trapped
*
Sky Attack:
	Desc: A second-turn attack move where critical hits land more easily. It may also make the target flinch.
	PP: 5
	Pow: 140
	Acc: 90
	PhysicalContact: False
	Cat: Physical
	Effect: Flinch
	EffChance: 30
	Int: MultiTurnMove, CritStageEffect
	ChargeFirst: true
	SemiInv: false
	ChargeMessage: user.getName() + " started glowing!"
	Type: Flying
*
Dragon Rush:
	Desc: The user tackles the target while exhibiting overwhelming menace. It may also make the target flinch.
	PP: 10
	Acc: 75
	Pow: 100
	Type: Dragon
	Cat: Physical
	Effect: Flinch
	EffChance: 20
	HitMinimize: True
*
Aura Sphere:
	Desc: The user looses a blast of aura power from deep within its body at the target. This move is certain to hit.
	PP: 20
	Type: Fighting
	Cat: Special
	Pow: 80
	MoveType: Bomb_Ball, Aura_Pulse
*
Psystrike:
	Desc: The user materializes an odd psychic wave to attack the target. This attack does physical damage.
	PP: 10
	Pow: 100
	Cat: Special
	Type: Psychic
	Acc: 100
	Int: OpponentStatSwitchingEffect
	OppSwitchStat: 
	return s == Stat.SP_DEFENSE ? Stat.DEFENSE : s;
	###
*
Eruption:
	Desc: The user attacks the opposing team with explosive fury. The lower the user's HP, the less powerful this attack becomes.
	PP: 5
	Acc: 100
	Cat: Special
	Type: Fire
	HPRatioMove: 150 me
*
Charm: 
	Desc: The user gazes at the target rather charmingly, making it less wary. The target's Attack is harshly lowered.
	PP: 20
	Type: Fairy
	Acc: 100
	Cat: Status
	StatChange: 1 Attack -2
*
Echoed Voice:
	GetPow: 
	return super.power*Math.min(5, me.getAttributes().getCount());
	###
	Desc: The user attacks the target with an echoing voice. If this move is used every turn, it does greater damage.
	PP: 15
	Type: Normal
	Pow: 40
	Acc: 100
	Cat: Special
	MoveType: Sound_Based
*
Psycho Shift:
	Desc: Using its psychic power of suggestion, the user transfers its status problems to the target.
	PP: 10
	Type: Psychic
	Cat: Status
	Acc: 100
	ApplyEffects: 
	String message = user.getName() + " transferred its status condition to " + victim.getName() + "!";
	if (!user.hasStatus() || !Status.giveStatus(b, user, victim, user.getStatus().getType(), message)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	user.removeStatus();
	Messages.add(new MessageUpdate().updatePokemon(b, user));
	###
	MoveType: No_Magic_Coat
*	
Shadow Sneak:
	Desc: The user extends its shadow and attacks the target from behind. This move always goes first.
	PP: 30
	Pow: 40
	Priority: 1
	Cat: Physical
	Acc: 100
	Type: Ghost
*
Spider Web:
	Desc: The user ensnares the target with thin, gooey silk so it can't flee from battle.
	PP: 10
	Type: Bug
	Cat: Status
	Effect: Trapped
*
Sweet Kiss:
	Desc: The user kisses the target with a sweet, angelic cuteness that causes confusion.
	PP: 10
	Type: Fairy
	Acc: 75
	Cat: Status
	Effect: Confusion
*
Ominous Wind:
	Desc: The user blasts the target with a gust of repulsive wind. It may also raise all the user's stats at once.
	PP: 5
	Type: Ghost
	Cat: Special
	Acc: 100
	Pow: 60
	StatChange: 7 Attack 1 Defense 1 Sp_Attack 1 Sp_Defense 1 Speed 1 Accuracy 1 Evasion 1
	SelfTarget: True
	EffChance: 10
*
Cotton Spore:
	Desc: The user releases cotton-like spores that cling to the target, harshly reducing its Speed stat.
	PP: 40
	Acc: 100
	Type: Grass
	Cat: Status
	StatChange: 1 Speed -2
	MoveType: Powder
*
Cotton Guard:
	Desc: The user protects itself by wrapping its body in soft cotton, drastically raising the user's Defense stat.
	PP: 10
	Type: Grass
	Cat: Status
	StatChange: 1 Defense 3
	SelfTarget: True
*
Grass Whistle:
	Desc: The user plays a pleasant melody that lulls the target into a deep sleep.
	PP: 15
	Type: Grass
	Cat: Status
	Acc: 55
	Status: Asleep
	MoveType: Sound_Based
*
Torment:
	Desc: The user torments and enrages the target, making it incapable of using the same move twice in a row.
	PP: 15
	Acc: 100
	Type: Dark
	Cat: Status
	Effect: Torment
	MoveType: Substitute_Piercing
*
Hidden Power:
	Desc: A unique attack that varies in type and intensity depending on the Pok\u00e9mon using it.
	PP: 15
	Type: Normal
	Cat: Special
	Acc: 100
	GetType: 
	return user.computeHiddenPowerType();
	###
	Pow: 60
*
Psywave:
	Desc: The target is attacked with an odd psychic wave. The attack varies in intensity.
	PP: 15
	Type: Psychic
	Cat: Special
	Acc: 100
	FixedDamage: (int)Math.max(1, (RandomUtils.getRandomInt(11) + 5)*me.getLevel()/10.0)
*
Pain Split:
	Desc: The user adds its HP to the target's HP, then equally shares the combined HP with the target.
	PP: 20
	Type: Normal
	Cat: Status
	ApplyEffects: 
	int share = (user.getHP() + victim.getHP())/2;
	user.setHP(share);
	victim.setHP(share);
	
	Messages.add(new MessageUpdate(user.getName() + " and " + victim.getName() + " split their pain!").updatePokemon(b, user));
	Messages.add(new MessageUpdate().updatePokemon(b, victim));
	###
	MoveType: No_Magic_Coat
*
Bide:
	Desc: The user endures attacks for two turns, then strikes back to cause double the damage taken.
	PP: 10
	Cat: Physical
	Type: Normal
	Effect: Bide
	SelfTarget: True
	Priority: 1
	Apply:
	super.applyEffects(b, me, me);
	###
	MoveType: Sleep_Talk_Fail
*
Autotomize:
	Desc: The user sheds part of its body to make itself lighter and sharply raise its Speed stat.
	PP: 15
	Type: Steel
	SelfTarget: True
	Cat: Status
	StatChange: 1 Speed 2
	Effect: HalfWeight
*
Struggle Bug:
	Desc: While resisting, the user attacks the opposing Pok\u00e9mon. The targets' Sp. Atk stat is reduced.
	PP: 20
	Type: Bug
	Cat: Special
	Acc: 100
	StatChange: 1 Sp_Attack -1
	Pow: 50
*
Power Trick:
	Desc: The user employs its psychic power to switch its Attack with its Defense stat.
	PP: 10
	Type: Psychic
	Cat: Status
	SelfTarget: True
	Effect: PowerTrick
*
Power Split:
	Desc: The user employs its psychic power to average its Attack and Sp. Atk stats with those of the target's.
	PP: 10
	Type: Psychic
	Cat: Status
	Effect: PowerSplit
	SelfTarget: True
	MoveType: Non_Snatchable
*
Guard Split:
	Desc: The user employs its psychic power to average its Defense and Sp. Def stats with those of its target's.
	PP: 10
	Type: Psychic
	Cat: Status
	Effect: GuardSplit
	SelfTarget: True
	MoveType: Non_Snatchable
*
Hone Claws:
	Desc: The user sharpens its claws to boost its Attack stat and accuracy.
	PP: 15
	Type: Dark
	StatChange: 2 Attack 1 Accuracy 1
	SelfTarget: True
	Cat: Status
*
Beat Up:
	Desc: The user gets all party Pok\u00e9mon to attack the target. The more party Pok\u00e9mon, the greater the number of attacks.
	Pow: 10
	Acc: 100
	Cat: Physical
	Type: Dark
	ApplyDamage: 
	for (ActivePokemon p : b.getTrainer(me.isPlayer()).getTeam()) {
		// Only healthy Pokemon get to attack
		if (!p.canFight() || p.hasStatus()) {
			continue;
		}
		
		// Stop killing the dead
		if (o.isFainted(b)) {
			break;
		}
		
		Move temp = p.getMove();
		p.setMove(new Move(super.namesies.getAttack()));
		Messages.add(new MessageUpdate(p.getName() + "'s attack!"));
		super.applyDamage(p, o, b);
		p.setMove(temp);
	}
	###
	PhysicalContact: False
	PP: 10
*
Octazooka:
	Desc: The user attacks by spraying ink in the target's face or eyes. It may also lower the target's accuracy.
	PP: 10
	Type: Water
	Pow: 65
	Acc: 85
	Cat: Special
	StatChange: 1 Accuracy -1
	EffChance: 50
	MoveType: Bomb_Ball
*
Present:
	Desc: The user attacks by giving the target a gift with a hidden trap. It restores HP sometimes, however.
	PP: 15
	Type: Normal
	Cat: Physical
	Acc: 90
	PhysicalContact: False
	GetPow: 
	double random = RandomUtils.getRandomInt(80);
	if (random < 40) {
		return 40;
	}
	else if (random < 70) {
		return 80;
	}
	else {
		return 120;
	}
	###
	Apply: 
	if (!effective(b, me, o)) {
		return;
	}
	
	if (RandomUtils.chanceTest(80)) {
		super.applyDamage(me, o, b);
		return;
	}
	
	if (o.fullHealth() || o.hasEffect(EffectNamesies.HEAL_BLOCK)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	o.healHealthFraction(1/4.0);
	Messages.add(new MessageUpdate(o.getName() + "'s health was restored!").updatePokemon(b, o));
	###
*
Steel Wing:
	Desc: The target is hit with wings of steel. It may also raise the user's Defense stat.
	PP: 25
	Type: Steel
	Cat: Physical
	Acc: 90
	Pow: 70
	StatChange: 1 Defense 1
	SelfTarget: True
	EffChance: 10
*
Sketch:
	PP: 1
	Desc: It enables the user to permanently learn the move last used by the target. Once used, Sketch disappears.
	Type: Normal
	MoveType: Sleep_Talk_Fail, Encoreless, Mimicless, Assistless, Metronomeless, Protect_Piercing, No_Magic_Coat
	Cat: Status
	ApplyEffects: 
	Move copy = victim.getAttributes().getLastMoveUsed();
	if (copy == null || copy.getAttack().namesies() == AttackNamesies.STRUGGLE || user.hasEffect(EffectNamesies.TRANSFORMED)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	List<Move> moves = user.getMoves(b);
	for (int i = 0; i < moves.size(); i++) {
		if (moves.get(i).getAttack().namesies() == super.namesies) {
			moves.add(i, new Move(copy.getAttack()));
			moves.remove(i + 1);
			Messages.add(new MessageUpdate(user.getName() + " learned " + moves.get(i).getAttack().getName() + "!"));
			break;
		}
	}
	###
*
Triple Kick:
	Desc: A consecutive three-kick attack that becomes more powerful with each successive hit.
	PP: 10
	Type: Fighting
	Pow: 20
	Acc: 90
	Cat: Physical
	MultiStrike: 3 3
*
Milk Drink:
	Type: Normal
	Cat: Status
	PP: 10
	Desc: The user restores its own HP by up to half of its maximum HP. May also be used in the field to heal HP.
	SelfHealing: 2
	Int: SelfHealingMove
*
Heal Bell:
	PP: 5
	Desc: The user makes a soothing bell chime to heal the status problems of all the party Pok\u00e9mon.
	HealPartyStatus: True
	Type: Normal
	Cat: Status
	MoveType: Sound_Based, Healing
*
Weather Ball:
	GetType: 
	return b.getWeather().getElement();
	###
	DoublePowerCondition: b.getWeather().namesies() != EffectNamesies.CLEAR_SKIES
	Pow: 50
	Acc: 100
	Cat: Special
	Desc: An attack move that varies in power and type depending on the weather.
	PP: 10
	Type: Normal
	MoveType: Bomb_Ball
*
Aeroblast:
	Desc: A vortex of air is shot at the target to inflict damage. Critical hits land more easily.
	PP: 5
	Type: Flying
	Cat: Special
	Acc: 95
	Pow: 100
	Int: CritStageEffect
*
Sacred Fire:
	Desc: The target is razed with a mystical fire of great intensity. It may also leave the target with a burn.
	PP: 5
	Pow: 100
	Acc: 95
	Status: Burned
	EffChance: 50
	Type: Fire
	Cat: Physical
	PhysicalContact: False
	MoveType: Defrost
*
Heal Block:
	Desc: For five turns, the user prevents the opposing team from using any moves, Abilities, or held items that recover HP.
	PP: 15
	Type: Psychic
	Acc: 100
	Effect: HealBlock
	Cat: Status
*
Energy Ball:
	Desc: The user draws power from nature and fires it at the target. It may also lower the target's Sp. Def.
	PP: 10
	Pow: 90
	Type: Grass
	Cat: Special
	Acc: 100
	StatChange: 1 Sp_Defense -1
	EffChance: 10
	MoveType: Bomb_Ball
*
Bulk Up:
	Desc: The user tenses its muscles to bulk up its body, boosting both its Attack and Defense stats.
	PP: 20
	Type: Fighting
	Cat: Status
	SelfTarget: True
	StatChange: 2 Attack 1 Defense 1
*
Thief:
	Desc: The user attacks and steals the target's held item simultaneously. It can't steal if the user holds an item.
	PP: 25
	MoveType: Assistless
	Type: Dark
	Pow: 60
	Cat: Physical
	Acc: 100
	SwitchItems: user.isHoldingItem(b) || !victim.isHoldingItem(b) || b.getTrainer(user.isPlayer()) instanceof WildPokemon || victim.hasAbility(AbilityNamesies.STICKY_HOLD)
	SwitchItemMessage: user.getName() + " stole " + victim.getName() + "'s " + victimItem.getName() + "!"
*
Attract:
	Desc: If it is the opposite gender of the user, the target becomes infatuated and less likely to attack.
	PP: 15
	Type: Normal
	Cat: Status
	Acc: 100
	Effect: Infatuated
	MoveType: Substitute_Piercing
*
Force Palm:
	Desc: The target is attacked with a shock wave. It may also leave the target with paralysis.
	PP: 10
	Type: Fighting
	Acc: 100
	Cat: Physical
	Pow: 60
	Status: Paralyzed
	EffChance: 30
*
Arm Thrust:
	Desc: The user looses a flurry of open-palmed arm thrusts that hit two to five times in a row.
	PP: 20
	Type: Fighting
	Cat: Physical
	Acc: 100
	Pow: 15
	MultiStrike: 2 5
*
Smelling Salts:
	Desc: This attack inflicts double damage on a target with paralysis. It also cures the target's paralysis, however.
	PP: 10
	Cat: Physical
	Acc: 100
	Type: Normal
	Pow: 70
	StatusCureMove: Paralyzed
*
Assist:
	Desc: The user hurriedly and randomly uses a move among those known by other Pok\u00e9mon in the party.
	PP: 20
	Type: Normal
	Cat: Status
	MoveType: No_Magic_Coat, Sleep_Talk_Fail, Metronomeless, Assistless
	Apply: 
	List<Attack> attacks = new ArrayList<>();
	for (ActivePokemon p : b.getTrainer(me.isPlayer()).getTeam()) {
		if (p == me) {
			continue;
		}
		
		for (Move move : p.getMoves(b)) {
			if (!move.getAttack().isMoveType(MoveType.ASSISTLESS)) {
				attacks.add(move.getAttack());
			}
		}
	}
	
	if (attacks.isEmpty()) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	me.callNewMove(b, o, new Move(RandomUtils.getRandomValue(attacks)));
	###
*
Metal Burst:
	Desc: The user retaliates with much greater power against the target that last inflicted damage on it.
	PP: 10
	Type: Steel
	Cat: Physical
	Acc: 100
	PhysicalContact: False
	ApplyDamage:
	int damageTaken = me.getAttributes().getDamageTaken();
	if (damageTaken == 0 || b.isFirstAttack()) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	o.reduceHealth(b, (int)(damageTaken*1.5));
	###
*
Wild Charge:
	Desc: The user shrouds itself in electricity and smashes into its target. It also damages the user a little.
	PP: 15
	Type: Electric
	Cat: Physical
	Acc: 100
	Pow: 90
	Recoil: 4
	Int: RecoilMove
*
Flash:
	Desc: The user flashes a bright light that cuts the target's accuracy. It can also be used to illuminate caves.
	PP: 20
	Acc: 100
	Cat: Status
	Type: Normal
	StatChange: 1 Accuracy -1
*
Tail Glow:
	Desc: The user stares at flashing lights to focus its mind, drastically raising its Sp. Atk stat.
	PP: 20
	Type: Bug
	Cat: Status
	StatChange: 1 Sp_attack 3
	SelfTarget: True
*
Water Spout:
	Desc: The user spouts water to damage the opposing team. The lower the user's HP, the less powerful it becomes.
	PP: 5
	Acc: 100
	Cat: Special
	Type: Water
	HPRatioMove: 150 me
*
Teeter Dance:
	Desc: The user performs a wobbly dance that confuses the Pok\u00e9mon around it.
	PP: 20
	Type: Normal
	Cat: Status
	Acc: 100
	Effect: Confusion
*
Needle Arm:
	Desc: The user attacks by wildly swinging its thorny arms. It may also make the target flinch.
	PP: 15
	Type: Grass
	Cat: Physical
	Pow: 60
	Acc: 100
	Effect: Flinch
	EffChance: 30
*
Venoshock:
	Desc: The user drenches the target in a special poisonous liquid. Its power is doubled if the target is poisoned.
	PP: 10
	Type: Poison
	Cat: Special
	Acc: 100
	Pow: 65
	DoublePowerCondition: o.hasStatus(StatusCondition.POISONED)
*
Snatch:
	Priority: 4
	Desc: The user steals the effects of any healing or stat-changing move the opponent attempts to use.
	PP: 10
	Type: Dark
	Cat: Status
	Effect: Snatch
	SelfTarget: True
	MoveType: Assistless, Metronomeless, Non_Snatchable
*
Ice Ball:
	Desc: The user continually rolls into the target over five turns. It becomes stronger each time it hits.
	PP: 20
	Cat: Physical
	Pow: 30
	Type: Ice
	Acc: 90
	MoveType: Bomb_Ball
	GetPow: 
	return super.power*(int)Math.min(me.getAttributes().getCount(), 5)*(me.hasEffect(EffectNamesies.USED_DEFENSE_CURL) ? 2 : 1);
	###
*
Head Smash:
	Desc: The user attacks the target with a hazardous, full-power headbutt. The user also takes terrible damage.
	PP: 5
	Type: Rock
	Pow: 150
	Acc: 80
	Cat: Physical
	Recoil: 2
	Int: RecoilMove
*
Mist Ball:
	Desc: A mistlike flurry of down envelops and damages the target. It may also lower the target's Sp. Atk.
	PP: 5
	Type: Psychic
	Cat: Special
	Acc: 100
	Pow: 70
	StatChange: 1 Sp_Attack -1
	EffChance: 50
	MoveType: Bomb_Ball
*
Luster Purge:
	Desc: The user lets loose a damaging burst of light. It may also reduce the target's Sp. Def stat.
	PP: 5
	Pow: 70
	Cat: Special
	Acc: 100
	StatChange: 1 Sp_Defense -1
	EffChance: 50
	Type: Psychic
*
Psycho Boost:
	Desc: The user attacks the target at full power. The attack's recoil harshly reduces the user's Sp. Atk stat.
	PP: 5
	Type: Psychic
	Pow: 140
	Cat: Special
	Acc: 90
	StatChange: 1 Sp_Attack -2
	SelfTarget: True
*
Facade:
	Desc: An attack move that doubles its power if the user is poisoned, burned, or has paralysis.
	PP: 20
	Type: Normal
	Pow: 70
	DoublePowerCondition: me.hasStatus()
	StartTurn: // TODO: Should not take the attack reduction from burn
	Acc: 100
	Cat: Physical
*
Defend Order:
	Desc: The user calls out its underlings to shield its body, raising its Defense and Sp. Def stats.
	PP: 10
	Type: Bug
	Cat: Status
	SelfTarget: True
	StatChange: 2 Defense 1 Sp_Defense 1
*
Heal Order:
	Desc: The user calls out its underlings to heal it. The user regains up to half of its max HP.
	PP: 10
	Type: Bug
	SelfHealing: 2
	Int: SelfHealingMove
	Cat: Status
*
Attack Order:
	Desc: The user calls out its underlings to pummel the target. Critical hits land more easily.
	PP: 15
	Type: Bug
	Cat: Physical
	Pow: 90
	Int: CritStageEffect
	Acc: 100
	PhysicalContact: False
*
Chatter:
	Desc: The user attacks using a sound wave based on words it has learned. It may also confuse the target.
	PP: 20
	Type: Flying
	Pow: 65
	Cat: Special
	Effect: Confusion
	Acc: 100
	MoveType: Sound_Based
*
Dual Chop:
	Desc: The user attacks its target by hitting it with brutal strikes. The target is hit twice in a row.
	PP: 15
	Type: Dragon
	Cat: Physical
	Acc: 90
	Pow: 40
	MultiStrike: 2 2
*
Rock Wrecker:
	Desc: The user launches a huge boulder at the target to attack. It must rest on the next turn, however.
	PP: 5
	Type: Rock
	Cat: Physical
	Acc: 90
	Pow: 150
	Int: MultiTurnMove
	ChargeFirst: false
	SemiInv: false
	ChargeMessage: user.getName() + " must recharge!"
	PhysicalContact: False
	MoveType: Bomb_Ball
*
Trick Room:
	Desc: The user creates a bizarre area in which slower Pok\u00e9mon get to move first for five turns.
	PP: 5
	Type: Psychic
	Priority: -7
	Cat: Status
	BattleEffect: TrickRoom
*
Roar Of Time:
	Desc: The user blasts the target with power that distorts even time. The user must rest on the next turn.
	PP: 5
	Type: Dragon
	Cat: Special
	Acc: 90
	Pow: 150
	Int: MultiTurnMove
	ChargeFirst: false
	SemiInv: false
	ChargeMessage: user.getName() + " must recharge!"
*
Spacial Rend:
	Desc: The user tears the target along with the space around it. Critical hits land more easily.
	PP: 5
	Pow: 100
	Acc: 95
	Cat: Special
	Int: CritStageEffect
	Type: Dragon
*
Magma Storm:
	Desc: The target becomes trapped within a maelstrom of fire that rages for four to five turns.
	PP: 5
	Pow: 100
	Acc: 75
	Cat: Special
	Type: Fire
	Effect: MagmaStorm
*
Crush Grip:
	Desc: The target is crushed with great force. The attack is more powerful the more HP the target has left.
	PP: 5
	Type: Normal
	Acc: 100
	Cat: Physical
	HPRatioMove: 120 o
*
Shadow Force:
	Desc: The user disappears, then strikes the target on the second turn. It hits even if the target protects itself.
	PP: 5
	Type: Ghost
	Cat: Physical
	Acc: 100
	Pow: 120
	Int: MultiTurnMove
	ChargeFirst: true
	SemiInv: true
	ChargeMessage: user.getName() + " disappeared!"
	MoveType: Protect_Piercing
*
Heart Swap:
	Desc: The user employs its psychic power to switch stat changes with the target.
	PP: 10
	Type: Psychic
	Cat: Status
	MoveType: Substitute_Piercing, No_Magic_Coat
	ApplyEffects: 
	for (int i = 0; i < Stat.NUM_BATTLE_STATS; i++)
	{
		int temp = user.getAttributes().getStage(i);
		user.getAttributes().setStage(i, victim.getAttributes().getStage(i));
		victim.getAttributes().setStage(i, temp);
	}
	
	Messages.add(new MessageUpdate(user.getName() + " swapped its stats with " + victim.getName() + "!"));
	###
*	
Dark Void:
	Desc: Opposing Pok\u00e9mon are dragged into a world of total darkness that makes them sleep.
	PP: 10
	Type: Dark
	Cat: Status
	Status: Asleep
	Acc: 80
*
Seed Flare:
	Desc: The user emits a shock wave from its body to attack its target. It may harshly lower the target's Sp. Def.
	PP: 5
	Type: Grass
	Pow: 120
	Cat: Special
	Acc: 85
	StatChange: 1 Sp_Defense -2
	EffChance: 40
*
Judgement:
	Desc: The user releases countless shots of light at the target. Its type varies with the kind of Plate the user is holding.
	PP: 10
	Pow: 100
	Cat: Special
	Acc: 100
	SpecialItemMove: PlateItem
*
Searing Shot:
	Desc: An inferno of scarlet flames torches everything around the user. It may leave targets with a burn.
	PP: 5
	Type: Fire
	Pow: 100
	Acc: 100
	Cat: Special
	Status: Burned
	EffChance: 30
	MoveType: Bomb_Ball
*
Incinerate:
	Desc: The user attacks the target with fire. If the target is holding a Berry, the Berry becomes burnt up and unusable.
	PP: 15
	Type: Fire
	Cat: Special
	Acc: 100
	Pow: 60
	ApplyEffects: 
	Item heldItem = victim.getHeldItem(b);
	
	if (heldItem instanceof Berry || heldItem instanceof GemItem) {
		Messages.add(new MessageUpdate(victim.getName() + "'s " + heldItem.getName() + " was burned!"));
		victim.consumeItem(b);
	}
	###
*
Overheat:
	Desc: The user attacks the target at full power. The attack's recoil harshly reduces the user's Sp. Atk stat.
	PP: 5
	Pow: 130
	Cat: Special
	Acc: 90
	Type: Fire
	StatChange: 1 Sp_attack -2
	SelfTarget: True
*
Heat Crash:
	Desc: The user slams its target with its flame- covered body. The more the user outweighs the target, the greater the damage.
	PP: 10
	Cat: Physical
	Acc: 100
	Type: Fire
	WeightRatio: o me
*
Grass Knot:
	Desc: The user snares the target with grass and trips it. The heavier the target, the greater the damage.
	PP: 20
	Type: Grass
	Cat: Special
	PhysicalContact: True
	Acc: 100
	WeightBased: o
*
Scald:
	Desc: The user shoots boiling hot water at its target. It may also leave the target with a burn.
	PP: 15
	Pow: 80
	Cat: Special
	Acc: 100
	Type: Water
	Status: Burned
	EffChance: 30
	MoveType: Defrost
*
Drain Punch:
	Desc: An energy-draining punch. The user's HP is restored by half the damage taken by the target.
	PP: 10
	Type: Fighting
	Pow: 75
	MoveType: Punching
	Int: SapHealthEffect
	Acc: 100
	Cat: Physical
*
Storm Throw:
	Desc: The user strikes the target with a fierce blow. This attack always results in a critical hit.
	PP: 10
	Pow: 60
	Acc: 100
	Type: Fighting
	Cat: Physical
	Int: AlwaysCritEffect
*
Frost Breath:
	Desc: The user blows a cold breath on the target. This attack always results in a critical hit.
	PP: 10
	Type: Ice
	Cat: Special
	Int: AlwaysCritEffect
	Pow: 60
	Acc: 90
*
Rock Smash:
	Desc: The user attacks with a punch that can shatter a rock. It may also lower the target's Defense stat.
	PP: 15
	Type: Fighting
	Pow: 40
	Acc: 100
	Cat: Physical
	StatChange: 1 Defense -1
	EffChance: 50
*
Rock Climb:
	Desc: The user attacks the target by smashing into it with incredible force. It may also confuse the target.
	PP: 20
	Pow: 90
	Acc: 85
	Type: Normal
	Cat: Physical
	Effect: Confusion
	EffChance: 20
*
Night Daze:
	Desc: The user lets loose a pitch-black shock wave at its target. It may also lower the target's accuracy.
	PP: 10
	Pow: 85
	Type: Dark
	Cat: Special
	Acc: 95
	StatChange: 1 Accuracy -1
	EffChance: 40
*
Tail Slap:
	Desc: The user attacks by striking the target with its hard tail. It hits the target two to five times in a row.
	PP: 10
	Pow: 25
	Acc: 85
	Type: Normal
	MultiStrike: 2 5
	Cat: Physical
*
Defog:
	Desc: A strong wind blows away the target's obstacles such as Reflect or Light Screen. It also lowers the target's evasiveness.
	PP: 15
	Type: Flying
	Cat: Status
	StatChange: 1 Evasion -1
	ApplyEffects:
	super.applyEffects(b, user, victim);
	DefogRelease.release(b, victim);
	###
*
Horn Leech:
	Desc: The user drains the target's energy with its horns. The user's HP is restored by half the damage taken by the target.
	PP: 10
	Type: Grass
	Cat: Physical
	Acc: 100
	Pow: 75
	Int: SapHealthEffect
*
Electroweb:
	Desc: The user captures and attacks opposing Pok\u00e9mon by using an electric net. It reduces the targets' Speed stat.
	PP: 15
	Cat: Special
	StatChange: 1 Speed -1
	Pow: 55
	Acc: 95
	Type: Electric
*
Gear Grind:
	Desc: The user attacks by throwing two steel gears at its target.
	PP: 15
	Type: Steel
	Acc: 85
	PhysicalContact: False
	Cat: Physical
	Pow: 50
	MultiStrike: 2 2
*
Shift Gear:
	Desc: The user rotates its gears, raising its Attack and sharply raising its Speed.
	PP: 10
	Type: Steel
	Cat: Status
	SelfTarget: True
	StatChange: 2 Attack 1 Speed 2
*
Head Charge:
	Desc: The user charges its head into its target, using its powerful guard hair. It also damages the user a little.
	PP: 15
	Recoil: 4
	Int: RecoilMove
	Pow: 120
	Acc: 100
	Cat: Physical
	Type: Normal
*
Fiery Dance:
	Desc: Cloaked in flames, the user dances and flaps its wings. It may also raise the user's Sp. Atk stat.
	PP: 10
	Type: Fire
	Cat: Special
	Acc: 100
	Pow: 80
	StatChange: 1 Sp_attack 1
	SelfTarget: True
	EffChance: 50
*
Sacred Sword:
	Desc: The user attacks by slicing with its long horns. The target's stat changes don't affect this attack's damage.
	PP: 20
	Pow: 90
	Acc: 100
	Cat: Physical
	Type: Fighting
	Int: OpponentIgnoreStageEffect
	IgnoreStage:
	return !s.user();
	###
*
Secret Sword:
	MoveType: Metronomeless
	Desc: The user cuts with its long horn. The odd power contained in the horn does physical damage to the target.
	PP: 10
	Type: Fighting
	Cat: Special
	Acc: 100
	Pow: 85
	Int: OpponentStatSwitchingEffect
	OppSwitchStat:
	// TODO: Can combine this with Psystrike
	return s == Stat.SP_DEFENSE ? Stat.DEFENSE : s;
	###
*
Fusion Flare:
	Desc: The user brings down a giant flame. This attack does greater damage when influenced by an enormous thunderbolt.
	PP: 5
	Pow: 100
	Acc: 100
	Cat: Special
	Type: Fire
	DoublePowerCondition: !b.isFirstAttack() && o.getAttack().namesies() == AttackNamesies.FUSION_BOLT
	StartTurn: // TODO: Can combine power condition with Fusion Bolt
	MoveType: Defrost
*
Fusion Bolt:
	Desc: The user throws down a giant thunderbolt. This attack does greater damage when influenced by an enormous flame.
	PP: 5
	Pow: 100
	Type: Electric
	PhysicalContact: False
	Cat: Physical
	Acc: 100
	DoublePowerCondition: !b.isFirstAttack() && o.getAttack().namesies() == AttackNamesies.FUSION_FLARE
*
Blue Flare:
	Desc: The user attacks by engulfing the target in an intense, yet beautiful, blue flame. It may leave the target with a burn.
	PP: 5
	Type: Fire
	Cat: Special
	Acc: 85
	Pow: 130
	Status: Burned
	EffChance: 20
*
Bolt Strike:
	Desc: The user charges its target, surrounding itself with a great amount of electricity. It may leave the target with paralysis.
	PP: 5
	Type: Electric
	Cat: Physical
	Acc: 85
	Pow: 130
	Status: Paralyzed
	EffChance: 20
*
Glaciate:
	Desc: The user attacks by blowing freezing cold air at opposing Pok\u00e9mon. This attack reduces the targets' Speed stat.
	PP: 10
	Type: Ice
	Cat: Special
	Acc: 95
	Pow: 65
	StatChange: 1 Speed -1
*
Techno Blast:
	Desc: The user fires a beam of light at its target. The type changes depending on the Drive the user holds.
	PP: 5
	SpecialItemMove: DriveItem
	Pow: 120
	Acc: 100
	Cat: Special
*
Multi-Attack:
	Desc: Cloaking itself in high energy, the user slams into the target. The memory held determines the move's type.
	PP: 10
	Pow: 90
	Acc: 100
	Cat: Physical
	SpecialItemMove: MemoryItem
*
Explosion:
	PhysicalContact: False
	Desc: The user explodes to inflict damage on those around it. The user faints upon using this move.
	PP: 5
	Cat: Physical
	Type: Normal
	Acc: 100
	Pow: 250
	MoveType: User_Faints
*
Self-Destruct:
	Desc: The user attacks everything around it by causing an explosion. The user faints upon using this move.
	PP: 5
	Type: Normal
	Pow: 200
	Cat: Physical
	Acc: 100
	MoveType: User_Faints
	PhysicalContact: False
*
Fling:
	PhysicalContact: False
	Desc: The user flings its held item at the target to attack. Its power and effects depend on the item.
	PP: 10
	Type: Dark
	Acc: 100
	Cat: Physical
	GetPow:
	if (me.isHoldingItem(b)) {
		return ((HoldItem)me.getHeldItem(b)).flingDamage();
	}
	
	return super.power;
	###
	Apply: 
	if (!me.isHoldingItem(b)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	Messages.add(new MessageUpdate(me.getName() + " flung its " + me.getHeldItem(b).getName() + "!"));
	super.apply(me, o, b);
	me.consumeItem(b);
	###
	ApplyEffects:
	((HoldItem)user.getHeldItem(b)).flingEffect(b, victim);
	###
*
Freeze Shock:
	Desc: On the second turn, the user hits the target with electrically charged ice. It may leave the target with paralysis.
	PP: 5
	Type: Ice
	Pow: 140
	Cat: Physical
	Acc: 90
	PhysicalContact: False
	Status: Paralyzed
	EffChance: 30
	MoveType: Metronomeless
	Int: MultiTurnMove
	ChargeFirst: true
	SemiInv: false
	ChargeMessage: user.getName() + " is charging!"
*
Secret Power:
	PhysicalContact: False
	Desc: The user attacks the target with a secret power. Its added effects vary depending on the user's environment.
	PP: 20
	Pow: 70
	Type: Normal
	Cat: Physical
	Acc: 100
	ApplyEffects: 
	TerrainType terrain = b.getTerrainType();
			
	super.status = terrain.getStatusCondition();
	super.statChanges = terrain.getStatChanges();
	super.effects = terrain.getEffects();
	
	super.applyEffects(b, user, victim);
	
	super.status = StatusCondition.NO_STATUS;
	super.statChanges = new int[Stat.NUM_BATTLE_STATS];
	super.effects = new ArrayList<>();
	###
	EffChance: 30
*
Final Gambit:
	PhysicalContact: True
	Cat: Special
	Desc: The user risks everything to attack its target. The user faints but does damage equal to the user's HP.
	PP: 5
	Acc: 100
	FixedDamage: me.getHP()
	MoveType: User_Faints
	Type: Fighting
*
Gastro Acid:
	Desc: The user hurls up its stomach acids on the target. The fluid eliminates the effect of the target's Ability.
	Int: ChangeAbilityMove
	Effect: ChangeAbility
	AbilityChange: 
	return AbilityNamesies.NO_ABILITY.getNewAbility();
	###
	PP: 10
	Type: Poison
	Cat: Status
	Acc: 100
	AbilityMessage: 
	return caster.getName() + " suppressed " + victim.getName() + "'s ability!";
	###
	ApplyError: !o.getAbility().isReplaceable()
*
Healing Wish:
	Desc: The user faints. In return, the Pok\u00e9mon taking its place will have its HP restored and status cured.
	PP: 10
	Type: Psychic
	Cat: Status
	Effect: HealSwitch
	SelfTarget: True
	MoveType: User_Faints, Non_Snatchable
*
Lunar Dance:
	Desc: The user faints. In return, the Pok\u00e9mon taking its place will have its status and HP fully restored.
	PP: 10
	Type: Psychic
	Cat: Status
	Effect: HealSwitch
	SelfTarget: True
	MoveType: User_Faints, Non_Snatchable
*
Roar:
	Desc: The target is scared off and replaced by another Pok\u00e9mon in its party. In the wild, the battle ends.
	PP: 20
	Type: Normal
	Cat: Status
	MoveType: Substitute_Piercing, Sound_Based, Protect_Piercing
	ExitBattle: victim.getName() + " fled in fear!"
*
Grudge:
	Desc: If the user faints, the user's grudge fully depletes the PP of the opponent's move that knocked it out.
	PP: 5
	Type: Ghost
	Cat: Status
	Effect: Grudge
	SelfTarget: True
	MoveType: Substitute_Piercing, Non_Snatchable
*
Retaliate:
	Desc: The user gets revenge for a fainted ally. If an ally fainted in the previous turn, this attack's damage increases.
	PP: 5
	Type: Normal
	Acc: 100
	Cat: Physical
	Pow: 70
	DoublePowerCondition: Effect.hasEffect(b.getEffects(me.isPlayer()), EffectNamesies.DEAD_ALLY)
*
Circle Throw:
	Desc: The user throws the target and drags out another Pok\u00e9mon in its party. In the wild, the battle ends.
	PP: 10
	Type: Fighting
	Cat: Physical
	Acc: 90
	Pow: 60
	ExitBattle: victim.getName() + " was thrown away!"
*
Teleport:
	Type: Psychic
	Desc: Use it to flee from any wild Pok\u00e9mon. It can also warp to the last Pok\u00e9mon Center visited.
	PP: 20
	Cat: Status
	MoveType: Non_Snatchable
	SelfTarget: True
	ApplyEffects: 
	if (!b.isWildBattle()) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	Messages.add(new MessageUpdate(user.getName() + " teleported out of battle!"));
	Messages.add(new MessageUpdate().withUpdate(Update.EXIT_BATTLE));
	###
*
Role Play:
	Desc: The user mimics the target completely, copying the target's natural Ability.
	PP: 10
	MoveType: Substitute_Piercing, Protect_Piercing, Non_Snatchable
	Type: Psychic
	Cat: Status
	SelfTarget: True
	Int: ChangeAbilityMove
	Effect: ChangeAbility
	AbilityChange: 
	// TODO: Combine with Trace
	Ability otherAbility = b.getOtherPokemon(victim.isPlayer()).getAbility();
	return otherAbility.namesies().getNewAbility();
	###
	AbilityMessage: 
	ActivePokemon other = b.getOtherPokemon(victim.isPlayer());
	return victim.getName() + " copied " + other.getName() + "'s " + other.getAbility().getName() + "!";
	###
	ApplyError: !o.getAbility().isStealable()
*
Knock Off:
	Desc: The user slaps down the target's held item, preventing that item from being used in the battle.
	PP: 20
	Type: Dark
	Cat: Physical
	Acc: 100
	Pow: 65
	GetPow: 
	return (int)(super.power*(o.isHoldingItem(b) ? 1.5 : 1));
	###
	ApplyEffects: 
	if (!victim.isHoldingItem(b) || victim.hasAbility(AbilityNamesies.STICKY_HOLD)) {
		return;
	}
	
	Messages.add(new MessageUpdate(user.getName() + " knocked off " + victim.getName() + "'s " + victim.getHeldItem(b).getName() + "!"));
	super.applyEffects(b, user, victim);
	###
	GetItem: 
	return ItemNamesies.NO_ITEM.getItem();
	###
	Effect: ChangeItem
	Int: ItemHolder
*
Whirlwind:
	Desc: The target is blown away, to be replaced by another Pok\u00e9mon in its party. In the wild, the battle ends.
	PP: 20
	Type: Normal
	Cat: Status
	ExitBattle: victim.getName() + " blew away!"
	MoveType: Substitute_Piercing, Protect_Piercing
*
Bestow:
	Desc: The user passes its held item to the target when the target isn't holding an item.
	PP: 15
	Type: Normal
	Cat: Status
	SwitchItems: !user.isHoldingItem(b) || victim.isHoldingItem(b)
	SwitchItemMessage: user.getName() + " gave " + victim.getName() + " its " + userItem.getName() + "!"
*
Switcheroo:
	Desc: The user passes its held item to the target when the target isn't holding an item.
	PP: 10
	Type: Dark
	Cat: Status
	Acc: 100
	SwitchItems: (!user.isHoldingItem(b) && !victim.isHoldingItem(b)) || user.hasAbility(AbilityNamesies.STICKY_HOLD) || victim.hasAbility(AbilityNamesies.STICKY_HOLD)
	SwitchItemMessage: user.getName() + " switched its " + userItem.getName() + " with " + victim.getName() + "'s " + victimItem.getName() + "!"
	MoveType: Assistless
*	
Trick:
	Desc: The user catches the target off guard and swaps its held item with its own.
	PP: 10
	Type: Psychic
	Acc: 100
	Cat: Status
	SwitchItems: (!user.isHoldingItem(b) && !victim.isHoldingItem(b)) || user.hasAbility(AbilityNamesies.STICKY_HOLD) || victim.hasAbility(AbilityNamesies.STICKY_HOLD)
	SwitchItemMessage: user.getName() + " switched its " + userItem.getName() + " with " + victim.getName() + "'s " + victimItem.getName() + "!"
	MoveType: Assistless
*
Memento:
	Desc: The user faints when using this move. In return, it harshly lowers the target's Attack and Sp. Atk.
	PP: 10
	Type: Dark
	Cat: Status
	Acc: 100
	StatChange: 2 Attack -2 Sp_Attack -2
	MoveType: User_Faints, No_Magic_Coat
*
Destiny Bond:
	Desc: When this move is used, if the user faints, the Pok\u00e9mon that landed the knockout hit also faints.
	PP: 5
	Type: Ghost
	Cat: Status
	SelfTarget: True
	Effect: DestinyBond
	MoveType: Substitute_Piercing, Assistless, Metronomeless, Non_Snatchable
*
Camouflage:
	Desc: The user's type is changed depending on its environment, such as at water's edge, in grass, or in a cave.
	PP: 20
	Type: Normal
	Cat: Status
	SelfTarget: True
	Effect: ChangeType
	Int: ChangeTypeSource
	ChangeType: 
	return new Type[] { b.getTerrainType().getType(), Type.NO_TYPE };
	###
*
Recycle:
	Desc: The user recycles a held item that has been used in battle so it can be used again.
	PP: 10
	Type: Normal
	Cat: Status
	SelfTarget: True
	ApplyEffects: 
	PokemonEffect consumed = victim.getEffect(EffectNamesies.CONSUMED_ITEM);
	if (consumed == null || victim.isHoldingItem(b)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	Item restored = ((ItemHolder)consumed).getItem();
	victim.giveItem((HoldItem)restored);
	Messages.add(new MessageUpdate(victim.getName() + "'s " + restored.getName() + " was restored!"));
	###
*
Parting Shot:
	Desc: With a parting threat, the user lowers the target's Attack and Sp. Atk stats. Then it switches with a party Pok\u00e9mon.
	PP: 20
	Cat: Status
	Acc: 100
	Type: Dark
	StatChange: 2 Attack -1 Sp_Attack -1
	SelfSwitching: True
	MoveType: Sound_Based
	ApplyEffects:
	Messages.add(new MessageUpdate(user.getName() + " called " + victim.getName() + " a chump!!"));
	super.applyEffects(b, user, victim);
	###
*
U-turn:
	Desc: After making its attack, the user rushes back to switch places with a party Pok\u00e9mon in waiting.
	PP: 20
	Type: Bug
	Pow: 70
	Acc: 100
	Cat: Physical
	SelfSwitching: True
*
Baton Pass:
	Desc: The user switches places with a party Pok\u00e9mon in waiting, passing along any stat changes.
	PP: 40
	Cat: Status
	Type: Normal
	ApplyEffects: 
	Team t = b.getTrainer(user.isPlayer());
	if (t instanceof WildPokemon) {
		Messages.add(new MessageUpdate(user.getName() + " left the battle!"));
		Messages.add(new MessageUpdate().withUpdate(Update.EXIT_BATTLE));
		return;
	}
	
	Trainer trainer = (Trainer)t;
	if (!trainer.hasRemainingPokemon()) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	Messages.add(new MessageUpdate(user.getName() + " went back to " + trainer.getName() + "!"));
	trainer.switchToRandom(); // TODO: Prompt a legit switch fo user
	
	ActivePokemon next = trainer.front();
	next.resetAttributes();
	for (int i = 0; i < Stat.NUM_BATTLE_STATS; i++) {
		next.getAttributes().setStage(i, user.getStage(i));
	}
	
	for (PokemonEffect e : user.getEffects()) {
		if (e instanceof PassableEffect) {
			next.addEffect(e);
		}
	}
	
	user = next;
	b.enterBattle(user, trainer.getName() + " sent out " + user.getName() + "!", false);
	###
	SelfTarget: True
	MoveType: Non_Snatchable
*
Perish Song:
	MoveType: Protect_Piercing, Substitute_Piercing, Sound_Based, No_Magic_Coat
	Desc: Any Pok\u00e9mon that hears this song faints in three turns, unless it switches out of battle.
	PP: 5
	Type: Normal
	Cat: Status
	Effect: PerishSong
	ApplyEffects: 
	Messages.add(new MessageUpdate("All Pokemon hearing this song will faint in three turns!"));
	
	if (!victim.hasEffect(EffectNamesies.PERISH_SONG)) {
		super.applyEffects(b, user, victim);
	}
	
	if (!user.hasEffect(EffectNamesies.PERISH_SONG)) {
		super.applyEffects(b, user, user);
	}
	###
*
Dragon Tail:
	Desc: The user knocks away the target and drags out another Pok\u00e9mon in its party. In the wild, the battle ends.
	PP: 10
	Type: Dragon
	Cat: Physical
	Acc: 90
	Pow: 60
	ExitBattle: victim.getName() + " was slapped away!"
*
Foul Play:
	Desc: The user turns the target's power against it. The higher the target's Attack stat, the greater the damage.
	PP: 15
	Type: Dark
	Acc: 100
	Cat: Physical
	StatRatio: Attack me o
*
Embargo:
	Desc: It prevents the target from using its held item. Its Trainer is also prevented from using items on it.
	PP: 15
	Type: Dark
	Cat: Status
	Acc: 100
	Effect: Embargo
*
Nature Power:
	Desc: An attack that makes use of nature's power. Its effects vary depending on the user's environment.
	PP: 20
	Cat: Status
	Type: Normal
	MoveType: Assistless, Metronomeless, No_Magic_Coat
	Apply: 
	me.callNewMove(b, o, new Move(b.getTerrainType().getAttack()));
	###
	GetAccuracy: 
	return b.getTerrainType().getAttack().getAccuracy(b, me, o);
	###
*
Entrainment:
	Desc: The user dances with an odd rhythm that compels the target to mimic it, making the target's Ability the same as the user's.
	PP: 15
	Type: Normal
	Acc: 100
	Cat: Status
	Int: ChangeAbilityMove
	Effect: ChangeAbility
	AbilityChange:
	return caster.getAbility().namesies().getNewAbility();
	###
	AbilityMessage: 
	return victim.getName() + " copied " + caster.getName() + "'s " + caster.getAbility().getName() + "!";
	###
	ApplyError: !o.getAbility().isReplaceable() || !me.getAbility().isStealable()
*
Magic Room:
	Desc: The user creates a bizarre area in which Pok\u00e9mon's held items lose their effects for five turns.
	PP: 10
	Type: Psychic
	Cat: Status
	BattleEffect: MagicRoom
*
Worry Seed:
	Desc: A seed that causes worry is planted on the target. It prevents sleep by making its Ability Insomnia.
	PP: 10
	Type: Grass
	Cat: Status
	Acc: 100
	SpecificAbilityChange: Insomnia
*
Simple Beam:
	Desc: The user's mysterious psychic wave changes the target's Ability to Simple.
	PP: 15
	Type: Normal
	Cat: Status
	Acc: 100
	SpecificAbilityChange: Simple
*
Skill Swap:
	Desc: The user employs its psychic power to exchange Abilities with the target.
	PP: 10
	Type: Psychic
	Cat: Status
	MoveType: Substitute_Piercing, No_Magic_Coat
	Int: ChangeAbilityMove
	AbilityChange: 
	return ability;
	###
	AbilityMessage: 
	return victim.getName() + "'s ability was changed to " + ability.getName() + "!";
	###
	Field:
	private Ability ability;
	
	private static boolean canSkillSwap(ActivePokemon p) {
		return p.getAbility().isReplaceable() && p.getAbility().isStealable();
	}
	###
	ApplyEffects:
	if (!canSkillSwap(user) || !canSkillSwap(victim)) {
		Messages.add(new MessageUpdate(Effect.DEFAULT_FAIL_MESSAGE));
		return;
	}
	
	ability = user.getAbility();
	EffectNamesies.CHANGE_ABILITY.getEffect().cast(b, user, victim, CastSource.ATTACK, super.printCast);

	ability = victim.getAbility();
	EffectNamesies.CHANGE_ABILITY.getEffect().cast(b, user, user, CastSource.ATTACK, super.printCast);
	###
*
Volt Switch:
	Desc: After making its attack, the user rushes back to switch places with a party Pok\u00e9mon in waiting.
	PP: 20
	Pow: 70
	Acc: 100
	Cat: Special
	Type: Electric
	SelfSwitching: True
*
Relic Song:
	Desc: The user sings an ancient song and attacks by appealing to the hearts of those listening. It may also induce sleep.
	PP: 10
	Type: Normal
	Acc: 100
	Cat: Special
	Pow: 75
	Status: Asleep
	MoveType: Metronomeless, Sound_Based
	EffChance: 10
*
Snarl:
	Desc: The user yells as if it is ranting about something, making the target's Sp. Atk stat decrease.
	MoveType: Sound_Based, Metronomeless
	PP: 15
	Type: Dark
	Cat: Special
	Acc: 95
	Pow: 55
	StatChange: 1 Sp_Attack -1
*
Ice Burn:
	Desc: On the second turn, an ultracold, freezing wind surrounds the target. This may leave the target with a burn.
	MoveType: Metronomeless
	Type: Ice
	Cat: Special
	Pow: 140
	Acc: 90
	PP: 5
	EffChance: 30
	Status: Burned
	Int: MultiTurnMove
	ChargeFirst: true
	SemiInv: false
	ChargeMessage: user.getName() + " is charging!"
*
V-create:
	Desc: With a hot flame on its forehead, the user hurls itself at its target. It lowers the user's Defense, Sp. Def, and Speed stats.
	Type: Fire
	PP: 5
	Cat: Physical
	Acc: 95
	Pow: 180
	SelfTarget: True
	StatChange: 3 Defense -1 Sp_Defense -1 Speed -1
	MoveType: Metronomeless
*
Surf:
	Desc: It swamps the area around the user with a giant wave. It can also be used for crossing water.
	PP: 15
	Type: Water
	Pow: 90
	Acc: 100
	Cat: Special	
*
Volt Tackle:
	Desc: The user electrifies itself, then charges. It causes considerable damage to the user and may leave the target with paralysis.
	PP: 15
	Pow: 120
	Cat: Physical
	Acc: 100
	Type: Electric
	Status: Paralyzed
	EffChance: 10
	Recoil: 3
	Int: RecoilMove
*
Focus Blast:
	Desc: The user heightens its mental focus and unleashes its power. It may also lower the target's Sp. Def.
	PP: 5
	Pow: 120
	Acc: 70
	Cat: Special
	Type: Fighting
	StatChange: 1 Sp_Defense -1
	EffChance: 10
	MoveType: Bomb_Ball
*
Diamond Storm:
	Desc: The user whips up a storm of diamonds to damage opposing Pok\u00e9mon. This may also raise the user's Defense stat.
	Type: Rock
	Cat: Physical
	Acc: 95
	Pow: 100
	PP: 5
	EffChance: 50
	StatChange: 1 Defense 1
	SelfTarget: True
*
Moonblast:
	Desc: Borrowing the power of the moon, the user attacks the target. This may also lower the target's Sp. Atk stat.
	Type: Fairy
	Pow: 95
	Cat: Physical
	Acc: 100
	PP: 15
	EffChance: 30
	StatChange: 1 Sp_Attack -1
*
Land's Wrath:
	Desc: The user gathers the energy of the land and focuses that power on opposing Pok\u00e9mon to damage them.
	Type: Ground
	Pow: 90
	Acc: 100
	PP: 10
	Cat: Physical
*
Phantom Force:
	Desc: The user vanishes somewhere, then strikes the target on the next turn. This move hits even if the target protects itself.
	Type: Ghost
	Cat: Physical
	Pow: 90
	PP: 10
	Acc: 100
	HitMinimize: True
	MoveType: Protect_Piercing, Assistless
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " vanished suddenly!"
	ChargeFirst: true
	SemiInv: true
*
Oblivion Wing:
	Desc: The user absorbs its target's HP. The user's HP is restored by over half of the damage taken by the target.
	PP: 10
	Cat: Special
	Acc: 100
	Pow: 80
	Type: Flying
	Int: SapHealthEffect
	SapPercentage: return .75;
*
Geomancy:
	Desc: The user absorbs energy and sharply raises its Sp. Atk, Sp. Def, and Speed stats on the next turn.
	PP: 10
	Type: Fairy
	Cat: Status
	SelfTarget: True
	StatChange: 3 Sp_Attack 2 Sp_Defense 2 Speed 2
	Int: MultiTurnMove
	ChargeMessage: user.getName() + " is absorbing power!"
	ChargeFirst: true
	SemiInv: false
*
Boomburst:
	Desc: The user attacks everything around it with the destructive power of a terrible, explosive sound.
	PP: 10
	Pow: 140
	Cat: Special
	Acc: 100
	Type: Normal
	MoveType: Sound_Based
*
Play Rough:
	Desc: The user plays rough with the target and attacks it. This may also lower the target's Attack stat.
	Type: Fairy
	Pow: 90
	Acc: 90
	Cat: Physical
	PP: 10
	StatChange: 1 Attack -1
	EffChance: 10
*
Crafty Shield:
	Desc: The user protects itself and its allies from status moves with a mysterious power. This does not stop moves that do damage.
	Type: Fairy
	PP: 10
	Cat: Status
	ProtectingAttack: CraftyShield
*
Nuzzle:
	Desc: The user attacks by nuzzling its electrified cheeks against the target. This also leaves the target with paralysis.
	Type: Electric
	Cat: Physical
	Pow: 20
	PP: 20
	Acc: 100
	Status: Paralyzed
*
Draining Kiss:
	Int: SapHealthEffect
	SapPercentage: return .75;
	Desc: The user steals the target's energy with a kiss. The user's HP is restored by over half of the damage taken by the target.
	PP: 10
	Type: Fairy
	Cat: Special
	Acc: 100
	Pow: 50
	PhysicalContact: True
*
Fairy Wind:
	Desc: The user stirs up a fairy wind and strikes the target with it.
	PP: 30
	Cat: Special
	Type: Fairy
	Pow: 40
	Acc: 100
*
Parabolic Charge:
	Desc: The user attacks everything around it. The user's HP is restored by half the damage taken by those hit.
	PP: 20
	Type: Electric
	Pow: 65
	Acc: 100
	Cat: Special
	Int: SapHealthEffect
*
Disarming Voice:
	Desc: Letting out a charming cry, the user does emotional damage to opposing Pok\u00e9mon. This attack never misses.
	PP: 15
	Pow: 40
	Type: Fairy
	Cat: Special
	MoveType: Sound_Based
*
Freeze-Dry:
	Desc: The user rapidly cools the target. This may also leave the target frozen. This move is super effective on Water types.
	PP: 20
	Type: Ice
	Cat: Special
	Acc: 100
	Pow: 70
	Int: AdvantageMultiplierMove
	MultiplyAdvantage:
	double multiplier = 1;
	for (int i = 0; i < 2; i++) {
		if (defendingType[i] == Type.WATER) {
			multiplier *= 2/moveType.getAdvantage().getAdvantage(defendingType[i]);
		}
	}
	
	return multiplier;
	###
	Status: Frozen
	EffChance: 10
*
Flying Press:
	Desc: The user dives down onto the target from the sky. This move is Fighting and Flying type simultaneously.
	Acc: 95
	Pow: 100
	Type: Fighting
	PP: 10
	Cat: Physical
	Int: AdvantageMultiplierMove
	MultiplyAdvantage:
	return TypeAdvantage.FLYING.getAdvantage(defendingType);
	###
*
Topsy-Turvy:
	Type: Dark
	Cat: Status
	PP: 20
	Desc: All stat changes affecting the target turn topsy-turvy and become the opposite of what they were.
	ApplyEffects:
	for (int i = 0; i < Stat.NUM_BATTLE_STATS; i++) {
		victim.getAttributes().setStage(i, -victim.getStage(i));
	}
	
	Messages.add(new MessageUpdate(victim.getName() + "'s stat changes were all reversed!"));
	###
*
Play Nice:
	Desc: The user and the target become friends, and the target loses its will to fight. This lowers the target's Attack stat.
	PP: 20
	MoveType: Protect_Piercing, Substitute_Piercing
	Type: Normal
	Cat: Status
	StatChange: 1 Attack -1
*
Eerie Impulse:
	Desc: The user's body generates an eerie impulse. Exposing the target to it harshly lowers the target's Sp. Atk stat.
	PP: 15
	Type: Electric
	Cat: Status
	Acc: 100
	StatChange: 1 Sp_Attack -2
*
Misty Terrain:
	Desc: The user covers the ground under everyone's feet with mist for five turns. This protects Pok\u00e9mon on the ground from status conditions.
	PP: 10
	Type: Fairy
	Cat: Status
	BattleEffect: MistyTerrain
*
Fairy Lock:
	Type: Fairy
	Desc: By locking down the battlefield, the user keeps all Pok\u00e9mon from fleeing during the next turn.
	PP: 10
	Cat: Status
	Effect: FairyLock
	SelfTarget: True
	MoveType: Non_Snatchable
*
Aromatic Mist:
	Type: Fairy
	Desc: The user its Sp. Def stat with a mysterious aroma.
	PP: 20
	SelfTarget: True
	Cat: Status
	StatChange: 1 Sp_Defense 1
*
Baby-Doll Eyes
	Desc: The user stares at the target with its baby-doll eyes, which lowers its Attack stat. This move always goes first.
	PP: 30
	Priority: 1
	Type: Fairy
	Acc: 100
	Cat: Status
	StatChange: 1 Attack -1
*
Petal Blizzard:
	Type: Grass
	Desc: The user stirs up a violent petal blizzard and attacks everything around it.
	PP: 15
	Pow: 90
	Cat: Physical
	Acc: 100
*
Grassy Terrain:
	Type: Grass
	Desc: The user turns the ground under everyone's feet to grass for five turns. This restores the HP of Pok\u00e9mon on the ground a little every turn.
	PP: 10
	Cat: Status
	BattleEffect: GrassyTerrain
*
Flower Shield:
	Desc: The user raises its Defense stat with a mysterious power.
	PP: 10
	Type: Fairy
	Cat: Status
	StatChange: 1 Defense 1
	SelfTarget: True
*
Noble Roar:
	Desc: Letting out a noble roar, the user intimidates the target and lowers its Attack and Sp. Atk stats.
	PP: 30
	Type: Normal
	Acc: 100
	Cat: Status
	StatChange: 2 Attack -1 Sp_Attack -1
	MoveType: Sound_Based
*
Powder:
	Desc: The user covers the target in a powder that explodes and damages the target if it uses a Fire-type move.
	PP: 20
	Type: Bug
	Acc: 100
	Cat: Status
	Effect: Powder
	MoveType: Powder
	Priority: 1
*
Rototiller:
	Desc: Tilling the soil, the user makes it easier for plants to grow. This raises its Attack and Sp. Atk stats.
	PP: 10
	Type: Ground
	SelfTarget: True
	Cat: Status
	StatChange: 2 Attack 1 Sp_Attack 1
*
Water Shuriken:
	Desc: The user hits the target with throwing stars two to five times in a row. This move always goes first.
	PP: 20
	Pow: 15
	Acc: 100
	Cat: Special
	Type: Water
	MultiStrike: 2 5
*
Mat Block:
	ApplyError: !me.getAttributes().isFirstTurn()
	Desc: Using a pulled-up mat as a shield, the user protects itself and its allies from damaging moves. This does not stop status moves.
	PP: 15
	Type: Fighting
	Cat: Status
	SelfTarget: True
	Effect: MatBlock
	MoveType: Assistless
*
Mystical Fire:
	Desc: The user attacks by breathing a special, hot fire. This also lowers the target's Sp. Atk stat.
	PP: 10
	Type: Fire
	Pow: 75
	Cat: Special
	Acc: 100
	StatChange: 1 Sp_Attack -1
*
Infestation:
	Desc: The target is infested and attacked for four to five turns. The target can't flee during this time.
	PP: 20
	Type: Bug
	Cat: Special
	PhysicalContact: True
	Acc: 100
	Pow: 20
	Effect: Infestation
*
Electrify:
	Desc: If the target is electrified before it uses a move during that turn, the target's move becomes Electric type.
	PP: 20
	Type: Electric
	Cat: Status
	Effect: Electrified
	Priority: 1
	MoveType: No_Magic_Coat
*
Fell Stinger:
	Desc: When the user knocks out a target with this move, the user's Attack stat rises sharply.
	PP: 25
	Type: Bug
	Cat: Physical
	Acc: 100
	Pow: 50
	Int: MurderEffect
	KillWish:
	murderer.getAttributes().modifyStage(murderer, murderer, 2, Stat.ATTACK, b, CastSource.ATTACK);
	###
*
Magnetic Flux:
	Desc: The user manipulates magnetic fields which raises its Defense and Sp. Def stats.
	PP: 20
	Type: Electric
	Cat: Status
	StatChange: 2 Defense 1 Sp_Defense 1
	SelfTarget: True
*
Sticky Web:
	Type: Bug
	Cat: Status
	PP: 20
	Effect: StickyWeb
	MoveType: Field
	Desc: The user weaves a sticky net around the opposing team, which lowers their Speed stat upon switching into battle.
*
Belch:
	Desc: The user lets out a damaging belch on the target. The user must eat a Berry to use this move.
	Type: Poison
	PP: 10
	MoveType: Assistless
	Pow: 120
	Cat: Special
	Acc: 90
	ApplyError: !me.hasEffect(EffectNamesies.EATEN_BERRY)
*
Venom Drench:
	Desc: Opposing Pok\u00e9mon are drenched in an odd poisonous liquid. This lowers the Attack, Sp. Atk, and Speed stats of a poisoned target.
	Type: Poison
	Cat: Status
	Acc: 100
	StatChange: 3 Attack -1 Sp_Attack -1 Speed -1
	ApplyError: !o.hasStatus(StatusCondition.POISONED)
	PP: 20
*
Electric Terrain:
	Desc: The user electrifies the ground under everyone's feet for five turns. Pok\u00e9mon on the ground no longer fall asleep.
	Type: Electric
	PP: 10
	Cat: Status
	BattleEffect: ElectricTerrain
*
Psychic Terrain:
	Desc: This protects Pokémon on the ground from priority moves and powers up Psychic-type moves for five turns.
	Type: Psychic
	PP: 10
	Cat: Status
	BattleEffect: PsychicTerrain
*
Power-Up Punch:
	Desc: Striking opponents over and over makes the user's fists harder. Hitting a target raises the Attack stat.
	PP: 20
	Type: Fighting
	Pow: 40
	Acc: 100
	Cat: Physical
	SelfTarget: True
	StatChange: 1 Attack 1
	MoveType: Punching
*
Confide:
	Desc: The user tells the target a secret, and the target loses its ability to concentrate. This lowers the target's Sp. Atk stat.
	PP: 20
	Type: Normal
	Cat: Status
	MoveType: Sound_Based, Protect_Piercing
	StatChange: 1 Sp_Attack -1
*
Cut:
	Desc: The target is cut with a scythe or a claw. It can also be used to cut down thin trees.
	PP: 30
	Pow: 50
	Acc: 95
	Cat: Physical
	Type: Normal
*
Dazzling Gleam:
	Desc: The user damages opposing Pok\u00e9mon by emitting a powerful flash.
	PP: 10
	Type: Fairy
	Cat: Special
	Acc: 100
	Pow: 80
*
Strength:
	Desc: The target is slugged with a punch thrown at maximum power. It can also be used to move heavy boulders.
	PP: 15
	Pow: 80
	Type: Normal
	Cat: Physical
	Acc: 100
*
Origin Pulse:
	Desc: The user attacks opposing Pokémon with countless beams of light that glow a deep and brilliant blue.
	Type: Water
	Pow: 110
	Cat: Special
	Acc: 85
	PP: 10
*
Precipice Blades:
	Desc: The user attacks opposing Pokémon by manifesting the power of the land in fearsome blades of stone.
	PP: 10
	Type: Ground
	Cat: Physical
	Pow: 120
	Acc: 85
*
Shore Up:
	Desc: The user regains up to half of its max HP. It restores more HP in a sandstorm.
	Type: Ground
	Cat: Status
	PP: 10
	Int: SelfHealingMove
	SelfHealing: 
	if (b.getWeather().namesies() == EffectNamesies.SANDSTORM) {
		victim.healHealthFraction(1);
	} 
	else {
		victim.healHealthFraction(1/2.0);
	}
	###
*
Floral Healing:
	Desc: The user restores the target's HP by up to half of its max HP. It restores more HP when the terrain is grass.
	Type: Fairy
	Cat: Status
	PP: 10
	Int: SelfHealingMove
	SelfHealing: 
	if (b.hasEffect(EffectNamesies.GRASSY_TERRAIN)) {
		victim.healHealthFraction(1);
	} 
	else {
		victim.healHealthFraction(1/2.0);
	}
	###
*
First Impression:
	Desc: Although this move has great power, it only works the first turn the user is in battle.
	Type: Bug
	Cat: Physical
	Pow: 90
	PP: 10
	Acc: 100
	Priority: 2
	ApplyError: !me.getAttributes().isFirstTurn()
*
Anchor Shot:
	Desc: The user entangles the target with its anchor chain while attacking. The target becomes unable to flee.
	Type: Steel
	PP: 20
	Acc: 100
	Pow: 80
	Cat: Physical
	Effect: Trapped
*
Spirit Shackle:
	Desc: The user attacks while simultaneously stitching the target's shadow to the ground to prevent the target from escaping.
	Type: Ghost
	PP: 10
	Acc: 100
	Pow: 80
	Cat: Physical
	Effect: Trapped
*
Darkest Lariat:
	Desc: The user swings both arms and hits the target. The target's stat changes don't affect this attack's damage.
	Type: Dark
	Pow: 85
	Acc: 100
	PP: 10
	Cat: Physical
	Int: OpponentIgnoreStageEffect
	IgnoreStage:
	return !s.user();
	###
*
Sparkling Aria:
	Desc: The user bursts into song, emitting many bubbles. Any Pokémon suffering from a burn will be healed by the touch of these bubbles.
	Type: Water
	Pow: 90
	Cat: Special
	Acc: 100
	PP: 10
	StatusCureMove: Asleep
*
High Horsepower:
	Desc: The user fiercely attacks the target using its entire body.
	Type: Ground
	PP: 10
	Pow: 95
	Acc: 95
	Cat: Physical
*
Strength Sap:
	Desc: The user restores its HP by the same amount as the target's Attack stat. It also lowers the target's Attack stat.
	Type: Grass
	Cat: Status
	Acc: 100
	PP: 10
	Int: SapHealthEffect
	ApplyEffects:
	int victimAttackStat = Stat.getStat(Stat.ATTACK, victim, user, b);
	super.applyEffects(b, user, victim);

	this.sapHealth(b, user, victim, victimAttackStat, true);
	###
	StatChange: 1 Attack -1
	SapPercentage: return 1;
*
Leafage:
	Desc: The user attacks by pelting the target with leaves.
	Type: Grass
	Cat: Physical
	Pow: 40
	PP: 40
	Acc: 100
*
Toxic Thread:
	Desc: The user shoots poisonous threads to poison the target and lower the target's Speed stat.
	Type: Poison
	Cat: Status
	Acc: 100
	PP: 20
	Status: Poisoned
	StatChange: 1 Speed -1
*
Laser Focus:
	Desc: The user concentrates intensely. The attack on the next turn always results in a critical hit.
	Type: Normal
	Cat: Status
	PP: 30
	SelfTarget: True
	Effect: LaserFocus
*
Gear Up:
	Desc: The user engages its gears to raise its Attack and Sp. Atk stats.
	Type: Steel
	PP: 20
	SelfTarget: True
	Cat: Status
	StatChange: 2 Attack 1 Sp_Attack 1/2
*
Throat Chop:
	Desc: The user attacks the target's throat, and the resultant suffering prevents the target from using moves that emit sound for two turns.
	Type: Dark
	Cat: Physical
	PP: 15
	Pow: 80
	Acc: 100
	Effect: SoundBlock
*
Pollen Puff:
	Desc: The user attacks the enemy with a pollen puff that explodes. If the target is an ally, it gives the ally a pollen puff that restores its HP instead.
	Type: Bug
	Cat: Special
	PP: 15
	Pow: 90
	Acc: 100
*
Lunge:
	Desc: The user makes a lunge at the target, attacking with full force. This also lowers the target's Attack stat.
	Type: Bug
	Cat: Physical
	Pow: 80
	Acc: 100
	PP: 15
	StatChange: 1 Attack -1
*
Fire Lash:
	Desc: The user strikes the target with a burning lash. This also lowers the target's Defense stat.
	Type: Fire
	Cat: Physical
	Pow: 80
	Acc: 100
	PP: 15
	StatChange: 1 Defense -1
*
Burn Up:
	Desc: To inflict massive damage, the user burns itself out. After using this move, the user will no longer be Fire type.
	Type: Fire
	Cat: Special
	Pow: 130
	Acc: 100
	PP: 5
	SelfTarget: True
	Effect: ChangeType
	ApplyError: !me.isType(b, Type.FIRE)
	RemoveType: Fire
*
Smart Strike:
	Desc: The user stabs the target with a sharp horn. This attack never misses.
	Cat: Physical
	Pow: 70
	PP: 10
	Type: Steel
*
Purify:
	Desc: The user heals the target's status condition. If the move succeeds, it also restores the user's own HP.
	Type: Poison
	Cat: Status
	PP: 20
	MoveType: Healing
	ApplyError: !me.hasStatus()
	ApplyEffects:
	Status.removeStatus(b, user, CastSource.ATTACK);
	if (!user.hasEffect(EffectNamesies.HEAL_BLOCK)) {
		Messages.add(new MessageUpdate(user.getName() + "'s health was restored!"));
		user.healHealthFraction(.5);
		Messages.add(new MessageUpdate().updatePokemon(b, user));
	}
	###
*
Revelation Dance:
	Desc: The user attacks the target by dancing very hard. The user's type determines the type of this move.
	Type: Normal
	Cat: Special
	Acc: 100
	Pow: 90
	PP: 15
	GetType:
	return user.getType(b)[0];
	###
*
Core Enforcer:
	Desc: If the Pokémon the user has inflicted damage on have already used their moves, this move eliminates the effect of the target's Ability.
	PP: 10
	Type: Dragon
	Cat: Special
	Pow: 100
	Acc: 100
	Apply: 
	if (!b.isFirstAttack()) {
		EffectNamesies.BREAKS_THE_MOLD.getEffect().cast(b, me, me, CastSource.ATTACK, false);
	}

	super.apply(me, o, b);
	###
*
Trop Kick:
	Desc: The user lands an intense kick of tropical origins on the target. This also lowers the target's Attack stat.
	PP: 15
	Pow: 70
	Cat: Physical
	Acc: 100
	Type: Grass
	StatChange: 1 Attack -1
*
Clanging Scales:
	Desc: The user rubs the scales on its entire body and makes a huge noise to attack the opposing Pokémon. The user's Defense stat goes down after the attack.
	PP: 5
	MoveType: Sound_Based
	Cat: Special
	SelfTarget: True
	StatChange: 1 Defense -1
	Acc: 100
	Pow: 110
	Type: Dragon
*
Dragon Hammer:
	Desc: The user uses its body like a hammer to attack the target and inflict damage.
	PP: 15
	Type: Dragon
	Cat: Physical
	Acc: 100
	Pow: 90
*
Brutal Swing:
	Desc: The user swings its body around violently to inflict damage on everything in its vicinity.
	PP: 20
	Type: Dark
	Cat: Physical
	Acc: 100
	Pow: 60
*
Fleur Cannon:
	Desc: The user unleashes a strong beam. The attack's recoil harshly lowers the user's Sp. Atk stat.
	PP: 5
	Type: Fairy
	Cat: Special
	Acc: 90
	Pow: 130
	SelfTarget: True
	StatChange: 1 Sp_Attack -2
*
Shadow Bone:
	Desc: The user attacks by beating the target with a bone that contains a spirit. This may also lower the target's Defense stat.
	Type: Ghost
	Cat: Physical
	Acc: 100
	Pow: 85
	PP: 10
	EffChance: 20
	StatChange: 1 Defense -1
*
Accelerock:
	Desc: The user smashes into the target at high speed. This move always goes first.
	PP: 20
	Type: Rock
	Pow: 40
	Priority: 1
	Cat: Physical
	Acc: 100
*
Liquidation:
	Desc: The user slams into the target using a full-force blast of water. This may also lower the target's Defense stat.
	Type: Water
	Cat: Physical
	Acc: 100
	Pow: 85
	PP: 10
	EffChance: 20
	StatChange: 1 Defense -1
*
Spectral Thief:
	Desc: The user hides in the target's shadow, steals the target's stat boosts, and then attacks.
	Type: Ghost
	Pow: 90
	Acc: 100
	Cat: Physical
	PP: 10
	Apply:
	for (int i = 0; i < Stat.NUM_BATTLE_STATS; i++) {
		int stage = o.getAttributes().getStage(i);
		if (stage > 0) {
			o.getAttributes().resetStage(i);
			me.getAttributes().incrementStage(i, stage);
		}
	}

	super.apply(me, o, b);
	###
*
Sunsteel Strike:
	Desc: The user slams into the target with the force of a meteor. This move can be used on the target regardless of its Abilities.
	Type: Steel
	Cat: Physical
	PP: 5
	Pow: 100
	Acc: 100
	IgnoreAbilityMove: True
*
Moongeist Beam:
	Desc: The user emits a sinister ray to attack the target. This move can be used on the target regardless of its Abilities.
	Type: Ghost
	Cat: Special
	PP: 5
	Pow: 100
	Acc: 100
	IgnoreAbilityMove: True
*
Tearful Look:
	Desc: The user gets teary eyed to make the target lose its combative spirit. This lowers the target's Attack and Sp. Atk stats.
	Type: Normal
	Cat: Status
	PP: 20
	StatChange: 2 Attack -1 Sp_Attack -1
*
Zing Zap:
	Desc: A strong electric blast crashes down on the target, giving it an electric shock. This may also make the target flinch.
	Type: Electric
	Cat: Physical
	Acc: 100
	Pow: 80
	Effect: Flinch
	EffChance: 30
	PP: 10
*
Grass Pledge:
	Desc: A column of grass hits opposing Pokémon. When used with its water equivalent, its damage increases into a vast swamp.
	Type: Grass
	Cat: Special
	Acc: 100
	Pow: 80
	PP: 10
*
Fire Pledge:
	Desc: A column of fire hits opposing Pokémon. When used with its Grass equivalent, its damage increases into a vast sea of fire.
	Type: Fire
	Cat: Special
	Acc: 100
	Pow: 80
	PP: 10
*
Water Pledge:
	Desc: A column of water strikes the target. When combined with its fire equivalent, the damage increases and a rainbow appears.
	Type: Water
	Cat: Special
	Acc: 100
	Pow: 80
	PP: 10
*
Stomping Tantrum:
	Desc: Driven by frustration, the user attacks the target. If the user's previous move has failed, the power of this move doubles.
	Type: Ground
	Pow: 75
	Cat: Physical
	Acc: 100
	PP: 10
	GetPow:
	// TODO: Fuck this shit I hate this fucking move
	return super.power;
	###
*
Hyperspace Hole:
	Desc: Using a hyperspace hole, the user appears right next to the target and strikes. This also hits a target using a move such as Protect or Detect.
	Type: Psychic
	Cat: Special
	PP: 5
	MoveType: Protect_Piercing
	Pow: 80
*
Steam Eruption:
	Desc: The user immerses the target in superheated steam. This may also leave the target with a burn.
	Type: Water
	PP: 5
	Pow: 110
	Acc: 95
	Status: Burned
	EffChance: 30
	Cat: Special
*