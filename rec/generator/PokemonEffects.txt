# The name of each pokemon effect and its contents.
# Blocks are separated by '*'
# Any function must be terminated by ### on a line by itself
# Fields can be specified in any order

Constructor:
    Namesies Enum PokemonEffectNamesies
    MinTurns Default -1 Int
    MaxTurns Default -1 Int
    CanHave Default False Boolean
    HasAlternateCast Default False Boolean
*

***

LeechSeed:
    Int: EndTurnEffect, PassableEffect, SapHealthEffect
    FullEffectApplies:
        if (victim.isType(b, Type.GRASS)) {
            return ApplyResult.failure("It doesn't affect " + victim.getName() + "!");
        } else if (victim.hasEffect(this.namesies())) {
            return ApplyResult.failure(victim.getName() + " is already seeded!");
        }
        ###
    CastMessage: victim.getName() + " was seeded!"
    ApplyEndTurn:
        // Only print the sap message once
        int sappedAmount = victim.reduceHealthFraction(b, 1/8.0, this.getSapMessage(victim));
        this.sapHealth(b, b.getOtherPokemon(victim), victim, sappedAmount, false);
        ###
    RapidSpin: released.getName() + " was released from leech seed!"
*
Flinch:
    Int: BeforeAttackPreventingEffect
    EffectApplies: b.isFirstAttack()
    CastMessage: victim.getName() + " flinched!"
    CanAttack:
        return false;
        ###
    NumTurns: 1
*
FireSpin:
    PartialTrap: fire_spin victim.getName() + " was trapped in the fiery vortex!"
*
Infestation:
    PartialTrap: infestation victim.getName() + " has been afflicted with an infestation!"
*
MagmaStorm:
    PartialTrap: magma_storm victim.getName() + " was trapped by swirling magma!"
*
Clamped:
    PartialTrap: clamp user.getName() + " clamped " + victim.getName() + "!"
*
Whirlpooled:
    PartialTrap: whirlpool victim.getName() + " was trapped in the vortex!"
*
Wrapped:
    PartialTrap: wrap victim.getName() + " was wrapped by " + user.getName() + "!"
*
Binded:
    PartialTrap: bind victim.getName() + " was binded by " + user.getName() + "!"
*
SandTomb:
    PartialTrap: sand_tomb victim.getName() + " was trapped by sand tomb!"
*
SnapTrapped:
    PartialTrap: snap_trap victim.getName() + " was trapped by snap trap!"
*
KingsShield:
    ProtectingContactLower: -1 Attack King's Shield
    ProtectingCondition:
        // Only protects against attacking moves
        return !attacking.getAttack().isStatusMove();
        ###
*
Obstruct:
    ProtectingContactLower: -2 Defense obstruction
    ProtectingEffect: True
*
SpikyShield:
    ProtectingEffect: True
    OnProtectingSuccess:
        // Pokemon that make contact with the spiky shield have their health reduced
        if (p.isMakingContact()) {
            p.reduceHealthFraction(b, 1/8.0, p.getName() + " was hurt by " + opp.getName() + "'s Spiky Shield!");
        }
        ###
*
BanefulBunker:
    ProtectingEffect: True
    OnProtectingSuccess:
        // Pokemon that make contact with the baneful bunker become poisoned
        if (p.isMakingContact()) {
            StatusNamesies.POISONED.getStatus().apply(b, opp, p, p.getName() + " was poisoned by " + opp.getName() + "'s Baneful Bunker!");
        }
        ###
*
Protect:
    ProtectingEffect: True
*
QuickGuard:
    ProtectingEffect: True
    ProtectingCondition:
        return attacking.getAttackPriority() > 0;
        ###
*
CraftyShield:
    ProtectingEffect: True
    ProtectingCondition:
        return attacking.getAttack().isStatusMove();
        ###
*
MatBlock:
    ProtectingEffectNoDecay: True
    ProtectingCondition:
        return !attacking.getAttack().isStatusMove();
        ###
    Comments: // No successive decay for this move
*
Bracing:
    NumTurns: 1
    SuccessiveDecay: True
    CastMessage: user.getName() + " braced itself!"
    Int: BracingEffect
    Bracing:
        return true;
        ###
    BraceMessage: bracer.getName() + " endured the hit!"
*
Confusion:
    Int: PassableEffect, BeforeAttackPreventingEffect
    FullEffectApplies:
        if (victim.hasEffect(this.namesies())) {
            return ApplyResult.failure(victim.getName() + " is already confused!");
        }
        ###
    EffectSourcePreventMessage: confusion
    EffectSourceRemoveMessage: confused
    Field:
        private int turns;
        ###
    CanAttack:
        // Snap it out!
        if (turns == 0) {
            Messages.add(attacking.getName() + " snapped out of its confusion!");
            this.deactivate();
            return true;
        }

        turns--;
        Messages.add(attacking.getName() + " is confused!");

        // 50% chance to hurt yourself in confusion while confused
        if (RandomUtils.chanceTest(50)) {
        
            // Perform confusion damage
            attacking.callTempMove(
                    AttackNamesies.CONFUSION_DAMAGE,
                    () -> {
                        int damage = b.calculateDamage(attacking, attacking).getCalculatedDamage();
                        attacking.indirectReduceHealth(b, damage, true, "It hurt itself in confusion!");
                    }
            );

            return false;
        }

        return true;
        ###
    Constructor:
        this.turns = RandomUtils.getRandomInt(1, 4); // Between 1 and 4 turns
        ###
    CastMessage: victim.getName() + " became confused!"
*
SelfConfusion:
    Int: ForceMoveEffect
    Field:
        private Move move;
        ###
    MinTurns: 2
    MaxTurns: 3
    Subside:
        String message = p.getName() + " became confused due to fatigue!";
        Effect.apply(PokemonEffectNamesies.CONFUSION, b, p, p, CastSource.EFFECT, message);
        ###
    GetForceMove:
        return move;
        ###
    BeforeCast:
        move = caster.getMove();
        ###
*
Encore:
    Int: ForceMoveEffect, AttackSelectionSelfBlockerEffect
    Field:
        private Move move;
        ###
    NumTurns: 3
    SubsideMessage: "The effects of " + victim.getName() + "'s encore faded."
    GetForceMove:
        return move;
        ###
    Usable:
        return move.getAttack().namesies() == m.getAttack().namesies();
        ###
    UnusableMessage: "Only " + move.getAttack().getName() + " can be used right now!"
    FullEffectApplies:
        Move lastMove = victim.getLastMoveUsed();
        if (lastMove == null || lastMove.getPP() == 0 || lastMove.getAttack().isMoveType(MoveType.ENCORELESS)) {
            return ApplyResult.failure();
        }
        ###
    CastMessage: victim.getName() + " got an encore!"
    EffectSourcePreventMessage: it from being encored
    EffectSourceRemoveMessage: under the effects of encore
    BeforeCast:
        move = victim.getLastMoveUsed();
        ###
    ShouldSubside:
        // If the move runs out of PP, Encore immediately ends
        return move.getPP() == 0;
        ###
*
Disable:
    Int: AttackSelectionSelfBlockerEffect
    Field:
        private Move disabled;
        ###
    NumTurns: 4
    Usable:
        return disabled.getAttack().namesies() != m.getAttack().namesies();
        ###
    UnusableMessage: disabled.getAttack().getName() + " is disabled!"
    FullEffectApplies:
        Move lastMove = victim.getLastMoveUsed();
        if (lastMove == null || lastMove.getPP() == 0) {
            return ApplyResult.failure();
        } else if (victim.hasEffect(this.namesies())) {
            return ApplyResult.failure(victim.getName() + " is already disabled!");
        }
        ###
    SubsideMessage: victim.getName() + "'s " + disabled.getAttack().getName() + " is no longer disabled!"
    CastMessage: victim.getName() + "'s " + disabled.getAttack().getName() + " was disabled!"
    EffectSourcePreventMessage: it from being disabled
    EffectSourceRemoveMessage: disabled
    BeforeCast:
        disabled = victim.getLastMoveUsed();
        ###
*
RaiseCrits:
    Int: CritStageEffect, PassableEffect, MessageGetter
    IncreaseCritStage:
        return 2;
        ###
    CastMessage: this.getMessage(victim, source)
    GenericMessage: p.getName() + " is getting pumped!"
    SourceMessage: p.getName() + " is getting pumped due to its " + sourceName + "!"
    Comments:
        // Used for Focus Energy, Dire Hit, Lansat Berry
        // These effects do not stack with each other
        // Ex: Dire Hit should fail if Focus Energy was already used etc.
        ###
*
ChangeItem:
    BeforeCast:
        item = ((ItemHolder)source.getSource(caster)).getItem();
        victim.getEffects().remove(this.namesies());
        ###
    Field:
        private HoldItem item;
        ###
    ItemHolder: item
    CanHave: True
*
ChangeAttackType:
    NumTurns: 1
    CastMessage: typeSource.getMessage(user, victim)
    Field:
        private ChangeAttackTypeSource typeSource;
        ###
    Int: ChangeAttackTypeEffect
    ChangeAttackType:
        return typeSource.getAttackType(original);
        ###
    CanHave: True
    BeforeCast:
        typeSource = (ChangeAttackTypeSource)source.getSource(caster);
        ###
*
ChangeType:
    Int: ChangeTypeEffect, MessageGetter
    Field:
        private PokeType type;
        ###
    AlternateCast:
        this.beforeCast(b, caster, victim, source);
        this.addCastMessage(b, caster, victim, source, castMessage);
        ###
    BeforeCast:
        ChangeTypeSource typeSource = (ChangeTypeSource)source.getSource(caster);
        type = typeSource.getType(b, caster, victim);
        ###
    GetChangeTypeEffect:
        return type;
        ###
    CastMessage: this.getMessage(victim, source)
    GenericMessage: p.getName() + " was changed to " + type + " type!!"
    SourceMessage: p.getName() + "'s " + sourceName + " changed it to the " + type + " type!!"
    CanHave: True
    Subside:
        Messages.add(new MessageUpdate().updatePokemon(b, p));
        ###
*
ChangeAbility:
    Field:
        private Ability ability;
        private String message;
        ###
    BeforeCast:
        Ability oldAbility = victim.getAbility();
        oldAbility.deactivate(b, victim);

        ChangeAbilitySource changey = (ChangeAbilitySource)source.getSource(caster);
        ability = changey.getAbility(b, caster, victim);
        message = changey.getMessage(b, caster, victim);

        // Remove any other ChangeAbility effects that the victim may have
        victim.getEffects().remove(this.namesies());
        ###
    AbilityHolder: ability
    CanHave: True
    CastMessage: message
*
Stockpile:
    Field:
        private int turns;
        ###
    Constructor:
        this.turns = 0;
        ###
    GetTurns:
        return turns;
        ###
    Int: StageChangingEffect
    CanHave: True
    AlternateCast:
        this.afterCast(b, caster, victim, source);
        ###
    AfterCast:
        if (this.turns < 3) {
            Messages.add(victim.getName() + " Defense and Special Defense were raised!");
            this.turns++;
            return;
        }

        Messages.add(Effect.DEFAULT_FAIL_MESSAGE);
        ###
    StageChange:
        return s == Stat.DEFENSE || s == Stat.SP_DEFENSE ? turns : 0;
        ###
    Subside:
        Messages.add("The effects of " + p.getName() + "'s Stockpile ended!");
        Messages.add(p.getName() + "'s Defense and Special Defense decreased!");
        ###
*
UsedDefenseCurl:
    UsedProof: True
*
UsedMinimize:
    UsedProof: True
*
Mimic:
    Field:
        private Move mimicMove;
        ###
    Int: ChangeMoveListEffect
    GetMoveList:
        List<Move> list = new ArrayList<>();
        for (Move move : actualMoves) {
            if (move.getAttack().namesies() == AttackNamesies.MIMIC) {
                list.add(mimicMove);
            } else {
                list.add(move);
            }
        }

        return new MoveList(list);
        ###
    BeforeCast:
        ActivePokemon other = b.getOtherPokemon(victim);
        final Move lastMoveUsed = other.getLastMoveUsed();
        Attack lastAttack = lastMoveUsed == null ? null : lastMoveUsed.getAttack();

        if (lastAttack == null || victim.hasMove(b, lastAttack.namesies()) || lastAttack.isMoveType(MoveType.MIMICLESS)) {
            Messages.add(Effect.DEFAULT_FAIL_MESSAGE);
            return;
        }

        mimicMove = new Move(lastAttack);
        ###
    CastMessage: victim.getName() + " learned " + mimicMove.getAttack().getName() + "!"
*
Imprison:
    Int: AttackSelectionSelfBlockerEffect
    Field:
        private List<AttackNamesies> unableMoves;
        ###
    BeforeCast:
        unableMoves = new ArrayList<>();
        for (Move m : caster.getMoves(b)) {
            unableMoves.add(m.getAttack().namesies());
        }
        ###
    CastMessage: user.getName() + " sealed " + victim.getName() + "'s moves!"
    Usable:
        return !unableMoves.contains(m.getAttack().namesies());
        ###
    UnusableMessage: "No!! You are imprisoned!!!"
*
Trapped:
    Int: TrappingEffect
    CastMessage: victim.getName() + " can't escape!"
    TrappingMessage: trapped.getName() + " cannot be recalled at this time!"
*
NoRetreat:
    Int: TrappingEffect
    CastMessage: victim.getName() + " cannot retreat!"
    TrappingMessage: trapped.getName() + " cannot retreat!"
    Comments: // Note: Different that Trapped effect because the attack can only be used once
*
Octolocked:
    Int: EndTurnEffect
    LockingEffect: caster
    CastMessage: victim.getName() + " can't escape!"
    TrappingMessage: trapped.getName() + " is trapped by Octolock!"
    ApplyEndTurn:
        // Make sure locking Pokemon is still here to be mean
        if (!checkActive(b)) {
            return;
        }
        
        // Charmander's Defense was lowered by Octolock!
        StageModifier stageReducer = new StageModifier(-1, Stat.DEFENSE, Stat.SP_DEFENSE).withMessage(this);
        stageReducer.modify(b, caster, victim, CastSource.EFFECT);
        ###
    Field:
        // Only locked as long as the caster is still in play
        private ActivePokemon caster;
        ###
    BeforeCast:
        this.caster = caster;
        ###
    ModifyStageMessenger: victimName + "'s " + statName + " was " + changed + " by Octolock!"
*
Foresight:
    ForesightEffect: Ghost attacking == Type.NORMAL || attacking == Type.FIGHTING
*
MiracleEye:
    ForesightEffect: Dark attacking == Type.PSYCHIC
*
Torment:
    Int: AttackSelectionSelfBlockerEffect
    Usable:
        // If you haven't used a move yet, there's nothing to contradict
        Move lastMoveUsed = p.getLastMoveUsed();
        if (lastMoveUsed == null) {
            return true;
        }

        // Struggle is not affected by torment
        AttackNamesies current = m.getAttack().namesies();
        if (current == AttackNamesies.STRUGGLE) {
            return true;
        }

        // Acceptable if trying to use a different move than last time
        return lastMoveUsed.getAttack().namesies() != current;
        ###
    UnusableMessage: p.getName() + " cannot use the same move twice in a row!"
    CastMessage: user.getName() + " tormented " + victim.getName() + "!"
    EffectSourcePreventMessage: torment
    EffectSourceRemoveMessage: tormented
*
Silence:
    Comments: // STFU MF
    NumTurns: 3
    CanHave: True
    Int: AttackSelectionSelfBlockerEffect
    Usable:
        return !m.getAttack().isMoveType(MoveType.SOUND_BASED);
        ###
    UnusableMessage: p.getName() + " cannot use sound-based moves!!"
*
Taunt:
    NumTurns: 3
    Int: AttackSelectionSelfBlockerEffect
    Usable:
        return !m.getAttack().isStatusMove();
        ###
    UnusableMessage: "No!! Not while you're under the effects of taunt!!"
    CastMessage: victim.getName() + " fell for the taunt!"
    SubsideMessage: "The effects of the taunt wore off."
    EffectSourcePreventMessage: it from being taunted
    EffectSourceRemoveMessage: taunted
*
LaserFocus:
    NumTurns: 2
    CastMessage: user.getName() + " began focusing!"
    Int: AlwaysCritEffect
*
LockOn:
    NumTurns: 2
    CastMessage: user.getName() + " took aim!"
    Int: PassableEffect
    SemiInvulnerableBypass:
        // I think this technically is not supposed to hit semi-invulnerable, but I think it should if No Guard can
        return true;
        ###
*
Telekinesis:
    NumTurns: 4
    CastMessage: victim.getName() + " was levitated due to " + user.getName() + "'s telekinesis!"
    EffectApplies: !victim.isGrounded(b)
    SubsideMessage: victim.getName() + " is no longer under the effects of telekinesis."
    Int: LevitationEffect
    OpponentBypassAccuracy:
        // Opponent can always strike you unless they are using a OHKO move or you are semi-invulnerable
        return !(attacking.getAttack() instanceof OhkoMove) && !defending.isSemiInvulnerable();
        ###
    FallMessage: "The effects of telekinesis were cancelled!"
*
Ingrain:
    Int: TrappingEffect, GroundedEffect, PassableEffect, NoSwapEffect
    TrappingMessage: trapped.getName() + " cannot be recalled due to ingrain!"
    EndTurnBigRootHealer: ingrain
    CastMessage: victim.getName() + " planted its roots!"
    AfterCast:
        removeLevitation(b, victim);
        ###
*
Grounded:
    Int: GroundedEffect
    AfterCast:
        removeLevitation(b, victim);
        ###
*
Curse:
    Int: EndTurnEffect, PassableEffect
    ApplyEndTurn:
        victim.reduceHealthFraction(b, 1/4.0, victim.getName() + " was hurt by the curse!");
        ###
    CastMessage: user.getName() + " cut its own HP and put a curse on " + victim.getName() + "!"
    AfterCast:
        caster.forceReduceHealthFraction(b, 1/2.0, "");
        ###
*
Yawn:
    NumTurns: 2
    TotalEffectApplies:
        return StatusNamesies.ASLEEP.getStatus().applies(b, caster, victim);
        ###
    Subside:
        StatusNamesies.ASLEEP.getStatus().apply(b, b.getOtherPokemon(p), p, CastSource.EFFECT);
        ###
    CastMessage: victim.getName() + " grew drowsy!"
*
MagnetRise:
    Int: LevitationEffect, PassableEffect
    NumTurns: 5
    CastMessage: user.getName() + " levitated with electromagnetism!"
    EffectApplies: !victim.isGrounded(b)
    SubsideMessage: victim.getName() + " is no longer under the effects of magnet rise."
    FallMessage: "The effects of " + fallen.getName() + "'s magnet rise were cancelled!"
*
Uproar:
    NumTurns: 3
    SubsideMessage: victim.getName() + "'s uproar ended."
    BeforeCast:
        uproar = victim.getMove();
        ###
    AfterCast:
        b.addEffect(StandardBattleEffectNamesies.FIELD_UPROAR.getEffect());

        wakeUp(b, victim);
        wakeUp(b, b.getOtherPokemon(victim));
        ###
    Field:
        private Move uproar;

        private static void wakeUp(Battle b, ActivePokemon wakey) {
            if (wakey.hasStatus(StatusNamesies.ASLEEP)) {
                wakey.removeStatus();
                Messages.add(new MessageUpdate("The uproar woke up " + wakey.getName() + "!").updatePokemon(b, wakey));
            }
        }
        ###
    Int: ForceMoveEffect, AttackSelectionEffect
    GetForceMove:
        return uproar;
        ###
    CastMessage: user.getName() + " started an uproar!"
    Usable:
        return m.getAttack().namesies() == AttackNamesies.UPROAR;
        ###
    UnusableMessage: "Only Uproar can be used right now!"
    ShouldSubside:
        // If uproar runs out of PP, the effect immediately ends
        return uproar.getPP() == 0;
        ###
*
AquaRing:
    Int: PassableEffect
    EndTurnBigRootHealer: aqua ring
    CastMessage: user.getName() + " surrounded itself with a veil of water!"
*
Nightmare:
    EffectApplies: victim.hasStatus(StatusNamesies.ASLEEP)
    Int: EndTurnEffect
    ApplyEndTurn:
        // Only active when asleep
        if (this.shouldSubside(b, victim)) {
            this.deactivate();
            return;
        }

        victim.reduceHealthFraction(b, 1/4.0, victim.getName() + " was hurt by its nightmare!");
        ###
    ShouldSubside:
        return !victim.hasStatus(StatusNamesies.ASLEEP);
        ###
    CastMessage: victim.getName() + " began having a nightmare!"
*
Charge:
    NumTurns: 2
    PowerMultiplierCondition: 2 user.isAttackType(Type.ELECTRIC)
*
Focusing:
    CastMessage: user.getName() + " began tightening its focus!"
    NumTurns: 1
    Int: DamageTakenEffect
    DamageTaken:
        Messages.add(damageTaker.getName() + " lost its focus and couldn't move!");
        damageTaker.getEffects().add(PokemonEffectNamesies.FLINCH.getEffect());
        this.deactivate();
        ###
*
ShellTrap:
    CastMessage: user.getName() + " set up a trap!"
    NumTurns: 1
    Int: PhysicalContactEffect
    Contact:
        Messages.add(user.getName() + " set off " + victim.getName() + "'s trap!!");
        this.deactivate();
        ###
*
BeakBlast:
    CastMessage: user.getName() + " started heating up its beak!"
    NumTurns: 1
    Int: PhysicalContactEffect
    Contact:
        StatusNamesies.BURNED.getStatus().apply(b, victim, user, CastSource.EFFECT);
        ###
*
FiddyPercentStronger:
    GetMultiplier:
        return 1.5;
        ###
    NumTurns: 1
*
Transformed:
    Field:
        private PokemonNamesies pokemon;
        private MoveList moveList;
        private int[] stats;
        private PokeType type;
        ###
    CastMessage: victim.getName() + " transformed into " + b.getOtherPokemon(victim).namesies().getName() + "!"
    AfterCast:
        // Pokemon to transform into
        ActivePokemon transformee = b.getOtherPokemon(victim);
        pokemon = transformee.namesies();

        // Set the new stats
        stats = new int[Stat.NUM_STATS];
        for (int i = 0; i < stats.length; i++) {
            stats[i] = victim.stats().calculate(i, transformee.getPokemonInfo().getStats());
        }
        stats[Stat.HP.index()] = victim.getMaxHP();

        // Copy the move list
        MoveList transformeeMoves = transformee.getMoves(b);
        List<Move> moves = new ArrayList<>();
        for (Move move : transformeeMoves) {
            moves.add(new Move(move.getAttack(), 5));
        }
        this.moveList = new MoveList(moves);

        // Copy all stages
        for (Stat stat : Stat.BATTLE_STATS) {
            victim.getStages().setStage(stat, transformee.getStage(stat));
        }

        // Copy the type
        type = transformee.getPokemonInfo().getType();
        
        // Castaway
        Messages.add(new MessageUpdate().withNewPokemon(pokemon, transformee.isShiny(), true, victim.isPlayer()));
        Messages.add(new MessageUpdate().updatePokemon(b, victim));
        ###
    FullEffectApplies:
        if (b.getOtherPokemon(victim).hasEffect(this.namesies())) {
            // Cannot transform into transformed Pokemon
            return ApplyResult.failure();
        } else if ((caster.hasAbility(AbilityNamesies.ILLUSION) && caster.getAbility().isActive())) {
            // Also cannot transform into an Illusioned Pokemon
            return ApplyResult.failure();
        }
        ###
    Int: ChangeMoveListEffect, DifferentStatEffect, ChangeTypeEffect
    GetMoveList:
        return moveList;
        ###
    GetStat:
        return stats[stat.index()];
        ###
    GetChangeTypeEffect:
        return type;
        ###
    PokemonHolder: pokemon
*
Substitute:
    Int: AbsorbDamageEffect, PassableEffect, StickyHoldEffect, StatProtectingEffect
    Field:
        private int hp;
        
        // Substitute-piercing moves, Sound-based moves, and Pokemon with the Infiltrator ability bypass Substitute
        private boolean infiltrated(ActivePokemon user) {
            if (user.hasAbility(AbilityNamesies.INFILTRATOR)) {
                return true;
            }

            // TODO: I don't know if this is sufficient or if we need a CastSource situation or what
            if (!user.isAttacking()) {
                return false;
            }
            
            Attack attack = user.getAttack();
            return attack.isMoveType(MoveType.SUBSTITUTE_PIERCING) || attack.isMoveType(MoveType.SOUND_BASED);
        }
        ###
    AfterCast:
        this.hp = victim.forceReduceHealthFraction(b, .25, victim.getName() + " put in a substitute!") + 1;
        
        // TODO: This should definitely be in some sort of function I don't like this at all
        String imageName = "substitute" + (victim.isPlayer() ? "-back" : "");
        Messages.add(new MessageUpdate().updatePokemon(b, victim).withImageName(imageName, victim.isPlayer()));
        ###
    EffectApplies: victim.getHPRatio() > .25 && victim.getMaxHP() > 3
    FullEffectPrevent:
        // Only block externally applied effects
        if (caster == victim) {
            return ApplyResult.success();
        }
    
        // Substitute only blocks Pokemon effects
        if (!(effectName instanceof PokemonEffectNamesies)) {
            return ApplyResult.success();
        }

        // Those pesky infiltrators
        if (this.infiltrated(caster)) {
            return ApplyResult.success();
        }

        // TODO: Attacks with multiple failing attacks print failure multiple times
        // Ex: Tickle prints "...but it failed!" twice
        // Swagger prints "Raised Attack!" then "...but it failed!" (referring to failed Confusion)
        return ApplyResult.failure();
        ###
    AbsorbDamage:
        this.hp -= damageAmount;
        if (this.hp <= 0) {
            Messages.add(new MessageUpdate("The substitute broke!").withNewPokemon(damageTaker.namesies(), damageTaker.isShiny(), true, damageTaker.isPlayer()));
            this.deactivate();
        } else {
            Messages.add("The substitute absorbed the hit!");
        }

        // Substitute always blocks damage
        return true;
        ###
    StatProtectingEffect:
        return !this.infiltrated(caster);
        ###
    StatProtectMessage: Effect.DEFAULT_FAIL_MESSAGE
    StatusPrevent:
        if (!this.infiltrated(caster)) {
            return ApplyResult.failure();
        }
        ###
*
MagicCoat:
    CastMessage: user.getName() + " shrouded itself with a magic coat!"
    NumTurns: 1
    MagicReflection: "Magic Coat"
*
Bide:
    Field:
        private Move move;
        private int turns;
        private int damage;
        ###
    Int: ForceMoveEffect, DamageTakenEffect
    GetForceMove:
        return move;
        ###
    GetTurns:
        return turns;
        ###
    CastMessage: user.getName() + " is storing energy!"
    Constructor:
        this.turns = 1;
        this.damage = 0;
        ###
    BeforeCast:
        move = caster.getMove();
        ###
    AlternateCast:
        // Already has the effect, but not ready for it to end yet -- store dat energy
        if (this.turns > 0) {
            this.turns--;
            this.addCastMessage(b, caster, victim, source, castMessage);
            return;
        }

        // TIME'S UP -- RELEASE DAT STORED ENERGY
        Messages.add(victim.getName() + " released energy!");
        if (this.damage == 0) {
            // Sucks to suck
            Messages.add(Effect.DEFAULT_FAIL_MESSAGE);
        } else {
            // RETALIATION STATION
            victim.callDelayedMove(b, b.getOtherPokemon(victim), AttackNamesies.BIDE);
        }

        // Bye Bye Bidesies
        this.deactivate();
        ###
    CanHave: True
    DamageTaken:
        this.damage += damageAmount;
        ###
    IntegerHolder: 2*this.damage
*
HalfWeight:
    Field:
        private int layers;
        ###
    CanHave: True
    AlternateCast:
        this.layers++;
        ###
    Constructor:
        this.layers = 1;
        ###
    Int: HalfWeightEffect
    HalfAmount: layers
    CastMessage: victim.getName() + " became nimble!"
*
PowerTrick:
    CanHave: True
    SwitchStat:
        if (s == Stat.ATTACK) {
            return Stat.DEFENSE;
        } else if (s == Stat.DEFENSE) {
            return Stat.ATTACK;
        } else {
            return s;
        }
        ###
    Int: PassableEffect, StatSwitchingEffect
    CastMessage: user.getName() + "'s attack and defense were swapped!"
    AlternateCast:
        this.addCastMessage(b, caster, victim, source, castMessage);
        this.deactivate();
        ###
*
HealBlock:
    NumTurns: 5
    CastMessage: user.getName() + " blocked " + victim.getName() + " from healing!"
    SubsideMessage: "The effects of heal block wore off."
    EffectSourcePreventMessage: heal block
    EffectSourceRemoveMessage: heal blocked
    Int: SelfAttackBlocker
    SelfBlock:
        // TODO: Test
        return user.getAttack().isMoveType(MoveType.HEALING);
        ###
*
Infatuation:
    EffectApplies: Gender.oppositeGenders(caster, victim)
    Int: BeforeAttackPreventingEffect
    CanAttack:
        Messages.add(attacking.getName() + " is in love with " + defending.getName() + "!");
        if (RandomUtils.chanceTest(50)) {
            return true;
        }

        Messages.add(attacking.getName() + "'s infatuation kept it from attacking!");
        return false;
        ###
    CastMessage: victim.getName() + " fell in love!"
    EffectSourcePreventMessage: infatuation
    EffectSourceRemoveMessage: infatuated
*
Snatch:
    NumTurns: 1
    Int: UserSwapperEffect
    UserSwap:
        if (user.getAttack().isSnatchable() && !user.isUsingTempMove()) {
            Messages.add(opponent.getName() + " snatched " + user.getName() + "'s move!");
            opponent.callTempMove(user.getAttack().namesies(), () -> {
                    Attack attack = opponent.getAttack();
                    attack.beginAttack(b, opponent, user);
                    attack.apply(opponent, user, b);
                    attack.endAttack(b, opponent, user);
                });
            return true;
        }

        return false;
        ###
    CastMessage: victim.getName() + " is awaiting an opportunity!"
*
Grudge:
    CastMessage: victim.getName() + " wants " + b.getOtherPokemon(victim).getName() + " to bear a grudge!"
    DeathWish:
        Messages.add(murderer.getName() + "'s " + murderer.getAttack().getName() + " lost all its PP due to " + dead.getName() + "'s grudge!");
        murderer.getMove().reducePP(murderer.getMove().getPP());
        ###
*
DestinyBond:
    CastMessage: victim.getName() + " is trying to take " + b.getOtherPokemon(victim).getName() + " down with it!"
    Int: StartAttackEffect
    BeforeAttack:
        // Destiny Bond stays active until the user moves again
        // TODO: Technically this should deactivate even if asleep, paralyzed, fully confused, etc
        this.deactivate();
        ###
    DeathWish:
        murderer.killKillKillMurderMurderMurder(b, dead.getName() + " took " + murderer.getName() + " down with it!");
        ###
    SuccessiveDecay: True
*
PerishSong:
    NumTurns: 3
    Int: PassableEffect, EndTurnEffect
    ApplyEndTurn:
        int turn = this.getTurns() - 1;
        Messages.add(victim.getName() + "'s Perish Song count fell to " + turn + "!");
        if (turn == 0) {
            victim.killKillKillMurderMurderMurder(b, "");
        }
        ###
*
Embargo:
    Int: PassableEffect, ItemBlockerEffect
    CastMessage: victim.getName() + " can't use items!"
    NumTurns: 5
    SubsideMessage: victim.getName() + " can use items again!"
*
ConsumedItem:
    Field:
        private HoldItem consumed;
        ###
    BeforeCast:
        consumed = victim.getHeldItem();
        victim.removeItem();
        victim.getEffects().remove(this.namesies());
        ###
    ItemHolder: consumed
    CanHave: True
*
Powder:
    NumTurns: 1
    CastMessage: user.getName() + " sprinkled powder on " + victim.getName() + "!"
    Int: SelfAttackBlocker
    SelfBlock:
        // Fire-type moves makes the user explode
        return user.isAttackType(Type.FIRE);
        ###
    SelfAlternateEffect:
        user.reduceHealthFraction(b, 1/4.0, "");
        ###
    SelfBlockMessage:
        return "The powder exploded!";
        ###
    EffectApplies: !PowderBlocker.containsPowderBlocker(b, victim)
*
EatenBerry:
*
Raging:
    Int: TakeDamageEffect
    OnTakeDamage:
        Move lastMoveUsed = victim.getLastMoveUsed();
        if (lastMoveUsed == null || lastMoveUsed.getAttack().namesies() != AttackNamesies.RAGE) {
            this.deactivate();
            return;
        }

        // Bulbasaur's Rage increased its Attack!
        new StageModifier(1, Stat.ATTACK).withMessage(this).modify(b, victim, victim, CastSource.EFFECT);
        ###
    ModifyStageMessenger: victimName + "'s Rage " + changed + " " + possessiveVictim + " " + statName + "!"
*
StickyTar:
    Int: OpponentPowerChangeEffect
    GetOppMultiplier:
        return user.isAttackType(Type.FIRE) ? 2 : 1;
        ###
    CastMessage: victim.getName() + " became weak to fire!"
*
