# The name of each effect and its contents.
# Blocks are separated by '*'
# Any function must be terminated by ### on a line by itself
# Fields can be specified in any order

Constructor:
	Namesies Enum EffectNamesies
	MinTurns Default -1 Int
	MaxTurns Default -1 Int
	NextTurnSubside Default False Boolean
*
Failure:
	Header boolean applies(Battle b, ActivePokemon caster, ActivePokemon victim, CastSource source)
	CanHave Not Default True Boolean Effect.hasEffect(b.getEffects(), this.namesies)
*

***

Gravity:
	NumTurns: 5
	Int: GroundedEffect, StageChangingEffect
	StageChange: 
	return s == Stat.EVASION ? stage - 2 : stage;
	###
	CastMessage: "Gravity intensified!"
	Cast: 
	super.cast(b, caster, victim, source, printCast);
	removeLevitation(b, caster);
	removeLevitation(b, victim);
	###
	SubsideMessage: "The gravity returned to normal."
*
WaterSport:
	Sporty: Fire Fire Water
*
MudSport:
	Sporty: Electric Electricity Mud
*
WonderRoom:
	Int: StatSwitchingEffect
	SwitchStat: 
	// Defense and Special Defense are swapped
	if (s == Stat.DEFENSE) return Stat.SP_DEFENSE;
	if (s == Stat.SP_DEFENSE) return Stat.DEFENSE;
	return s;
	###
	SpecialRoom: wonder switch defense and special defense
*
TrickRoom:
	SpecialRoom: trick switch speeds
*
MagicRoom:
	SpecialRoom: magic prevent using items
*
MistyTerrain:
	CastMessage: "Mist swirled around the battlefield!"
	SubsideMessage: "The mist disappeared from the battlefield."
	Terrain: Misty
	Int: StatusPreventionEffect, PowerChangeEffect, TerrainEffect
	StatusPrevent: 
	// Levitating Pokemon are immune to the mist
	return !victim.isLevitating(b);
	###
	StatusPreventMessage: "The protective mist prevents status conditions!"
	GetMultiplier:
	// Dragon type moves have halved power during the misty terrain
	return user.getAttackType() == Type.DRAGON && !user.isLevitating(b) ? .5 : 1;
	###
*
GrassyTerrain:
	CastMessage: "Grass sprouted around the battlefield!"
	SubsideMessage: "The grass withered and died."
	Terrain: Grass
	Int: EndTurnEffect, PowerChangeEffect, TerrainEffect
	ApplyEndTurn:
	if (!victim.fullHealth() && !victim.isLevitating(b)) {
		victim.healHealthFraction(1/16.0);
		Messages.addMessage(victim.getName() + " restored some HP due to the Grassy Terrain!", b, victim);
	}
	###
	GetMultiplier:
	// Grass-type moves are 50% stronger with the grassy terrain
	return user.getAttackType() == Type.GRASS && !user.isLevitating(b) ? 1.5 : 1;
	###
*
ElectricTerrain:
	CastMessage: "Electricity crackled around the battlefield!"
	SubsideMessage: "The electricity dissipated."
	Terrain: Electric
	Int: StatusPreventionEffect, PowerChangeEffect, TerrainEffect
	StatusPrevent:
	return status == StatusCondition.ASLEEP && !victim.isLevitating(b);
	###
	StatusPreventMessage: "The electric terrain prevents sleep!"
	GetMultiplier:
	// Electric-type moves are 50% stronger with the electric terrain
	return user.getAttackType() == Type.ELECTRIC && !user.isLevitating(b) ? 1.5 : 1;
	###
*