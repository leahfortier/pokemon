# The name of each effect and its contents.
# Blocks are separated by '*'
# Any function must be terminated by ### on a line by itself
# Fields can be specified in any order

Constructor:
    Namesies Enum StandardBattleEffectNamesies
    MinTurns Default -1 Int
    MaxTurns Default -1 Int
    CanHave Default False Boolean
    HasAlternateCast Default False Boolean
*

***

Gravity:
    NumTurns: 5
    Int: GroundedEffect, StageChangingEffect
    StageChange:
        return s == Stat.EVASION ? -2 : 0;
        ###
    CastMessage: "Gravity intensified!"
    AfterCast:
        removeLevitation(b, caster);
        removeLevitation(b, victim);
        ###
    SubsideMessage: "The gravity returned to normal."
*
WaterSport:
    Sporty: Fire Fire Water
*
MudSport:
    Sporty: Electric Electricity Mud
*
WonderRoom:
    Int: StatSwitchingEffect
    SwitchStat:
        // Defense and Special Defense are swapped
        if (s == Stat.DEFENSE) {
            return Stat.SP_DEFENSE;
        } else if (s == Stat.SP_DEFENSE) {
            return Stat.DEFENSE;
        } else {
            return s;
        }
        ###
    SpecialRoom: wonder switch defense and special defense
*
TrickRoom:
    SpecialRoom: trick switch speeds
*
MagicRoom:
    Int: ItemBlockerEffect
    SpecialRoom: magic prevent using items
*
FieldUproar:
    StatusPrevent:
        if (status == StatusNamesies.ASLEEP) {
            return ApplyResult.failure("The uproar prevents sleep!!");
        }
        ###
    TheVeryEnd:
        if (b.getPlayer().front().hasEffect(PokemonEffectNamesies.UPROAR) || b.getOpponent().front().hasEffect(PokemonEffectNamesies.UPROAR)) {
            return false;
        }

        this.deactivate();
        return true;
        ###
*
PowerSplit:
    StatSplit: Attack Sp_Attack power
*
GuardSplit:
    StatSplit: Defense Sp_Defense defense
*
JawLocked:
    Field:
        // The Pokemon that are locked by the jaw
        private ActivePokemon caster;
        private ActivePokemon victim;
        ###
    Int: BattleEndTurnEffect
    TrappingMessage: trapped.getName() + " is trapped by Jaw Lock!"
    BeforeCast:
        this.caster = caster;
        this.victim = victim;
        ###
    CastMessage: user.getName() + " locked jaws with " + victim.getName() + "!"
    BattleEndTurn:
        // Deactivate if Jaw Locked Pokemon aren't around
        this.checkActive(b);
        ###
    LockingEffect: caster, victim
*
CorrosiveGas:
    Field:
        private ActivePokemon victim;
        ###
    Int: ItemBlockerEffect
    BlockItem:
        return p == victim;
        ###
    CanHave: True
    BeforeCast:
        this.victim = victim;
        ###
*
