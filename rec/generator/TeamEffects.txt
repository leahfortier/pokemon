# The name of each effect and its contents.
# Blocks are separated by '*'
# Any function must be terminated by ### on a line by itself
# Fields can be specified in any order

Constructor:
    Namesies Enum TeamEffectNamesies
    MinTurns Default -1 Int
    MaxTurns Default -1 Int
    CanHave Default False Boolean
    HasAlternateCast Default False Boolean
*

***

Reflect:
    SimpleBarrier: Defense reflect
*
LightScreen:
    SimpleBarrier: Sp_Defense light screen
*
Tailwind:
    SimpleToModify: Speed 2
    NumTurns: 4
    SubsideMessage: "The effects of tailwind faded."
    CastMessage: user.getName() + " raised the speed of its team!"
    Int: SwappableEffect
*
AuroraVeil:
    TwoModify: Defense Sp_Defense
    CastMessage: user.getName() + " is covered by an aurora veil!"
    Barrier: aurora veil
*
StickyWeb:
    Enter:
        if (!enterer.isOnTheGround(b)) {
            return;
        }

        // The sticky web lowered Charmander's Speed!
        new StageModifier(-1, Stat.SPEED).withMessage(this).modify(b, b.getOtherPokemon(enterer), enterer, CastSource.EFFECT);
        ###
    CastMessage: "Sticky web covers everything!"
    EntryHazard: "The sticky web dispersed!"
    ModifyStageMessenger: "The sticky web " + changed + " " + victimName + "'s " + statName + "!"
*
StealthRock:
    Enter: 
        double advantage = Type.ROCK.getAdvantage().getAdvantage(enterer, b);
        enterer.reduceHealthFraction(b, advantage/8.0, enterer.getName() + " was hurt by stealth rock!");
        ###
    CastMessage: "Floating rocks were scattered all around!"
    EntryHazard: "The floating rocks dispersed!"
*
ToxicSpikes:
    Field: 
        private int layers;
        ###
    Constructor: 
        this.layers = 1;
        ###
    Enter:
        // Can't touch this
        if (!enterer.isOnTheGround(b)) {
            return;
        }
        
        // Poison-type Pokes absorb Toxic Spikes
        if (enterer.isType(b, Type.POISON)) {
            Messages.add(enterer.getName() + " absorbed the Toxic Spikes!");
            this.deactivate();
            return;
        }
        
        // Poison those bros
        ActivePokemon theOtherPokemon = b.getOtherPokemon(enterer);
        StatusNamesies poisonCondition = layers >= 2 ? StatusNamesies.BADLY_POISONED : StatusNamesies.POISONED;
        poisonCondition.getStatus().apply(b, theOtherPokemon, enterer, CastSource.EFFECT);
        ###
    CastMessage: "Toxic spikes were scattered all around!"
    CanHave: True
    AlternateCast:
        this.addCastMessage(b, caster, victim, source, castMessage);
        this.layers++;
        ###
    EntryHazard: "The toxic spikes dispersed!"
*
Spikes:
    Field: 
        private int layers;
        
        private double getReduceFraction() {
            switch (layers) {
                case 1:
                    return 1/8.0;
                case 2:
                    return 1/6.0;
                default:
                    return 1/4.0;
            }
        }
        ###
    Constructor: 
        this.layers = 1;
        ###
    Enter: 
        if (enterer.isOnTheGround(b)) {
            enterer.reduceHealthFraction(b, this.getReduceFraction(), enterer.getName() + " was hurt by spikes!");
        }
        ###
    CastMessage: "Spikes were scattered all around!"
    CanHave: True
    AlternateCast:
        this.addCastMessage(b, caster, victim, source, castMessage);
        this.layers++;
        ###
    EntryHazard: "The spikes dispersed!"
*
Wish:
    NumTurns: 2
    Field: 
        private String casterName;
        ###
    Subside:
        Messages.add(casterName + "'s wish came true!");
        p.healHealthFraction(1/2.0, b, p.getName() + "'s health was restored!");
        ###
    BeforeCast: 
        casterName = caster.getName();
        ###
    CastMessage: casterName + " made a wish!"
*
LuckyChant:
    NumTurns: 5
    CastMessage: "The lucky chant shielded " + victim.getName() + "'s team from critical hits!"
    SubsideMessage: "The effects of lucky chant wore off."
    Int: CritBlockerEffect
*
FutureSight:
    FutureAttackEffect: Future_Sight
*
DoomDesire:
    FutureAttackEffect: Doom_Desire
*
HealSwitch:
    Field: 
        private String wish;
        ###
    Int: EntryEffect
    Enter: 
        enterer.removeStatus();
        enterer.healHealthFraction(1, b, enterer.getName() + " health was restored due to the " + wish + "!");
        this.deactivate();
        ###
    BeforeCast: 
        wish = caster.getAttack().namesies() == AttackNamesies.LUNAR_DANCE ? "lunar dance" : "healing wish";
        ###
*
DeadAlly:
    NumTurns: 2
    CanHave: True
*
PayDay:
    Int: EndBattleEffect
    Field: 
        private int coins;
        ###
    AlternateCast:
        // TODO: This should be a battle effect since it only applies to the player
        this.addCastMessage(b, caster, victim, source, castMessage);
        this.coins += 5*caster.getLevel();
        ###
    BeforeCast:
        coins = 5*caster.getLevel();
        ###
    CastMessage: "Coins scattered everywhere!"
    CanHave: True
    EndBattle:
        Messages.add(player.getName() + " picked up " + coins + " " + PokeString.POKEDOLLARS + "!");
        player.getDatCashMoney(coins);
        ###
*
Safeguard:
    Defog: "The effects of Safeguard faded."
    CastMessage: user.getName() + " is covered by a veil!"
    SubsideMessage: "The effects of Safeguard faded."
    NumTurns: 5
    StatusPrevent:
        if (caster != victim && !caster.hasAbility(AbilityNamesies.INFILTRATOR)) {
            return ApplyResult.failure("Safeguard prevents status conditions!");
        }
        ###
    FullEffectPrevent:
        if (effectName == PokemonEffectNamesies.CONFUSION && caster != victim && !caster.hasAbility(AbilityNamesies.INFILTRATOR)) {
            return ApplyResult.failure("Safeguard prevents confusion!");
        }
                
        return ApplyResult.success();
        ###
*
Mist:
    NumTurns: 5
    CastMessage: user.getName() + " shrouded itself in mist!"
    SubsideMessage: "The mist faded."
    Defog: "The mist faded."
    Int: StatProtectingEffect
    StatProtectingEffect:
        return !caster.hasAbility(AbilityNamesies.INFILTRATOR);
        ###
    StatProtectMessage: "The mist prevents stat reductions!"
*
GuardSpecial:
    CastMessage: user.getName() + " is shrouded by a veil!"
    SubsideMessage: "The effects of Guard Special faded."
    NumTurns: 5
    Int: StatProtectingEffect
    StatProtectingEffect:
        return !caster.hasAbility(AbilityNamesies.INFILTRATOR);
        ###
    StatProtectMessage: "Guard Special prevents stat reductions!"
*
GetDatCashMoneyTwice:
*
