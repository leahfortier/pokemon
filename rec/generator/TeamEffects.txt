# The name of each effect and its contents.
# Blocks are separated by '*'
# Any function must be terminated by ### on a line by itself
# Fields can be specified in any order

Constructor:
	Namesies Enum EffectNamesies
	MinTurns Default -1 Int
	MaxTurns Default -1 Int
	NextTurnSubside Default False Boolean
*
Failure:
	Header boolean applies(Battle b, ActivePokemon caster, ActivePokemon victim, CastSource source)
	CanHave Not Default True Boolean Effect.hasEffect(b.getEffects(victim), this.namesies)
*

***

Reflect:
	Int: BarrierEffect
	Barrier: Defense reflect
*
LightScreen:
	Int: BarrierEffect
	Barrier: Sp_Defense light screen
*
Tailwind:
	ToModify: Speed
	SimpleModifier: 2 
	NumTurns: 4
	SubsideMessage: "The effects of tailwind faded."
	CastMessage: user.getName() + " raised the speed of its team!"
*
AuroraVeil:
	TwoModify: Defense Sp_Defense
	SimpleModifier: 2 
	SubsideMessage: "The effects of aurora veil faded."
	CastMessage: user.getName() + " is covered by an aurora veil!"
	LightClay: True
*
StickyWeb:
	Int: EntryEffect, RapidSpinRelease, DefogRelease
	Enter:
		if (enterer.isLevitating(b)) {
			return;
		}
		
		enterer.getAttributes().modifyStage(b.getOtherPokemon(enterer), enterer, -1, Stat.SPEED, b, CastSource.EFFECT, "The sticky web {change} " + enterer.getName() + "'s {statName}!");
		###
	CastMessage: "Sticky web covers everything!"
	RapidSpin: "The sticky web spun away!"
	Defog: "The sticky web dispersed!"
*
StealthRock:
	Int: EntryEffect, RapidSpinRelease, DefogRelease
	Enter: 
		if (enterer.hasAbility(AbilityNamesies.MAGIC_GUARD)) {
			return;
		}
		
		Messages.add(enterer.getName() + " was hurt by stealth rock!");
		enterer.reduceHealthFraction(b, Type.ROCK.getAdvantage().getAdvantage(enterer, b)/8.0);
		###
	CastMessage: "Floating rocks were scattered all around!"
	RapidSpin: "The floating rocks spun away!"
	Defog: "The floating rocks dispersed!"
*
ToxicSpikes:
	Int: EntryEffect, RapidSpinRelease, DefogRelease
	Field: 
		private int layers;
		###
	Activate: 
		this.layers = 1;
		###
	Enter: 
		if (enterer.isLevitating(b)) {
			return;
		}
		
		if (enterer.isType(b, Type.POISON)) {
			Messages.add(enterer.getName() + " absorbed the Toxic Spikes!");
			super.active = false;
			return;
		}
		
		ActivePokemon theOtherPokemon = b.getOtherPokemon(enterer);
		StatusCondition poisonCondition = layers >= 2 ? StatusCondition.BADLY_POISONED : StatusCondition.POISONED;
		Status.giveStatus(b, theOtherPokemon, enterer, poisonCondition);
		###
	CastMessage: "Toxic spikes were scattered all around!"
	CanHave: True
	Cast: 
		Effect spikesies = Effect.getEffect(b.getEffects(victim), this.namesies);
		if (spikesies == null) {
			super.cast(b, caster, victim, source, printCast);
			return;
		}
		
		((ToxicSpikes)spikesies).layers++;
		Messages.add(getCastMessage(b, caster, victim, source));
		###
	RapidSpin: "The toxic spikes dispersed!"
	Defog: "The toxic spikes dispersed!"
*
Spikes:
	Int: EntryEffect, RapidSpinRelease, DefogRelease
	Field: 
		private int layers;
		###
	Activate: 
		this.layers = 1;
		###
	Enter: 
		if (enterer.isLevitating(b) || enterer.hasAbility(AbilityNamesies.MAGIC_GUARD)) {
			return;
		}
		
		Messages.add(enterer.getName() + " was hurt by spikes!");
		if (layers == 1) {
			enterer.reduceHealthFraction(b, 1/8.0);
		} else if (layers == 2) {
			enterer.reduceHealthFraction(b, 1/6.0);
		} else {
			enterer.reduceHealthFraction(b, 1/4.0);
		}
		###
	CastMessage: "Spikes were scattered all around!"
	CanHave: True
	Cast: 
		Effect spikesies = Effect.getEffect(b.getEffects(victim), this.namesies);
		if (spikesies == null) {
			super.cast(b, caster, victim, source, printCast);
			return;
		}
		
		((Spikes)spikesies).layers++;
		Messages.add(getCastMessage(b, caster, victim, source));
		###
	RapidSpin: "The spikes dispersed!"
	Defog: "The spikes dispersed!"
*
Wish:
	NumTurns: 1
	NextTurnSubside: True
	Field: 
		private String casterName;
		###
	Subside: 
		if (p.hasEffect(EffectNamesies.HEAL_BLOCK)) {
			return;
		}
		
		p.healHealthFraction(1/2.0);
		Messages.add(new MessageUpdate(casterName + "'s wish came true!").updatePokemon(b, p));
		###
	Cast: 
		casterName = caster.getName();
		super.cast(b, caster, victim, source, printCast);
		###
*
LuckyChant:
	NumTurns: 5
	CastMessage: "The lucky chant shielded " + victim.getName() + "'s team from critical hits!"
	SubsideMessage: "The effects of lucky chant wore off."
	Int: CritBlockerEffect
*
FutureSight:
	FutureAttackEffect: Future_Sight
*
DoomDesire:
	FutureAttackEffect: Doom_Desire
*
HealSwitch:
	Field: 
		private String wish;
		###
	Int: EntryEffect
	Enter: 
		enterer.healHealthFraction(1);
		enterer.removeStatus();
		
		Messages.add(new MessageUpdate(enterer.getName() + " health was restored due to the " + wish + "!").updatePokemon(b, enterer));
		super.active = false;
		###
	Cast: 
		wish = caster.getAttack().namesies() == AttackNamesies.LUNAR_DANCE ? "lunar dance" : "healing wish";
		super.cast(b, caster, victim, source, printCast);
		###
*
DeadAlly:
	NumTurns: 2
*
PayDay:
	Int: EndBattleEffect
	Field: 
		private int coins;
		###
	Cast: 
		PayDay payday = (PayDay)Effect.getEffect(b.getEffects(true), this.namesies);
		Messages.add(getCastMessage(b, caster, victim, source));
		coins = 5*caster.getLevel();
		if (payday == null) {
			b.getPlayer().addEffect(this);
		} else {
			payday.coins += coins;
		}
		###
	CastMessage: "Coins scattered everywhere!"
	CanHave: True
	EndBattle: 
		Messages.add(player.getName() + " picked up " + coins + " pokedollars!");
		player.getDatCashMoney(coins);
		###
*
GetDatCashMoneyTwice:
*