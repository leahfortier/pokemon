# The name of each ability and its contents.
# Blocks are separated by '*'

Constructor:
    Namesies Enum AbilityNamesies
    Desc String
*

***

No Ability:
    Desc: None
*
Overgrow:
    Desc: Powers up Grass-type moves when the Pok\u00e9mon's HP is low.
    PinchAbility: Grass
*
Chlorophyll:
    Desc: Boosts the Pok\u00e9mon's Speed stat in sunshine.
    SpeedWeather: Sunny
*
Blaze:
    Desc: Powers up Fire-type moves when the Pok\u00e9mon's HP is low.
    PinchAbility: Fire
*
Solar Power:
    Desc: Boosts the Sp. Atk stat in sunny weather, but HP decreases every turn.
    Int: EndTurnEffect
    PowerMultiplierCondition: 1.5 user.getAttack().getCategory() == MoveCategory.SPECIAL && b.getWeather().namesies() == WeatherNamesies.SUNNY
    ApplyEndTurn:
        if (b.getWeather().namesies() == WeatherNamesies.SUNNY) {
            Messages.add(victim.getName() + " lost some of its HP due to its " + this.getName() + "!");
            victim.reduceHealthFraction(b, 1/8.0);
        }
        ###
*
Torrent:
    Desc: Powers up Water-type moves when the Pok\u00e9mon's HP is low.
    PinchAbility: Water
*
Rain Dish:
    Desc: The Pok\u00e9mon gradually regains HP in rain.
    Int: EndTurnEffect
    ApplyEndTurn:
        if (b.getWeather().namesies() == WeatherNamesies.RAINING) {
            victim.healHealthFraction(1/16.0);
            Messages.add(new MessageUpdate(victim.getName() + "'s HP was restored due to its " + this.getName() + "!").updatePokemon(b, victim));
        }
        ###
*
Shield Dust:
    Desc: This Pok\u00e9mon's dust blocks the additional effects of attacks taken.
    ValidMove:
        return !user.getAttack().hasSecondaryEffects();
        ###
    Int: EffectBlockerEffect
*
Shed Skin:
    Desc: The Pok\u00e9mon may heal its own status conditions by shedding its skin.
    EndTurnStatusCure: RandomUtils.chanceTest(1, 3)
*
Compoundeyes:
    Desc: The Pok\u00e9mon's compound eyes boost its accuracy.
    SimpleModifier: 1.3
    ToModify: Accuracy
*
Tinted Lens:
    Desc: The Pok\u00e9mon can use \"not very effective\" moves to deal regular damage.
    PowerMultiplierCondition: 2 TypeAdvantage.isNotVeryEffective(user, victim, b)
*
Swarm:
    Desc: Powers up Bug-type moves when the Pok\u00e9mon's HP is low.
    PinchAbility: Bug
    EncounterRateMultiplier: 1.5
    Comments: // Guessed on the encounter rate multiplier
*
Sniper:
    Desc: Powers up moves if they become critical hits when attacking.
*
Keen Eye:
    Desc: Keen eyes prevent other Pok\u00e9mon from lowering this Pok\u00e9mon's accuracy.
    Int: StatProtectingEffect, OpponentIgnoreStageEffect, RepelLowLevelEncounterEffect
    StatProtect:
        return stat == Stat.ACCURACY;
        ###
    IgnoreStage:
        return s == Stat.EVASION;
        ###
*
Tangled Feet:
    Desc: Raises evasion if the Pok\u00e9mon is confused.
    Int: StageChangingEffect
    StageChange:
        return s == Stat.EVASION && p.hasEffect(PokemonEffectNamesies.CONFUSION) ? 1 : 0;
        ###
*
Guts:
    Desc: It's so gutsy that having a status condition boosts the Pok\u00e9mon's Attack stat.
    ToModify: Attack
    ModifyMultiplier: 1.5 p.hasStatus()
*
Intimidate:
    Desc: The Pok\u00e9mon intimidates opposing Pok\u00e9mon upon entering battle, lowering their Attack stat.
    Int: EntryEffect, RepelLowLevelEncounterEffect
    Enter:
        ActivePokemon other = b.getOtherPokemon(enterer);
        other.getStages().modifyStage(enterer, -1, Stat.ATTACK, b, CastSource.ABILITY);
        ###
*
Static:
    Desc: The Pok\u00e9mon is charged with static electricity, so contact with it may cause paralysis.
    StatusContact: Paralyzed
    TypedWildEncounterSelector: Electric
*
Lightningrod:
    Desc: The Pok\u00e9mon draws in all Electric-type moves. Instead of being hit by Electric-type moves, it boosts its Sp. Atk.
    IncreaseBlockType: Electric Sp_Attack
*
Sand Veil:
    Desc: Boosts the Pok\u00e9mon's evasion in a sandstorm.
    WeatherEvasion: Sandstorm
    WeatherEncounterRateDecreaser: Sandstorm
*
Sand Rush:
    Desc: Boosts the Pok\u00e9mon's Speed stat in a sandstorm.
    SpeedWeather: Sandstorm
*
Slush Rush:
    Desc: Boosts the Pok\u00e9mon's Speed stat in a hailstorm.
    SpeedWeather: Hailing
*
Poison Point:
    Desc: Contact with the Pok\u00e9mon may poison the attacker.
    StatusContact: Poisoned
*
Rivalry:
    Desc: Becomes competitive and deals more damage to Pok\u00e9mon of the same gender, but deals less to Pok\u00e9mon of the opposite gender.
    GetMultiplier:
        if (user.getGender() == Gender.GENDERLESS) {
            return 1;
        } else if (Gender.oppositeGenders(user, victim)) {
            return .75;
        } else if (user.getGender() == victim.getGender()) {
            return 1.25;
        } else {
            return 1;
        }
        ###
*
Cute Charm:
    Desc: Contact with the Pok\u00e9mon may cause infatuation.
    Int: PhysicalContactEffect
    Contact:
        if (RandomUtils.chanceTest(30) && PokemonEffectNamesies.INFATUATED.getEffect().apply(b, victim, user, CastSource.ABILITY, false)) {
            Messages.add(victim.getName() + "'s " + this.getName() + " infatuated " + user.getName() + "!");
        }
        ###
    WildPokemonAlterer:
        if (RandomUtils.chanceTest(2, 3)) {
            Gender opposite = playerFront.getGender().getOppositeGender();
            if (opposite.genderApplies(encounter.getPokemon().getInfo())) {
                encounter.setGender(opposite);
            }
        }
        ###
*
Magic Guard:
    Desc: The Pok\u00e9mon only takes damage from attacks.
    Int: WeatherBlockerEffect
    WeatherBlock:
        return true;
        ###
*
Flash Fire:
    Desc: Powers up the Pok\u00e9mon's Fire-type moves if it's hit by one.
    Field:
        private boolean activated;
        ###
    Activate:
        this.activated = false;
        ###
    AbilityIsActive:
        return activated;
        ###
    BlockType: Fire
    AlternateEffect:
        activated = true;
        ###
    PowerMultiplierCondition: 1.5 activated && user.isAttackType(Type.FIRE)
*
Drought:
    WeatherStarter: Sunny made the sunlight turn harsh
    Desc: Turns the sunlight harsh when the Pok\u00e9mon enters a battle.
*
Frisk:
    Desc: When it enters a battle, the Pok\u00e9mon can check an opposing Pok\u00e9mon's held item.
    Int: EntryEffect
    Enter:
        ActivePokemon other = b.getOtherPokemon(enterer);
        if (other.isHoldingItem(b)) {
            Messages.add(enterer.getName() + "'s " + this.getName() + " alerted it to " + other.getName() + "'s " + other.getHeldItem(b).getName() + "!");
        }
        ###
*
Inner Focus:
    Desc: The Pok\u00e9mon's intensely focused, and that protects the Pok\u00e9mon from flinching.
*
Infiltrator:
    Desc: Passes through the opposing Pok\u00e9mon's barrier, substitute, and the like and strikes.
*
Stench:
    Desc: By releasing stench when attacking, this Pok\u00e9mon may cause the target to flinch.
    Int: OpponentTakeDamageEffect
    OpponentTakeDamage:
        if (RandomUtils.chanceTest(10)) {
            if (PokemonEffectNamesies.FLINCH.getEffect().apply(b, user, victim, CastSource.ABILITY, false)) {
                Messages.add(user.getName() + "'s " + this.getName() + " caused " + victim.getName() + " to flinch!");
            }
        }
        ###
    EncounterRateMultiplier: .5
*
Effect Spore:
    Desc: Contact with the Pok\u00e9mon may inflict poison, sleep, or paralysis on its attacker.
    Int: PhysicalContactEffect
    Field:
        private static final StatusNamesies[] STATUSES = new StatusNamesies[] {
            StatusNamesies.PARALYZED,
            StatusNamesies.POISONED,
            StatusNamesies.ASLEEP
        };
        ###
    Contact:
        // Grass-type Pokemon, Pokemon with Overcoat, and Pokemon holding the Safety Goggles are immune to Effect Spore
        if (user.isType(b, Type.GRASS) || user.hasAbility(AbilityNamesies.OVERCOAT) || user.isHoldingItem(b, ItemNamesies.SAFETY_GOGGLES)) {
            return;
        }

        // 30% chance to Paralyze, Poison, or induce Sleep
        if (RandomUtils.chanceTest(30)) {
            RandomUtils.getRandomValue(STATUSES).getStatus().apply(b, victim, user, CastSource.ABILITY);
        }
        ###
*
Dry Skin:
    Desc: Restores HP in rain or when hit by Water-type moves. Reduces HP in sunshine, and increases the damage received from Fire-type moves.
    Int: EndTurnEffect, OpponentPowerChangeEffect
    ApplyEndTurn:
        if (b.getWeather().namesies() == WeatherNamesies.SUNNY) {
            Messages.add(victim.getName() + " lost some of its HP due to its " + this.getName() + "!");
            victim.reduceHealthFraction(b, 1/8.0);
        } else if (b.getWeather().namesies() == WeatherNamesies.RAINING && !victim.fullHealth()) {
            victim.healHealthFraction(1/8.0);
            Messages.add(new MessageUpdate(victim.getName() + "'s HP was restored due to its " + this.getName() + "!").updatePokemon(b, victim));
        }
        ###
    AbsorbType: Water
    GetOppMultiplier:
        return user.isAttackType(Type.FIRE) ? 1.25 : 1;
        ###
*
Arena Trap:
    Desc: Prevents opposing Pok\u00e9mon from fleeing.
    OpponentTrappingAbility: !escaper.isLevitating(b) && !escaper.isType(b, Type.GHOST)
    EncounterRateMultiplier: 2
*
Technician:
    Desc: Powers up the Pok\u00e9mon's weaker moves.
    PowerMultiplierCondition: 1.5 user.getAttack().getPower(b, user, victim) <= 60
*
Limber:
    Desc: Its limber body protects the Pok\u00e9mon from paralysis.
    StatusPreventAbility: Paralyzed paralysis
*
Damp:
    Desc: Prevents the use of explosive moves such as Self-Destruct by dampening its surroundings.
    Int: AttackBlocker, SelfAttackBlocker
    Field:
        private boolean checkeroo(ActivePokemon attacking) {
            return attacking.getAttack().isMoveType(MoveType.EXPLODING);
        }

        private String blockityMessage(ActivePokemon attacking, ActivePokemon abilify) {
            return abilify.getName() + "'s " + this.getName() + " prevents " + attacking.getAttack().getName() + " from being used!";
        }
        ###
    SelfBlock:
        return checkeroo(user);
        ###
    Block:
        return checkeroo(user);
        ###
    SelfBlockMessage:
        return blockityMessage(user, user);
        ###
    BlockMessage: blockityMessage(user, victim)
*
Cloud Nine:
    Desc: Eliminates the effects of weather.
    WeatherEliminate: True
*
Vital Spirit:
    Desc: The Pok\u00e9mon is full of vitality, and that prevents it from falling asleep.
    StatusPreventAbility: Asleep sleep
    Int: MaxLevelWildEncounterEffect
*
Insomnia:
    Desc: The Pok\u00e9mon is suffering from insomnia and cannot fall asleep.
    StatusPreventAbility: Asleep sleep
*
Anger Point:
    Desc: The Pok\u00e9mon is angered when it takes a critical hit, and that maxes its Attack stat.
*
Synchronize:
    Desc: The attacker will receive the same status condition if it inflicts a burn, poison, or paralysis to the Pok\u00e9mon.
    Int: StatusReceivedEffect
    Field:
        private static final Set<StatusNamesies> PASSABLE_STATUSES = EnumSet.of(
                StatusNamesies.BURNED,
                StatusNamesies.PARALYZED,
                StatusNamesies.POISONED,
                StatusNamesies.BADLY_POISONED
        );
        ###
    StatusReceived:
        // Only applies when the opponent gives the victim the condition
        if (caster == victim) {
            return;
        }

        // Synchronize doesn't apply to every condition
        if (!PASSABLE_STATUSES.contains(statusType)) {
            return;
        }

        // Give status condition to the opponent
        statusType.getStatus().apply(b, victim, caster, CastSource.ABILITY);
        ###
    WildPokemonAlterer:
        if (RandomUtils.chanceTest(50)) {
            encounter.setNature(playerFront.getNature());
        }
        ###
*
No Guard:
    Desc: The Pok\u00e9mon employs no-guard tactics to ensure incoming and outgoing attacks always land.
    SemiInvulnerableBypass:
        // Moves always hit
        return true;
        ###
    OpponentBypassAccuracy:
        // Moves always hit
        return true;
        ###
    EncounterRateMultiplier: 1.5
*
Own Tempo:
    Desc: This Pok\u00e9mon has its own tempo, and that prevents it from becoming confused.
*
Clear Body:
    Desc: Prevents other Pok\u00e9mon's moves or Abilities from lowering the Pok\u00e9mon's stats.
    Int: StatProtectingEffect
    StatProtect:
        return true;
        ###
*
Full Metal Body:
    Desc: Prevents other Pok\u00e9mon's moves or Abilities from lowering the Pok\u00e9mon's stats.
    Int: StatProtectingEffect
    StatProtect:
        return true;
        ###
    MoldBreakerBreaker: True
*
Liquid Ooze:
    Desc: Oozed liquid has strong stench, which damages attackers using any draining move.
*
Rock Head:
    Desc: Protects the Pok\u00e9mon from recoil damage.
*
Sturdy:
    Desc: It cannot be knocked out with one hit. One-hit KO moves cannot knock it out, either.
    Int: BracingEffect
    Bracing:
        return fullHealth;
        ###
    BraceMessage: bracer.getName() + "'s " + this.getName() + " endured the hit!"
    MoveTypePrevent: ONE_HIT_KO OHKO moves
*
Oblivious:
    Desc: The Pok\u00e9mon is oblivious, and that keeps it from being infatuated or falling for taunts.
    Int: AttackBlocker
    Block:
        return user.getAttack().namesies() == AttackNamesies.CAPTIVATE;
        ###
    BlockMessage: victim.getName() + "'s " + victim.getAbility().getName() + " prevents it from being captivated!"
*
Magnet Pull:
    OpponentTrappingAbility: escaper.isType(b, Type.STEEL) && !escaper.isType(b, Type.GHOST)
    Desc: Prevents Steel-type Pok\u00e9mon from escaping using its magnetic force.
    TypedWildEncounterSelector: Steel
*
Unaware:
    Desc: When attacking, the Pok\u00e9mon ignores the target Pok\u00e9mon's stat changes.
    Int: OpponentIgnoreStageEffect
    IgnoreStage:
        return s != Stat.SPEED;
        ###
*
Simple:
    Desc: The stat changes the Pok\u00e9mon receives are doubled.
    Int: ModifyStageValueEffect
    ModifyStageValue:
        return modVal*2;
        ###
*
Early Bird:
    Desc: The Pok\u00e9mon awakens twice as fast as other Pok\u00e9mon from sleep.
    Int: StatusReceivedEffect
	StatusReceived:
        if (statusType == StatusNamesies.ASLEEP) {
            StatusCondition sleepyTime = victim.getStatus();
            sleepyTime.setTurns(sleepyTime.getTurns()/2);
        }
        ###
*
Thick Fat:
    Desc: The Pok\u00e9mon is protected by a layer of thick fat, which halves the damage taken from Fire- and Ice-type moves.
    Int: OpponentPowerChangeEffect
    GetOppMultiplier:
        return user.isAttackType(Type.FIRE) || user.isAttackType(Type.ICE) ? .5 : 1;
        ###
*
Hydration:
    Desc: Heals status conditions if it's raining.
    EndTurnStatusCure: b.getWeather().namesies() == WeatherNamesies.RAINING
*
Shell Armor:
    Desc: A hard shell protects the Pok\u00e9mon from critical hits.
    Int: CritBlockerEffect
*
Battle Armor:
    Desc: Hard armor protects the Pok\u00e9mon from critical hits.
    Int: CritBlockerEffect
*
Skill Link:
    Desc: Maximizes the number of times multi-strike moves hit.
*
Levitate:
    Desc: By floating in the air, the Pok\u00e9mon receives full immunity to all Ground-type moves.
    Int: LevitationEffect
*
Forewarn:
    Desc: When it enters a battle, the Pok\u00e9mon can tell one of the moves an opposing Pok\u00e9mon has.
    Int: EntryEffect
    Enter:
        ActivePokemon other = b.getOtherPokemon(enterer);
        List<Move> otherMoves = other.getMoves(b);

        List<AttackNamesies> besties = new ArrayList<>();
        int highestPower = -1;

        for (Move move : otherMoves) {
            if (move.getAttack().isStatusMove()) {
                continue;
            }

            int power = move.getAttack().getPower(b, other, enterer);
            if (power > highestPower) {
                highestPower = power;
                besties = new ArrayList<>();
                besties.add(move.getAttack().namesies());
            } else if (power == highestPower) {
                besties.add(move.getAttack().namesies());
            }
        }

        AttackNamesies warn;
        if (highestPower == -1) {
            warn = RandomUtils.getRandomValue(otherMoves).getAttack().namesies();
        } else {
            warn = RandomUtils.getRandomValue(besties);
        }

        Messages.add(enterer.getName() + "'s " + this.getName() + " alerted it to " + other.getName() + "'s " + warn.getName() + "!");
        ###
*
Hyper Cutter:
    Desc: The Pok\u00e9mon's proud of its powerful pincers. They prevent other Pok\u00e9mon from lowering its Attack stat.
    Int: StatProtectingEffect
    StatProtect:
        return stat == Stat.ATTACK;
        ###
*
Soundproof:
    Desc: Soundproofing of the Pok\u00e9mon itself gives full immunity to all sound-based moves.
    MoveTypePrevent: Sound_Based sound-based moves
*
Reckless:
    Desc: Powers up moves that have recoil damage.
    PowerMultiplierCondition: 1.2 user.getAttack() instanceof RecoilMove || user.getAttack() instanceof CrashDamageMove
*
Iron Fist:
    Desc: Powers up punching moves.
    PowerMultiplierCondition: 1.2 user.getAttack().isMoveType(MoveType.PUNCHING)
    Int: EntryEffect
    Enter:
        if (enterer.namesies() == PokemonNamesies.PANGORO) {
            Messages.add(enterer.getName() + " does not break the mold!!!!!!!");
        }
        ###
*
Natural Cure:
    Desc: All status conditions heal when the Pok\u00e9mon switches out.
    Int: SwitchOutEffect
    SwitchOut:
        if (!switchee.hasStatus(StatusNamesies.FAINTED)) {
            switchee.removeStatus();
        }
        ###
*
Serene Grace:
    Desc: Boosts the likelihood of additional effects occurring when attacking.
    EffectChanceMultiplier: 2
*
Leaf Guard:
    Desc: Prevents status conditions in sunny weather.
    Int: StatusPreventionEffect
    StatusPrevent:
        return b.getWeather().namesies() == WeatherNamesies.SUNNY;
        ###
    StatusPreventMessage: victim.getName() + "'s " + this.getName() + " prevents status conditions!"
*
Scrappy:
    Desc: The Pok\u00e9mon can hit Ghost-type Pok\u00e9mon with Normal- and Fighting-type moves.
    RemoveAdvantageType: Ghost attacking == Type.NORMAL || attacking == Type.FIGHTING
    Int: AttackingNoAdvantageChanger
*
Swift Swim:
    Desc: Boosts the Pok\u00e9mon's Speed stat in rain.
    SpeedWeather: Raining
*
Water Veil:
    Desc: The Pok\u00e9mon is covered with a water veil, which prevents the Pok\u00e9mon from getting a burn.
    StatusPreventAbility: Burned burns
*
Filter:
    Desc: Reduces the power of supereffective attacks taken.
    Int: OpponentPowerChangeEffect
    GetOppMultiplier:
        return TypeAdvantage.isSuperEffective(user, victim, b) ? .75 : 1;
        ###
*
Prism Armor:
    Desc: Reduces the power of supereffective attacks taken.
    Int: OpponentPowerChangeEffect
    GetOppMultiplier:
        return TypeAdvantage.isSuperEffective(user, victim, b) ? .75 : 1;
        ###
    MoldBreakerBreaker: True
*
Flame Body:
    Desc: Contact with the Pok\u00e9mon may burn the attacker.
    StatusContact: Burned
*
Rattled:
    Desc: Dark-, Ghost-, and Bug-type moves scare the Pok\u00e9mon and boost its Speed stat.
    Int: TakeDamageEffect
    OnTakeDamage:
        Type type = user.getAttackType();
        if (type == Type.BUG || type == Type.DARK || type == Type.GHOST) {
            victim.getStages().modifyStage(victim, 1, Stat.SPEED, b, CastSource.ABILITY);
        }
        ###
*
Moxie:
    Desc: The Pok\u00e9mon shows moxie, and that boosts the Attack stat after knocking out any Pok\u00e9mon.
    Int: MurderEffect
    KillWish:
        murderer.getStages().modifyStage(murderer, 1, Stat.ATTACK, b, CastSource.ABILITY);
        ###
*
Beast Boost:
    Desc: The Pok\u00e9mon boosts its most proficient stat each time it knocks out a Pok\u00e9mon.
    Int: MurderEffect
    KillWish:
        murderer.getStages().modifyStage(murderer, 1, murderer.getBestBattleStat(), b, CastSource.ABILITY);
        ###
*
Soul-Heart:
    Desc: Boosts its Sp. Atk stat every time a Pok\u00e9mon faints.
    Int: OpponentStatusReceivedEffect
    OppStatusReceived:
        if (statusType == StatusNamesies.FAINTED) {
            ActivePokemon abilify = this.getOtherPokemon(b, victim);
            abilify.getStages().modifyStage(abilify, 1, Stat.SP_ATTACK, b, CastSource.ABILITY);
        }
        ###
*
Imposter:
    Desc: The Pok\u00e9mon transforms itself into the Pok\u00e9mon it's facing.
    Irrestealable: True
    Int: EntryEffect
    Enter:
        PokemonEffectNamesies.TRANSFORMED.getEffect().cast(b, enterer, enterer, CastSource.ABILITY, false);
        ###
*
Adaptability:
    Desc: Powers up moves of the same type as the Pok\u00e9mon.
*
Water Absorb:
    Desc: Restores HP if hit by a Water-type move, instead of taking damage.
    AbsorbType: Water
*
Volt Absorb:
    Desc: Restores HP if hit by an Electric-type move, instead of taking damage.
    AbsorbType: Electric
*
Quick Feet:
    Desc: Boosts the Speed stat if the Pok\u00e9mon has a status condition.
    ToModify: Speed
    ModifyMultiplier: 1.5 p.hasStatus()
    EncounterRateMultiplier: .5
*
Trace:
    Desc: When it enters a battle, the Pok\u00e9mon copies an opposing Pok\u00e9mon's Ability.
    Irrestealable: True
    Int: EntryEffect, AbilityChanger
    Enter:
        ActivePokemon other = b.getOtherPokemon(enterer);
        if (!other.getAbility().isStealable() || other.hasAbility(this.namesies)) {
            return;
        }

        PokemonEffectNamesies.CHANGE_ABILITY.getEffect().cast(b, enterer, enterer, CastSource.ABILITY, true);
        ###
    AbilityChange:
        Ability otherAbility = b.getOtherPokemon(victim).getAbility();
        return otherAbility.namesies().getNewAbility();
        ###
    AbilityMessage:
        ActivePokemon other = b.getOtherPokemon(victim);
        return victim.getName() + " traced " + other.getName() + "'s " + other.getAbility().getName() + "!";
        ###
*
Download:
    Desc: Compares an opposing Pok\u00e9mon's Defense and Sp. Def stats before raising its own Attack or Sp. Atk stat -- whichever will be more effective.
    Int: EntryEffect
    Enter:
        ActivePokemon other = b.getOtherPokemon(enterer);
        PokemonInfo otherInfo = other.getPokemonInfo();

        int baseDefense = otherInfo.getStat(Stat.DEFENSE.index());
        int baseSpecialDefense = otherInfo.getStat(Stat.SP_DEFENSE.index());

        Stat toRaise = baseDefense < baseSpecialDefense ? Stat.ATTACK : Stat.SP_ATTACK;

        enterer.getStages().modifyStage(enterer, 1, toRaise, b, CastSource.ABILITY);
        ###
*
Pressure:
    Desc: By putting pressure on the opposing Pok\u00e9mon, it raises their PP usage.
    Int: EntryEffect, MaxLevelWildEncounterEffect
    Enter:
        Messages.add(enterer.getName() + " is exerting pressure!");
        ###
*
Immunity:
    Desc: The immune system of the Pok\u00e9mon prevents it from getting poisoned.
    StatusPreventAbility: Poisoned poison
*
Snow Cloak:
    Desc: Boosts evasion in a hailstorm.
    WeatherEvasion: Hailing
    WeatherEncounterRateDecreaser: Snow
*
Marvel Scale:
    Desc: The Pok\u00e9mon's marvelous scales boost the Defense stat if it has a status condition.
    ToModify: Defense
    ModifyMultiplier: 1.5 p.hasStatus()
*
Multiscale:
    Desc: Reduces the amount of damage the Pok\u00e9mon takes when its HP is full.
    Int: OpponentPowerChangeEffect
    GetOppMultiplier:
        return victim.fullHealth() ? .5 : 1;
        ###
*
Shadow Shield:
    Desc: Reduces the amount of damage the Pok\u00e9mon takes while its HP is full.
    Int: OpponentPowerChangeEffect
    GetOppMultiplier:
        return victim.fullHealth() ? .5 : 1;
        ###
    MoldBreakerBreaker: True
*
Sheer Force:
    Desc: Removes additional effects to increase the power of moves when attacking.
    PowerMultiplierCondition: 1.3 user.getAttack().hasSecondaryEffects()
    EffectChanceMultiplier: user.getAttack().hasSecondaryEffects() ? 0 : 1
*
Hustle:
    Desc: Boosts the Attack stat, but lowers accuracy.
    Int: StatModifyingEffect, MaxLevelWildEncounterEffect
    ModifyStat:
        if (s == Stat.ATTACK) {
            return 1.5;
        } else if (s == Stat.ACCURACY) {
            return .8;
        } else {
            return 1;
        }
        ###
*
Huge Power:
    Desc: Doubles the Pok\u00e9mon's Attack stat.
    ToModify: Attack
    SimpleModifier: 2
*
Speed Boost:
    Desc: Its Speed stat is boosted every turn.
    Int: EndTurnEffect
    ApplyEndTurn:
        victim.getStages().modifyStage(victim, 1, Stat.SPEED, b, CastSource.ABILITY);
        ###
*
Magic Bounce:
    Desc: Reflects status moves, instead of getting hit by them.
    MagicReflection: this.getName()
*
Super Luck:
    Desc: The Pok\u00e9mon is so lucky that the critical-hit ratios of its moves are boosted.
    Int: CritStageEffect
*
Shadow Tag:
    Desc: This Pok\u00e9mon steps on the opposing Pok\u00e9mon's shadow to prevent it from escaping.
    OpponentTrappingAbility: !escaper.hasAbility(this.namesies) && !escaper.isType(b, Type.GHOST)
*
Overcoat:
    Desc: Protects the Pok\u00e9mon from things like sand, hail, and powder.
    Int: WeatherBlockerEffect
    WeatherBlock:
        return true;
        ###
    PowderResist: True
*
Magma Armor:
    Desc: The Pok\u00e9mon is covered with hot magma, which prevents the Pok\u00e9mon from becoming frozen.
    StatusPreventAbility: Frozen freezing
*
Suction Cups:
    Desc: This Pok\u00e9mon uses suction cups to stay in one spot to negate all moves and items that force switching out.
    Int: AttackBlocker
    Block:
        Attack attack = user.getAttack();
        return attack instanceof SwapOpponentEffect && attack.isStatusMove();
        ###
    BlockMessage: victim.getName() + "'s " + this.getName() + " prevents it from switching!"
*
Steadfast:
    Desc: The Pok\u00e9mon's determination boosts the Speed stat each time the Pok\u00e9mon flinches.
    ReceiveEffect:
        if (effectType == PokemonEffectNamesies.FLINCH) {
            victim.getStages().modifyStage(victim, 1, Stat.SPEED, b, CastSource.ABILITY);
        }
        ###
*
Sand Stream:
    Desc: The Pok\u00e9mon summons a sandstorm when it enters a battle.
    WeatherStarter: Sandstorm whipped up a sandstorm
*
Regenerator:
    Desc: Restores a little HP when withdrawn from battle.
    Int: SwitchOutEffect
    SwitchOut:
        if (!switchee.hasStatus(StatusNamesies.FAINTED)) {
            switchee.healHealthFraction(1/3.0);
        }
        ###
*
Poison Heal:
    Desc: Restores HP if the Pok\u00e9mon is poisoned, instead of losing HP.
*
Truant:
    Desc: The Pok\u00e9mon can't use a move the following turn if it uses one.
    Field:
        private boolean lazyface;
        ###
    Activate:
        this.lazyface = false;
        ###
    Int: EndTurnEffect, BeforeTurnEffect
    ApplyEndTurn:
        if (victim.hasStatus(StatusNamesies.ASLEEP)) {
            lazyface = false;
        } else {
            lazyface = !lazyface;
        }
        ###
    CanAttack:
        if (lazyface) {
            Messages.add(p.getName() + " is loafing around!");
            return false;
        }

        return true;
        ###
*
Wonder Guard:
    Desc: Its mysterious power only lets supereffective moves hit the Pok\u00e9mon.
    Irreplaceable: True
    Irrestealable: True
    Int: AttackBlocker
    Block:
        // Status moves, super-effective moves, and None-type moves always hit
        return !user.getAttack().isStatusMove() && !TypeAdvantage.isSuperEffective(user, victim, b) && !user.isAttackType(Type.NO_TYPE);
        ###
    BlockMessage: victim.getName() + "'s " + this.getName() + " makes it immune to " + user.getAttack().getName() + "!"
*
Normalize:
    Desc: All the Pok\u00e9mon's moves become Normal type. The power of those moves is boosted a little.
    Int: ChangeAttackTypeEffect, EndTurnEffect
    ChangeAttackType:
        if (original != Type.NORMAL) {
            this.activated = true;
        }
    
        return Type.NORMAL;
        ###
    Field:
        private boolean activated;
        ###
    Activate:
        this.activated = false;
        ###
    ApplyEndTurn:
        this.activated = false;
        ###
    PowerMultiplierCondition: 1.2 activated
*
Stall:
    Desc: The Pok\u00e9mon moves after all other Pok\u00e9mon do.
    Int: StallingEffect
*
Pure Power:
    Desc: Using its pure power, the Pok\u00e9mon doubles its Attack stat.
    ToModify: Attack
    SimpleModifier: 2
*
Rough Skin:
    Desc: This Pok\u00e9mon inflicts damage with its rough skin to the attacker on contact.
    Int: PhysicalContactEffect
    Contact:
        Messages.add(user.getName() + " was hurt by " + victim.getName() + "'s " + this.getName() + "!");
        user.reduceHealthFraction(b, 1/8.0);
        ###
*
Solid Rock:
    Desc: Reduces the power of supereffective attacks taken.
    Int: OpponentPowerChangeEffect
    GetOppMultiplier:
        return TypeAdvantage.isSuperEffective(user, victim, b) ? .75 : 1;
        ###
*
White Smoke:
    Desc: The Pok\u00e9mon is protected by its white smoke, which prevents other Pok\u00e9mon from lowering its stats.
    Int: StatProtectingEffect
    StatProtect:
        return true;
        ###
    EncounterRateMultiplier: .5
*
Toxic Boost:
    Desc: Powers up physical attacks when the Pok\u00e9mon is poisoned.
    ToModify: Attack
    ModifyMultiplier: 1.5 p.hasStatus(StatusNamesies.POISONED)
*
Anticipation:
    Desc: The Pok\u00e9mon can sense an opposing Pok\u00e9mon's dangerous moves.
    Int: EntryEffect
    Enter:
        ActivePokemon other = b.getOtherPokemon(enterer);
        for (Move m : other.getMoves(b)) {
            Attack attack = m.getAttack();
            if (attack.getActualType().getAdvantage().isSuperEffective(enterer, b) || attack.isMoveType(MoveType.ONE_HIT_KO)) {
                Messages.add(enterer.getName() + "'s " + this.getName() + " made it shudder!");
                break;
            }
        }
        ###
*
Storm Drain:
    Desc: Draws in all Water-type moves. Instead of being hit by Water-type moves, it boosts its Sp. Atk.
    IncreaseBlockType: Water Sp_Attack
*
Color Change:
    Int: TakeDamageEffect
    OnTakeDamage:
        Type t = user.getAttackType();
        if (!victim.isType(b, t)) {
            type = t;
            PokemonEffectNamesies.CHANGE_TYPE.getEffect().cast(b, victim, victim, CastSource.ABILITY, true);
        }
        ###
    Field:
        private Type type;
        ###
    ChangeType:
        return new PokeType(type);
        ###
    Desc: The Pok\u00e9mon's type becomes the type of the move used on it.
*
Ice Body:
    Desc: The Pok\u00e9mon gradually regains HP in a hailstorm.
    Int: EndTurnEffect, WeatherBlockerEffect
    ApplyEndTurn:
        if (b.getWeather().namesies() == WeatherNamesies.HAILING) {
            victim.healHealthFraction(1/16.0);
            Messages.add(new MessageUpdate(victim.getName() + "'s HP was restored due to its " + this.getName() + "!").updatePokemon(b, victim));
        }
        ###
    WeatherBlock:
        return weather == WeatherNamesies.HAILING;
        ###
*
Light Metal:
    Desc: Halves the Pok\u00e9mon's weight.
    Int: HalfWeightEffect
    HalfAmount: 1
*
Drizzle:
    Desc: The Pok\u00e9mon makes it rain when it enters a battle.
    WeatherStarter: Raining started a downpour
*
Air Lock:
    Desc: Eliminates the effects of weather.
    WeatherEliminate: True
*
Defiant:
    Desc: Boosts the Pok\u00e9mon's Attack stat sharply when its stats are lowered.
    NextLevel: Attack
*
Competitive:
    Desc: Boosts the Sp. Atk stat sharply when a stat is lowered.
    NextLevel: Sp_Attack
*
Flower Gift:
    Desc: Boosts the Attack and Sp. Def stats of itself and allies when it is sunny.
    TwoModify: Attack Sp_Defense
    ModifyMultiplier: 1.5 b.getWeather().namesies() == WeatherNamesies.SUNNY
*
Aftermath:
    Desc: Damages the attacker if it contacts the Pok\u00e9mon with a finishing hit.
    Int: PhysicalContactEffect
    Contact:
        if (victim.isFainted(b) && !user.hasAbility(AbilityNamesies.DAMP)) {
            Messages.add(user.getName() + " was hurt by " + victim.getName() + "'s " + this.getName() + "!");
            user.reduceHealthFraction(b, 1/4.0);
        }
        ###
*
Heatproof:
    Desc: The heatproof body of the Pok\u00e9mon halves the damage from Fire-type moves that hit it.
    Int: OpponentPowerChangeEffect
    GetOppMultiplier:
        return user.isAttackType(Type.FIRE) ? .5 : 1;
        ###
*
Sand Force:
    Desc: Boosts the power of Rock-, Ground-, and Steel-type moves in a sandstorm.
    Int: WeatherBlockerEffect
    GetMultiplier:
        Type type = user.getAttackType();
        return (type == Type.ROCK || type == Type.STEEL || type == Type.GROUND) && b.getWeather().namesies() == WeatherNamesies.SANDSTORM ? 1.3 : 1;
        ###
    WeatherBlock:
        return weather == WeatherNamesies.SANDSTORM;
        ###
*
Snow Warning:
    Desc: The Pok\u00e9mon summons a hailstorm when it enters a battle.
    WeatherStarter: Hailing caused it to hail
*
Motor Drive:
    IncreaseBlockType: Electric Speed
    Desc: Boosts its Speed stat if hit by an Electric-type move, instead of taking damage.
*
Justified:
    Int: TakeDamageEffect
    OnTakeDamage:
        if (user.isAttackType(Type.DARK)) {
            victim.getStages().modifyStage(victim, 1, Stat.ATTACK, b, CastSource.ABILITY);
        }
        ###
    Desc: Being hit by a Dark-type move boosts the Attack stat of the Pok\u00e9mon, for justice.
*
Cursed Body:
    Desc: May disable a move used on the Pok\u00e9mon.
    Int: PhysicalContactEffect
    Contact:
        if (RandomUtils.chanceTest(30)) {
            user.setLastMoveUsed();
            if (PokemonEffectNamesies.DISABLE.getEffect().apply(b, victim, user, CastSource.ABILITY, false)) {
                Messages.add(victim.getName() + "'s " + this.getName() + " disabled " + user.getName() + "'s " + user.getAttack().getName());
            }
        }
        ###
*
Slow Start:
    Desc: For five turns, the Pok\u00e9mon's Attack and Speed stats are halved.
    Field:
        int count;
        ###
    Activate:
        this.count = 0;
        ###
    Int: EndTurnEffect, EntryEffect
    ApplyEndTurn:
        count++;
        ###
    Enter:
        count = 0;
        ###
    TwoModify: Attack Speed
    ModifyMultiplier: .5 count < 5
*
Bad Dreams:
    Desc: Reduces the HP of sleeping opposing Pok\u00e9mon.
    Int: EndTurnEffect
    ApplyEndTurn:
        ActivePokemon other = b.getOtherPokemon(victim);
        if (other.hasStatus(StatusNamesies.ASLEEP)) {
            Messages.add(other.getName() + " was hurt by " + victim.getName() + "'s " + this.getName() + "!");
            other.reduceHealthFraction(b, 1/8.0);
        }
        ###
*
Victory Star:
    Desc: Boosts the accuracy of its allies and itself.
    ToModify: Accuracy
    SimpleModifier: 1.1
*
Contrary:
    Desc: Makes stat changes have an opposite effect.
    Int: ModifyStageValueEffect
    ModifyStageValue:
        return -1*modVal;
        ###
*
Big Pecks:
    Desc: Protects the Pok\u00e9mon from Defense-lowering effects.
    Int: StatProtectingEffect
    StatProtect:
        return stat == Stat.DEFENSE;
        ###
*
Poison Touch:
    Desc: May poison a target when the Pok\u00e9mon makes contact.
    Int: OpponentTakeDamageEffect
    OpponentTakeDamage:
        if (RandomUtils.chanceTest(30)) {
            StatusNamesies.POISONED.getStatus().apply(b, user, victim, CastSource.ABILITY);
        }
        ###
*
Prankster:
    Desc: Gives priority to a status move.
    ChangePriorityAbility: 1 user.getAttack().isStatusMove() && !b.getOtherPokemon(user).isType(b, Type.DARK)
*
Wonder Skin:
    Desc: Makes status moves more likely to miss.
    ToModify: Evasion
    ModifyMultiplier: 1.5 opp.getAttack().isStatusMove()
*
Mummy:
    Desc: Contact with the Pok\u00e9mon changes the attacker's Ability to Mummy.
    Int: PhysicalContactEffect, AbilityChanger
    Contact:
        if (user.hasAbility(this.namesies) || !user.getAbility().isReplaceable()) {
            return;
        }

        // Cast the change ability effect onto the user
        PokemonEffectNamesies.CHANGE_ABILITY.getEffect().cast(b, victim, user, CastSource.ABILITY, true);
        ###
    AbilityChange:
        return AbilityNamesies.MUMMY.getNewAbility();
        ###
    AbilityMessage:
        return victim.getName() + "'s ability was changed to " + this.namesies().getName() + "!";
        ###
*
Defeatist:
    Desc: Halves the Pok\u00e9mon's Attack and Sp. Atk stats when its HP becomes half or less.
    PowerMultiplierCondition: .5 user.getHPRatio() < .5
*
Weak Armor:
    Desc: Physical attacks to the Pok\u00e9mon lower its Defense stat but sharply raise its Speed stat.
    Int: TakeDamageEffect
    OnTakeDamage:
        if (user.getAttack().getCategory() == MoveCategory.PHYSICAL) {
            victim.getStages().modifyStage(victim, -1, Stat.DEFENSE, b, CastSource.ABILITY);
            victim.getStages().modifyStage(victim, 2, Stat.SPEED, b, CastSource.ABILITY);
        }
        ###
*
Illusion:
    Desc: Comes out disguised as the Pok\u00e9mon in the party's last spot.
    Irrestealable: True
    Field:
        private boolean activated;
        private String illusionName;
        private PokeType illusionType;
        private PokemonNamesies illusionSpecies;
        private boolean illusionShiny;

        private void breakIllusion(Battle b, ActivePokemon victim) {
            // If the Illusion is already broken, no worries
            if (!activated) {
                return;
            }

            activated = false;
            Messages.add(victim.getName() + "'s Illusion was broken!");

            Messages.add(new MessageUpdate().withNewPokemon(victim.namesies(), victim.isShiny(), true, victim.isPlayer()));
            Messages.add(new MessageUpdate().updatePokemon(b, victim));
        }
        ###
    Activate:
        this.activated = false;
        ###
    Deactivate:
        breakIllusion(b, victim);
        ###
    Int: EntryEffect, SwitchOutEffect, TakeDamageEffect, ChangeTypeEffect, NameChanger
    Enter:
        // No Illusion today...
        if (!activated) {
            return;
        }

        // Display the Illusion changes
        Messages.add(new MessageUpdate().withNewPokemon(illusionSpecies, illusionShiny, false, enterer.isPlayer()));
        Messages.add(new MessageUpdate().updatePokemon(b, enterer));
        ###
    GetNameChange:
        return activated ? illusionName : null;
        ###
    SetNameChange:
        List<ActivePokemon> team = b.getTrainer(victim).getActiveTeam();
        ActivePokemon illusion = null;

        // Starting from the back of the party, locate the first conscious Pokemon that is of a different species to be the illusion
        for (ActivePokemon temp : new ReverseIterable<>(team)) {

            // If the Pokemon in back cannot fight for any reason -- do nothing
            if (!temp.canFight()) {
                continue;
            }

            // If the Pokemon in back is the same species at the current Pokemon -- do nothing
            if (temp.namesies() == victim.namesies()) {
                continue;
            }

            // Otherwise, we've found our Illusion!
            illusion = temp;
            break;
        }

        // No valid Pokemon to be as an illusion -- do not activate
        if (illusion == null) {
            return;
        }

        // Otherwise, we're in the illusion
        activated = true;

        illusionName = illusion.getName();
        illusionType = illusion.getActualType();
        illusionSpecies = illusion.namesies();
        illusionShiny = illusion.isShiny();
        ###
    SwitchOut:
        activated = false;
        ###
    OnTakeDamage:
        breakIllusion(b, victim);
        ###
    GetChangeTypeEffect:
        if (display && activated) {
            return illusionType;
        }

        return p.getActualType();
        ###
    AbilityIsActive:
        return activated;
        ###
*
Analytic:
    Desc: Boosts move power when the Pok\u00e9mon moves last.
    PowerMultiplierCondition: 1.3 !b.isFirstAttack()
*
Sap Sipper:
    Desc: Boosts the Attack stat if hit by a Grass-type move, instead of taking damage.
    IncreaseBlockType: Grass Attack
*
Iron Barbs:
    Desc: Inflicts damage to the attacker on contact with iron barbs.
    Int: PhysicalContactEffect
    Contact:
        Messages.add(user.getName() + " was hurt by " + victim.getName() + "'s " + this.getName() + "!");
        user.reduceHealthFraction(b, 1/8.0);
        ###
*
Mold Breaker:
    Desc: Moves can be used on the target regardless of its Abilities.
    Int: EntryEffect
    Enter:
        Messages.add(enterer.getName() + " breaks the mold!");
        ###
*
Teravolt:
    Desc: Moves can be used on the target regardless of its Abilities.
    Int: EntryEffect
    Enter:
        Messages.add(enterer.getName() + " is radiating a bursting aura!");
        ###
*
Turboblaze:
    Desc: Moves can be used on the target regardless of its Abilities.
    Int: EntryEffect
    Enter:
        Messages.add(enterer.getName() + " is radiating a blazing aura!");
        ###
*
Run Away:
    Int: DefiniteEscape
    Desc: Enables a sure getaway from wild Pok\u00e9mon.
*
Sticky Hold:
    Desc: Items held by the Pok\u00e9mon are stuck fast and cannot be removed by other Pok\u00e9mon.
*
Klutz:
    Desc: The Pok\u00e9mon can't use any held items.
    Int: ItemBlockerEffect
*
Unburden:
    Desc: Boosts the Speed stat if the Pok\u00e9mon's held item is used or lost.
    ToModify: Speed
    ModifyMultiplier: 2 p.hasEffect(PokemonEffectNamesies.CONSUMED_ITEM)
*
Pickpocket:
    Int: PhysicalContactEffect
    SwitchItemMessage: user.getName() + " stole " + victim.getName() + "'s " + victimItem.getName() + "!"
    Contact:
        // Steal from the Pokemon who made physical contact with you
        if (!victim.isFainted(b) && victim.canStealItem(b, user)) {
            this.swapItems(b, victim, user);
        }
        ###
    Desc: Steals an item from an attacker that made direct contact.
*
Harvest:
    Desc: May create another Berry after one is used.
    Int: EndTurnEffect
    ApplyEndTurn:
        // Does nothing if victim is holding something
        if (victim.isHoldingItem(b)) {
            return;
        }

        // Does nothing if victim never consumed an item
        ItemHolder consumed = (ItemHolder)victim.getEffect(PokemonEffectNamesies.CONSUMED_ITEM);
        if (consumed == null) {
            return;
        }

        // Restore the item if applicable
        HoldItem restored = consumed.getItem();
        if (restored instanceof Berry && (b.getWeather().namesies() == WeatherNamesies.SUNNY || RandomUtils.chanceTest(50))) {
            victim.giveItem(restored);
            Messages.add(victim.getName() + "'s " + this.getName() + " restored its " + restored.getName() + "!");
        }
        ###
*
Pickup:
    Desc: The Pok\u00e9mon may pick up the item an opposing Pok\u00e9mon used during a battle. It may pick up items outside of battle, too.
    Int: EndBattleEffect
    EndBattle:
        if (!p.isHoldingItem(b) && RandomUtils.chanceTest(10)) {
            ItemNamesies item = RandomUtils.getRandomValue(items);
            p.giveItem(item);
            Messages.add(p.getName() + " picked up " + StringUtils.articleString(item.getName()) + "!");
        }
        ###
    Field:
        private static final List<ItemNamesies> items = new ArrayList<>();
        static {
            addItem(ItemNamesies.POTION, 30);
            addItem(ItemNamesies.ANTIDOTE, 20);
            addItem(ItemNamesies.SUPER_POTION, 20);
            addItem(ItemNamesies.GREAT_BALL, 20);
            addItem(ItemNamesies.REPEL, 20);
            addItem(ItemNamesies.FULL_HEAL, 15);
            addItem(ItemNamesies.ETHER, 15);
            addItem(ItemNamesies.ULTRA_BALL, 15);
            addItem(ItemNamesies.HYPER_POTION, 10);
            addItem(ItemNamesies.REVIVE, 10);
            addItem(ItemNamesies.RARE_CANDY, 10);
            addItem(ItemNamesies.HEART_SCALE, 10);
            addItem(ItemNamesies.ELIXIR, 10);
            addItem(ItemNamesies.SUN_STONE, 5);
            addItem(ItemNamesies.MOON_STONE, 5);
            addItem(ItemNamesies.DAWN_STONE, 5);
            addItem(ItemNamesies.DUSK_STONE, 5);
            addItem(ItemNamesies.FIRE_STONE, 5);
            addItem(ItemNamesies.WATER_STONE, 5);
            addItem(ItemNamesies.LEAF_STONE, 5);
            addItem(ItemNamesies.ICE_STONE, 5);
            addItem(ItemNamesies.THUNDER_STONE, 5);
            addItem(ItemNamesies.SHINY_STONE, 5);
            addItem(ItemNamesies.KINGS_ROCK, 5);
            addItem(ItemNamesies.MAX_REVIVE, 5);
            addItem(ItemNamesies.NUGGET, 5);
            addItem(ItemNamesies.PRISM_SCALE, 5);
            addItem(ItemNamesies.DESTINY_KNOT, 5);
            addItem(ItemNamesies.FULL_RESTORE, 5);
            addItem(ItemNamesies.PPUP, 5);
            addItem(ItemNamesies.LEFTOVERS, 5);
            addItem(ItemNamesies.MAX_ELIXIR, 5);
            addItem(ItemNamesies.BIG_NUGGET, 1);
            addItem(ItemNamesies.BALM_MUSHROOM, 1);
            addItem(ItemNamesies.HPUP, 1);
            addItem(ItemNamesies.PROTEIN, 1);
            addItem(ItemNamesies.IRON, 1);
            addItem(ItemNamesies.CALCIUM, 1);
            addItem(ItemNamesies.CARBOS, 1);
            addItem(ItemNamesies.ZINC, 1);
            addItem(ItemNamesies.RARE_BONE, 1);
        }

        private static void addItem(ItemNamesies item, int quantity) {
            for (int i = 0; i < quantity; i++) {
                items.add(item);
            }
        }
        ###
*
Unnerve:
    Desc: Unnerves opposing Pok\u00e9mon and makes them unable to eat Berries.
    Int: EntryEffect
    Enter:
        Messages.add(enterer.getName() + "'s " + this.getName() + " made " + b.getOtherPokemon(enterer).getName() + " too nervous to eat berries!");
        ###
    BlockItem:
        return item.getItem() instanceof Berry;
        ###
*
Honey Gather:
    Int: EndBattleEffect
    EndBattle:
        if (!p.isHoldingItem(b) && RandomUtils.chanceTest(5*(int)Math.ceil(p.getLevel()/10.0))) {
            // TODO: Should give the item Honey, but this item has no purpose in our game so we'll see what this ability should actually do also something about Syrup Gather
            p.giveItem(ItemNamesies.LEFTOVERS);
        }
        ###
    Desc: The Pok\u00e9mon may gather Honey after a battle.
*
Gluttony:
    Desc: Makes the Pok\u00e9mon eat a held Berry when its HP drops to half or less, which is sooner than usual.
*
Multitype:
    Desc: Changes the Pok\u00e9mon's type to match the Plate it holds.
    SpecialItemAbility: PlateItem
*
RKS System:
    Desc: Changes the Pok\u00e9mon's type to match the memory disc it holds.
    SpecialItemAbility: MemoryItem
*
Forecast:
    Desc: The Pok\u00e9mon transforms with the weather to change its type to Water, Fire, or Ice.
    Irrestealable: True
    Int: ChangeTypeEffect
    GetChangeTypeEffect:
        return new PokeType(b.getWeather().getElement());
        ###
*
Bulletproof:
    Desc: Protects the Pok\u00e9mon from some ball and bomb moves.
    MoveTypePrevent: Bomb_Ball bomb/ball moves
*
Aura Break:
    Desc: The effects of \"Aura\" Abilities are reversed to lower the power of affected moves.
*
Fairy Aura:
    Desc: Powers up each Pok\u00e9mon's Fairy-type moves.
    Aura: Fairy
*
Dark Aura:
    Desc: Powers up each Pok\u00e9mon's Dark-type moves.
    Aura: Dark
*
Magician:
    Desc: The Pok\u00e9mon steals the held item of a Pok\u00e9mon it hits with a move.
    Int: ApplyDamageEffect
    SwitchItemMessage: user.getName() + " stole " + victim.getName() + "'s " + victimItem.getName() + "!"
    OnApplyDamage:
        // Steal the victim's item when damage is dealt
        if (!user.isFainted(b) && user.canStealItem(b, victim)) {
            this.swapItems(b, user, victim);
        }
        ###
*
Cheek Pouch:
    Desc: Restores HP as well when the Pok\u00e9mon eats a Berry.
*
Strong Jaw:
    Desc: The Pok\u00e9mon's strong jaw boosts the power of its biting moves.
    PowerMultiplierCondition: 1.5 user.getAttack().isMoveType(MoveType.BITING)
*
Mega Launcher:
    Desc: Powers up aura and pulse moves.
    PowerMultiplierCondition: 1.5 user.getAttack().isMoveType(MoveType.AURA_PULSE)
*
Tough Claws:
    Desc: Powers up moves that make direct contact.
    PowerMultiplierCondition: 1.33 user.getAttack().isMoveType(MoveType.PHYSICAL_CONTACT)
*
Sweet Veil:
    Desc: Prevents itself and ally Pok\u00e9mon from falling asleep.
    StatusPreventAbility: Asleep sleep
*
Aroma Veil:
    Desc: Protects itself and its allies from attacks that limit their move choices.
*
Healer:
    Desc: Sometimes heals its status condition.
    EndTurnStatusCure: RandomUtils.chanceTest(1, 3)
*
Pixilate:
    Desc: Normal-type moves become Fairy-type moves. The power of those moves is boosted a little.
    NormalTypeChanger: Fairy
*
Refrigerate:
    Desc: Normal-type moves become Ice-type moves. The power of those moves is boosted a little.
    NormalTypeChanger: Ice
*
Schooling:
    Desc: When it has a lot of HP, the Pok\u00e9mon forms a powerful school. It stops schooling when its HP is low.
    EndTurnFormChange: schoolForm false Solo 45 20 20 25 25 40 School 45 140 130 140 135 30 formsie.getHPRatio() >= .25 && formsie.getLevel() >= 20
*
Shields Down:
    Desc: When its HP becomes half or less, the Pok\u00e9mon's shell breaks and it becomes aggressive.
    EndTurnFormChange: coreForm false Meteor 60 60 100 60 100 60 Core 60 100 60 100 60 120 formsie.getHPRatio() < .5
*
Stance Change:
    Desc: The Pok\u00e9mon changes its form to Blade Forme when it uses an attack move, and changes to Shield Forme when it uses King's Shield.
    FormChange: shieldForm true Blade 60 150 50 150 50 60 Shield 60 50 150 50 150 60
    Int: BeforeTurnEffect, EntryEffect
    CanAttack:
        // TODO: Change image once I can find Aegislash Shield Form sprites
        if (shieldForm && !p.getAttack().isStatusMove()) {
            shieldForm = false;
            Messages.add(p.getName() + " changed into Blade Forme!");
        } else if (!shieldForm && p.getAttack().namesies() == AttackNamesies.KINGS_SHIELD) {
            shieldForm = true;
            Messages.add(p.getName() + " changed into Shield Forme!");
        }

        return true;
        ###
    Enter:
        Messages.add(enterer.getName() + " is in Shield Forme!");
        shieldForm = true;
        ###
*
Fur Coat:
    Desc: Halves the damage from physical moves onto this Pok\u00e9mon.
    ToModify: Defense
    SimpleModifier: 2
*
Grass Pelt:
    Desc: Boosts the Pok\u00e9mon's Defense stat in Grassy Terrain.
    ToModify: Defense
    ModifyMultiplier: 1.5 b.hasEffect(TerrainNamesies.GRASSY_TERRAIN)
*
Surge Surfer:
    Desc: Doubles the Pok\u00e9mon's Speed stat on Electric Terrain.
    ToModify: Speed
    ModifyMultiplier: 2 b.hasEffect(TerrainNamesies.ELECTRIC_TERRAIN)
*
Flower Veil:
    Desc: Grass-type Pok\u00e9mon are protected from status conditions and the lowering of their stats.
    Int: StatusPreventionEffect, StatProtectingEffect
    StatusPrevent:
        return victim.isType(b, Type.GRASS);
        ###
    StatusPreventMessage: victim.getName() + "'s " + this.getName() + " prevents status conditions!"
    StatProtect:
        return victim.isType(b, Type.GRASS);
        ###
*
Gale Wings:
    Desc: Gives priority to Flying-type moves when the Pok\u00e9mon's HP is full.
    ChangePriorityAbility: 1 user.fullHealth() && user.isAttackType(Type.FLYING)
*
Protean:
    Desc: Changes the Pok\u00e9mon's type to the type of the move it's about to use.
    Int: BeforeTurnEffect
    CanAttack:
        // Protean activates for all moves except for Struggle
        if (p.getAttack().namesies() != AttackNamesies.STRUGGLE) {
            type = p.getAttackType();
            PokemonEffectNamesies.CHANGE_TYPE.getEffect().cast(b, p, p, CastSource.ABILITY, true);
        }

        return true;
        ###
    Field:
        private Type type;
        ###
    ChangeType:
        return new PokeType(type);
        ###
*
Stamina:
    Desc: Boosts the Defense stat when hit by an attack.
    Int: TakeDamageEffect
    OnTakeDamage:
        victim.getStages().modifyStage(victim, 1, Stat.DEFENSE, b, CastSource.ABILITY);
        ###
*
Water Compaction:
    Desc: Boosts the Pok\u00e9mon's Defense stat sharply when hit by a Water-type move.
    Int: TakeDamageEffect
    OnTakeDamage:
        if (user.isAttackType(Type.WATER)) {
            victim.getStages().modifyStage(victim, 2, Stat.DEFENSE, b, CastSource.ABILITY);
        }
        ###
*
Merciless:
    Desc: The Pok\u00e9mon's attacks become critical hits if the target is poisoned.
    Int: AlwaysCritEffect
    ShouldCrit:
        return defending.hasStatus(StatusNamesies.POISONED);
        ###
*
Water Bubble:
    Desc: Lowers the power of Fire-type moves done to the Pok\u00e9mon and prevents the Pok\u00e9mon from getting a burn.
    Int: OpponentPowerChangeEffect
    StatusPreventAbility: Burned burns
    PowerMultiplierCondition: 2 user.isAttackType(Type.WATER)
    GetOppMultiplier:
        return user.isAttackType(Type.FIRE) ? .5 : 1;
        ###
*
Steelworker:
    Desc: Powers up Steel-type moves.
    PowerMultiplierCondition: 1.5 user.isAttackType(Type.STEEL)
*
Berserk:
    Desc: Boosts the Pok\u00e9mon's Sp. Atk stat when it takes a hit that causes its HP to become half or less.
    DropBelowHalfHealth: victim.getStages().modifyStage(victim, 1, Stat.SP_ATTACK, b, CastSource.ABILITY);
*
Wimp Out:
    Desc: The Pok\u00e9mon cowardly switches out when its HP becomes half or less.
    DropBelowHalfHealth: victim.switcheroo(b, victim, CastSource.ABILITY, true);
*
Emergency Exit:
    Desc: The Pok\u00e9mon, sensing danger, switches out when its HP becomes half or less.
    DropBelowHalfHealth: victim.switcheroo(b, victim, CastSource.ABILITY, true);
*
Long Reach:
    Desc: The Pok\u00e9mon uses its moves without making contact with the target.
*
Liquid Voice:
    Desc: All sound-based moves become Water-type moves.
    Int: ChangeAttackTypeEffect
    ChangeAttackType:
        if (attack.isMoveType(MoveType.SOUND_BASED)) {
            return Type.WATER;
        }

        return original;
        ###
*
Triage:
    Desc: Gives priority to a healing move.
    ChangePriorityAbility: 3 user.getAttack().isMoveType(MoveType.HEALING)
*
Galvanize:
    Desc: Normal-type moves become Electric-type moves. The power of those moves is boosted a little.
    NormalTypeChanger: Electric
*
Disguise:
    Desc: Once per battle, the shroud that covers the Pok\u00e9mon can protect it from an attack.
    Irrestealable: True
    Irreplaceable: True
    Field:
        private boolean activated;
        ###
    Activate:
        this.activated = false;
        ###
    Int: AbsorbDamageEffect
    AbsorbDamage:
        if (!activated && b.getOtherPokemon(damageTaker).isAttacking()) {
            boolean isPlayer = damageTaker.isPlayer();
            boolean shiny = damageTaker.isShiny();
            boolean front = !isPlayer;

            Messages.add(new MessageUpdate(damageTaker.getName() + "'s disguise was busted!!")
                .withImageName(damageTaker.getPokemonInfo().getImageName(shiny, front, true), isPlayer)
            );

            activated = true;
            return true;
        }

        return false;
        ###
*
Stakeout:
    Desc: Doubles the damage dealt to the target's replacement if the target switches out.
    PowerMultiplierCondition: 2 !user.isFirstTurn() && victim.isFirstTurn()
*
Corrosion:
    Desc: The Pok\u00e9mon can poison the target even if it's a Steel or Poison type.
*
Comatose:
    Desc: It's always drowsing and will never wake up. It can attack without waking up.
    Int: EntryEffect, SleepyFightsterEffect
    Enter:
        nightyNight(b, enterer);
        ###
    TheVeryEnd:
        return nightyNight(b, p);
        ###
    Field:
        // NOTE: This does not work exactly the same as in game
        // New mechanics -- Pokemon with Comatose will:
        // Become afflicted with a permanent Sleep condition upon entering battle
        // Still be able to attack while sleeping
        // Wake up from items, uproar, wake-up slap, etc.
        // Fall back to sleep at the end of turn if applicable -- if another status condition is acquired during this time, it will remove it
        // Other Pokemon are free to copy this ability
        private boolean nightyNight(Battle b, ActivePokemon sleepyHead) {

            // Sleepy head is already a sleepster nighty night
            if (sleepyHead.hasStatus(StatusNamesies.ASLEEP)) {
                return false;
            }
            
            // Deadsies can't sleep
            if (sleepyHead.isActuallyDead()) {
                return false;
            }

            if (StatusNamesies.ASLEEP.getStatus().appliesWithoutStatusCheck(b, sleepyHead, sleepyHead)) {
                sleepyHead.removeStatus();
                StatusNamesies.ASLEEP.getStatus().apply(b, sleepyHead, sleepyHead, CastSource.ABILITY);
                sleepyHead.getStatus().setTurns(-1);
                return true;
            }

            return false;
        }
        ###
*
Dazzling:
    Desc: Surprises the opposing Pok\u00e9mon, making it unable to attack using priority moves.
    PriorityPrevention: True
*
Queenly Majesty:
    Desc: Its majesty pressures the opposing Pok\u00e9mon, making it unable to attack using priority moves.
    PriorityPrevention: True
*
Dancer:
    Desc: When another Pok\u00e9mon uses a dance move, it can use a dance move following it regardless of its Speed.
    Int: OpponentEndAttackEffect
    OpponentEndAttack:
        Attack attack = attacking.getAttack();
        if (attack.isMoveType(MoveType.DANCE) && (!attacking.hasAbility(this.namesies()) || !attacking.getAbility().isActive())) {
            activated = true;
            ActivePokemon abilify = this.getOtherPokemon(b, attacking);
            Messages.add(abilify.getName() + "'s " + this.getName() + " allowed it to join in the dance!");
            abilify.callFullNewMove(b, attacking, attack.namesies());
            activated = false;
        }
        ###
    Field:
        private boolean activated;
        ###
    Activate:
        activated = false;
        ###
    AbilityIsActive:
        return this.activated;
        ###
*
Innards Out:
    Desc: Damages the attacker landing the finishing hit by the amount equal to its last HP.
    DeathWish:
        Messages.add(murderer.getName() + " was hurt by " + dead.getName() + "'s " + this.getName() + "!");
        murderer.reduceHealth(b, dead.getDamageTaken(), false);
        ###
*
Fluffy:
    Desc: Halves the damage taken from moves that make direct contact, but doubles that of Fire-type moves.
    Int: OpponentPowerChangeEffect
    GetOppMultiplier:
        if (user.getAttack().isMoveType(MoveType.PHYSICAL_CONTACT) && user.isAttackType(Type.FIRE)) {
            return .5;
        }

        if (user.isAttackType(Type.FIRE)) {
            return 2;
        }

        return 1;
        ###
*
Tangling Hair:
    Desc: Contact with the Pok\u00e9mon lowers the attacker's Speed stat.
    Int: PhysicalContactEffect
    Contact:
        user.getStages().modifyStage(victim, -1, Stat.SPEED, b, CastSource.ABILITY);
        ###
*
Psychic Surge:
    Desc: Turns the ground into Psychic Terrain when the Pok\u00e9mon enters a battle.
    TerrainStarter: Psychic
*
Electric Surge:
    Desc: Turns the ground into Electric Terrain when the Pok\u00e9mon enters a battle.
    TerrainStarter: Electric
*
Misty Surge:
    Desc: Turns the ground into Misty Terrain when the Pok\u00e9mon enters a battle.
    TerrainStarter: Misty
*
Grassy Surge:
    Desc: Turns the ground into Grassy Terrain when the Pok\u00e9mon enters a battle.
    TerrainStarter: Grassy
*

