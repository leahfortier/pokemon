# The name of each effect and its contents.
# Blocks are separated by '*'
# Any function must be terminated by ### on a line by itself
# Fields can be specified in any order

Constructor:
    Namesies Enum WeatherNamesies
    WeatherElement Enum Type
    CanHave Default False Boolean
*

***

ClearSkies:
    WeatherElement: Normal
    CanHave: True
*
Raining:
    WeatherElement: Water
    BattleEndTurnMessage: "The rain continues to pour."
    CastMessage: "It started to rain!"
    SubsideMessage: "The rain stopped."
    WeatherStatChange: Water Fire
*
Sunny:
    WeatherElement: Fire
    BattleEndTurnMessage: "The sunlight is strong."
    CastMessage: "The sunlight turned harsh!"
    SubsideMessage: "The sunlight faded."
    WeatherStatChange: Fire Water
    StatusPrevent:
        // Can't freeze in the sunlight
        if (status == StatusNamesies.FROZEN) {
            return ApplyResult.failure("Too sunny to freeze!!");
        }
        ###
*
Sandstorm:
    WeatherElement: Rock
    BuffetMessage: Type.ROCK,_Type.GROUND,_Type.STEEL victim.getName() + " is buffeted by the sandstorm!"
    BattleEndTurnMessage: "The sandstorm rages."
    CastMessage: "A sandstorm kicked up!"
    SubsideMessage: "The sandstorm subsided."
    ToModifyMultiplier: Sp_Defense 1.5 p.isType(b, Type.ROCK)
*
Hailing:
    WeatherElement: Ice
    CastMessage: "It started to hail!"
    SubsideMessage: "The hail stopped."
    BuffetMessage: Type.ICE victim.getName() + " is buffeted by the hail!"
    BattleEndTurnMessage: "The hail continues to fall."
*
